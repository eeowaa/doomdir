#+STARTUP:  overview
#+FILETAGS: :doom:
* Inbox [0/0]
:PROPERTIES:
:CATEGORY: doom/inbox
:END:
* Upstream [0/10]
:PROPERTIES:
:CATEGORY: doom/upstream
:END:
** TODO [#A] Send PRs for Doom Emacs
*** DONE Set email in Doom repo to GitHub noreply email
+ If you look in the git log, others are doing that
+ My email address: ~7460185+eeowaa@users.noreply.github.com~
  - From here: https://github.com/settings/emails
+ Set for just that one repo:
  #+begin_src sh :tangle no
  cd ~/.config/emacs
  git config user.name eeowaa
  git config user.email '7460185+eeowaa@users.noreply.github.com'
  #+end_src

*** DONE Get SSH keys set up for GitHub
+ [[https://linuxnatives.net/2019/how-to-create-good-ssh-keys][Use ed25519 cipher]]
  #+begin_src sh :tangle no
  mkdir -p ~/.ssh/github
  chmod 700 ~/.ssh/github
  ssh-keygen -t ed25519 -C 7460185+eeowaa@users.noreply.github.com -f ~/.ssh/github/id_ed25519
  #+end_src
+ Generate password for SSH key in macOS Keychain
+ Upload public part to GitHub
  - ~/.ssh/github/id_ed25519.pub

*** DONE Integrate SSH keys with Macbook
https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x
+ Need to restart computer before I can really test
+ In the meantime, I can check the Keychain

*** DONE Set up 2FA hardware device on GitHub
When registering a new security key, you'll eventually get a "waiting for"
message. At that point, touch the side of the YubiKey.

*** DONE Add forked repo as remote and fetch
#+begin_src sh :tangle no
cd ~/.config/emacs
git remote add eeowaa git@github.com:eeowaa/doom-emacs.git
git fetch eeowaa
#+end_src

** TODO [#A] Use relative symlinks for straight
If a user moves from =$HOME/.emacs.d= to =$XDG_CONFIG_HOME/emacs=, symlinks for
=straight= will be broken, because they are absolute:

#+begin_example
$ pwd
/Users/user/.config/emacs/.local/straight/build-28.0.50/straight
$ ls -l
total 256
-rw-r--r-- 1 user group  15842 Feb  8 16:57 straight-autoloads.el
lrwxr-xr-x 1 user group     72 Feb  8 16:57 straight-x.el -> /Users/user/.emacs.d/.local/straight/repos/straight.el/straight-x.el
-rw-r--r-- 1 user group   6435 Feb  8 16:57 straight-x.elc
lrwxr-xr-x 1 user group     70 Feb  8 16:57 straight.el -> /Users/user/.emacs.d/.local/straight/repos/straight.el/straight.el
-rw-r--r-- 1 user group 234899 Feb  8 16:57 straight.elc
#+end_example

The fix:
#+begin_src sh :eval no
cd ~/.config/emacs/.local/straight/build-28.0.50/straight
rm straight-x.el straight.el
ln -s ../../repos/straight.el/straight.el straight.el
ln -s ../../repos/straight.el/straight-x.el straight-x.el
#+end_src

** TODO [#B] Submit a PR for =lsp-yaml=
The ~lsp-yaml-download-schema-store-db~ function is flawed:

#+begin_src emacs-lisp :tangle no
(defun lsp-yaml-download-schema-store-db (&optional force-downloading)
  "Download the remote schema store at `lsp-yaml-schema-store-uri' into local cache.
Set FORCE-DOWNLOADING to non-nil to force re-download the database."
  (interactive "P")
  (or force-downloading ;; FIXME We shouldn't short-circuit here!
      (file-exists-p lsp-yaml-schema-store-local-db)
      (url-copy-file lsp-yaml-schema-store-uri lsp-yaml-schema-store-local-db)))
#+end_src

Better implementation:

#+begin_src emacs-lisp :tangle no
(defun lsp-yaml-download-schema-store-db (&optional force-downloading)
  "Download the remote schema store at `lsp-yaml-schema-store-uri' into local cache.
Set FORCE-DOWNLOADING to non-nil to force re-download the database."
  (interactive "P")
  (when (or force-downloading
            (not (file-exists-p lsp-yaml-schema-store-local-db)))
    (url-copy-file lsp-yaml-schema-store-uri lsp-yaml-schema-store-local-db)))
#+end_src

** TODO [#B] Submit a PR for =make=
Looking at the definition of ~+make/run~, only =Makefile= and =makefile= are
searched for, but =GNUmakefile= should also be searched for.

** TODO [#B] Do not fail to store Org links before opening a PDF
~org-store-link~ fails with the following error message:
#+begin_quote
pdf-info-check-epdfinfo: pdf-info-epdfinfo-program is not executable
#+end_quote

This happens when =+pdf= is enabled but before ~epdfinfo~ is built (which
usually happens after visiting a PDF for the first time).

** TODO [#B] Create an Arduino module
Combine and configure the following packages:

| Package          | Version       | Status    | Archive | Description                         | Website                                        |
|------------------+---------------+-----------+---------+-------------------------------------+------------------------------------------------|
| arduino-cli-mode | 20210119.1200 | available | melpa   | Arduino-CLI command wrapper         | https://github.com/motform/arduino-cli-mode    |
| arduino-mode     | 20210216.926  | available | melpa   | Major mode for editing Arduino code | https://github.com/stardiviner/arduino-mode    |
| company-arduino  | 20160306.1739 | available | melpa   | company-mode for Arduino            | https://github.com/yuutayamada/company-arduino |
|------------------+---------------+-----------+---------+-------------------------------------+------------------------------------------------|
|                  | <l>           |           |         |                                     |                                                |

** TODO [#B] Fix documentation for =lua=
References to the ~lua-lsp-dir~ variable are incorrect. The actual variable name
is ~+lua-lsp-dir~ (note the leading plus).

** TODO [#C] Fix documentation for session persistence
This just doesn't make any sense:
#+begin_quote
You can supply either a name to load a specific session to replace your current
one.
#+end_quote

[[file:~/.config/emacs/modules/ui/workspaces/README.org::*Session persistence][Session persistence]]

** TODO [#C] Fix documentation for automatic workspaces
[[file:modules/ui/workspaces/README.org::*Automatic workspaces][modules/ui/workspaces/README.org]]:
#+begin_quote
A workspace is automatically created (and switched to) when you:

+ Create a new frame (with =make-frame=; bound to =M-N= by default).
#+end_quote

The =M-N= keybinding is incorrect, both for Evil mode and regular Emacs
keybindings.

** TODO [#C] Reconcile discrepancies in documentation for Doom font variables
+ [[file:~/.config/emacs/modules/ui/doom/README.org::*Changing fonts][modules/ui/doom/README.org]]:
  #+begin_quote
  core/core-ui.el has four relevant variables

  + ~doom-font~ :: the default font to use in Doom Emacs.
  + ~doom-big-font~ :: the font to use when ~doom-big-font-mode~ is enabled.
  + ~doom-variable-font~ :: the font to use when ~variable-pitch-mode~ is active (or where the ~variable-pitch~ face is used).
  + ~doom-unicode-font~ :: the font used to display unicode symbols. This is ignored if the =:ui unicode= module is enabled.
  #+end_quote

+ [[file:~/.config/emacs/core/templates/config.example.el::;; Doom exposes five (optional) variables for controlling fonts in Doom. Here][core/templates/config.example.el]]:
  #+begin_quote
  ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  ;; are the three important ones:
  ;;
  ;; + `doom-font'
  ;; + `doom-variable-pitch-font'
  ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  #+end_quote

* Config [6/12]
:PROPERTIES:
:CATEGORY: doom/config
:END:
** DONE [#A] Sync Doom dotfiles
** DONE [#A] Create a =custom.el= file and load it when present
+ I believe there is a Doom-specific construct for checking for file existence
+ Move my name and email-address to =custom.el=

** DONE [#B] Rewrite this document using Doom project conventions
*** DONE Determine conventions
**** DONE When to use =this= vs. ~that~
Here is the convention:
+ CLI commands and generic code
  + ~echo 'Hello, world!'~
  + ~printf("Hello, world!\n");~
+ elisp code and symbols
  + ~(message "Hello, world!")~
  + ~doom+emacs+dir~
  + ~doom/reload~
+ markup
  + ~#+STARTUP:~
  + ~*** Org Headline~
  + ~### Markdown Headline~
+ key bindings
  + =K=
  + =M+x +lookup/documentation=
+ file paths
  + =DOOMDIR/config.el=
+ citations
  + =:editor evil=
  + =evil=
  + =+everywhere=

***** DONE See if I get a response on Discord
https://discord.com/channels/406534637242810369/406627025030348820/780499424983646240

From Henrik himself:
#+begin_quote
~...~ for code/markup and elisp symbols. =...= for keybinds, file paths, and
citations (names of modules and packages).

TODO, #include, and :DRAWER: are all org markup, so use the former for them.
#+end_quote

**** DONE Bullet point style
So far, I haven't really seen a consistent style in the Doom documentation, but
I have noticed a few patterns:

+ ~+~ is used more often than ~-~
  + The benefit of using ~+~ is that it is slightly more conspicuous than ~-~
  + The downside is that one more keystroke is needed to start a list
  + For now, I'll use ~+~ for information and ~-~ for checkbox lists
    + Checkboxes are already pretty conspicuous
    + Having separate checkbox list syntax means that I can search for those
      lists by ~^ *-~ instead of ~^ *\+ \[[ X-]\]~
+ Each item in a given list (including nested items) starts with the same symbol
+ Tables of contents always use ~-~

*** DONE Rewrite the document
** DONE [#B] Write =DOOMDIR/README.org=
Interestingly, when I first opened the file, it was pre-populated (probably by
the =:editor file-templates= module) to look like documentation for a Doom
module. IIRC, the private user configuration in =DOOMDIR= is a module itself, so
I suppose it makes sense. But certain things do *not* make sense:

+ [X] Does the =DOOMDIR= module have a formal name? :: "private configuration"
+ [X] Does the =DOOMDIR= module have module flags? :: no
+ [X] Is =$OOMDIR/init.el= a member of the =DOOMDIR= module? :: yes

** DONE [#B] Replace ~advice-add~ with ~defadvice!~ macros
:LOGBOOK:
- Note taken on [2022-09-02 Fri 20:33] \\
  I have done this as much as possible without too much hassle.
:END:
I want my configuration to use Doom idioms as much as possible.

** DONE [#C] Make ~PREREQ~ lines OS-independent
:LOGBOOK:
- Note taken on [2021-09-23 Thu 08:43] \\
  I ended up taking a different approach: I moved the ~PREREQ~ comments into
  source blocks in =config.org= and tangled them to =install/macos.sh=.

  In the future, when adding support for different operating systems, I can just
  add separate source blocks that tangle to different shell scripts, e.g.,
  =install/fedora.sh=. This solves the issue of OS-independence.

  To solve the issue of running prerequisite setup only for enabled modules, the
  subtrees in =config.org= that correspond to disabled modules have been
  archived. Therefore, the prerequisite-installation source blocks for disabled
  modules are not tangled to the =install/*.sh= files.
:END:
Currently, the ~PREREQ~ comments just explain what prerequisite commands need to
be run for macOS. I would like to refactor these comments into a script or set
of scripts to install prerequisites based on the host OS. For the module
prerequisites, it would be great to be able to run the prerequisite system
commands based on which modules are enabled; to do that, we must be able to
programmatically query which modules are enabled.  It would be easy enough to
write a command to do that:

#+begin_src sh :tangle no
sed -n \
    -e '/^(doom!/d' -e '/^[ 	]*;;/d' \
    -e 's/^[ 	]*(\{0,1\}\([^:; 	][^ 	]*\).*$/\1/p' \
    init.el
#+end_src

Which actually comes pretty close (it misses ~(:if IS-MAC macos)~ but otherwise
gets everything). The better way would be to parse the output of ~doom info~:

#+begin_src sh :tangle no
doom info | sed -n \
    -e 's/^[ 	]*modules[ 	]\{1,\}//p'
    # (keep parsing...)
#+end_src

Which doesn't miss anything, and seems more idiomatic.

** TODO [#A] Tangle =DOOMDIR/init.el= from =DOOMDIR/config.org=
This doesn't seem too difficult. All I will need is a set of source blocks that
tangle to =init.el=. There will need to be some boilerplate at the top and
bottom, but the rest should sit nicely in the =config.org= document structure.

** TODO [#B] Create a =doctor.el= file that checks for the existence of locally-stored credentials
Basically, anywhere I have an ~auth-source-pick-first-password~ function call, I
should make sure that it actually works. I can do this by tangling from source
blocks in =config.org=.

** TODO [#B] Create a =doctor.el= file that reports on ~:hack:~ tags, ~defadvice!~, and similar
I just don't want my modifications to get out of hand.

** TODO [#B] Reorganize =config.el= so that ~after!~ blocks are utilized correctly
I don't really even know what the end result will look like or why it will look
the way it will (I don't know what I don't know, i.e., there are unknown
unknowns at this point, which is precisely why I have this listed as an issue)

References:
+ https://emacs.stackexchange.com/questions/44377/how-do-i-see-which-packages-are-loaded
+ [[help:features]]
+ [[help:use-package-compute-statistics]]
+ [[help:use-package-report]]

** TODO [#C] Figure out how to patch specific functions in Doom
+ =el-patch= looks great: https://github.com/raxod502/el-patch
  - Doesn't look like it's used in Doom Emacs

*** TODO Check the Doom documentation
*** HOLD Ask on Discord
** TODO [#C] Create custom module =:ui page-break-lines=
Although I already have the =page-break-lines= package installed in
=DOOMDIR/packages.el= and ~global-page-break-lines-mode~ enabled in
=DOOMDIR/config.el=, I could write a custom module to do this, placing it under
=DOOMDIR/modules/ui/page-break-lines=. (See the documentation for
~doom-modules-dirs~.) This would be an easy introduction to writing modules.

It would be nice to include a ~CUSTOM~ comment tag over the module declaration
in the ~doom!~ block of =DOOMDIR/init.el= just to remember that /I/ defined the
module.
