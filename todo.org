#+STARTUP:  overview
#+FILETAGS: :doom:
* Inbox
:PROPERTIES:
:CATEGORY: doom/inbox
:END:
** TODO [#B] Figure out the autosave and backup situation for Doom Emacs
Compare with my old config and try to match it

** TODO [#C] Create method to store link from =eshell= buffers
Just store the current working directory.

** TODO [#C] Fix eshell for operations that output lots of ANSI color escape codes
Just try ~rg~ or ~fd~ somewhere in =~/.config/emacs= and you'll eventually see
the escape codes instead of colors being output. The only workaround I know of
now is to use =vterm= instead of =eshell=.

** TODO [#C] Fix ImageMagick display of images
** TODO [#A] Fix the size of the popup buffer invoked by =M-x lsp=
/Note that ~lsp~ is invoked when you enter a buffer, as well/.

When the frame is too small (e.g. its default size), the first few menu items in
the popup window are cut off, and all you see are options to exclude the file
from the LSP workspace. Unless you know about the other available options, LSP
won't work for you. Unfortunately, resizing the frame does not help.

* Upstream [0/5]
:PROPERTIES:
:CATEGORY: doom/upstream
:END:
** TODO [#A] Send PRs for Doom Emacs
*** DONE Set email in Doom repo to GitHub noreply email
- If you look in the git log, others are doing that
- My email address: ~7460185+eeowaa@users.noreply.github.com~
  - From here: https://github.com/settings/emails
- Set for just that one repo:
  #+begin_src sh
  cd ~/.config/emacs
  git config user.name eeowaa
  git config user.email '7460185+eeowaa@users.noreply.github.com'
  #+end_src

*** DONE Get SSH keys set up for GitHub
- [[https://linuxnatives.net/2019/how-to-create-good-ssh-keys][Use ed25519 cipher]]
  #+begin_src sh
  mkdir -p ~/.ssh/github
  chmod 700 ~/.ssh/github
  ssh-keygen -t ed25519 -C 7460185+eeowaa@users.noreply.github.com -f ~/.ssh/github/id_ed25519
  #+end_src
- Generate password for SSH key in macOS Keychain
- Upload public part to GitHub
  - ~/.ssh/github/id_ed25519.pub

*** TODO Integrate SSH keys with Macbook
https://www.getpagespeed.com/work/proper-use-of-ssh-client-in-mac-os-x
- Need to restart computer before I can really test
- In the meantime, I can check the Keychain

*** DONE Set up 2FA hardware device on GitHub
When registering a new security key, you'll eventually get a "waiting for"
message. At that point, touch the side of the YubiKey.

*** DONE Add forked repo as remote and fetch
#+begin_src sh
cd ~/.config/emacs
git remote add eeowaa git@github.com:eeowaa/doom-emacs.git
git fetch eeowaa
#+end_src

** TODO [#B] Submit a PR for =lsp-yaml=
The ~lsp-yaml-download-schema-store-db~ function is flawed:

#+begin_src elisp
(defun lsp-yaml-download-schema-store-db (&optional force-downloading)
  "Download the remote schema store at `lsp-yaml-schema-store-uri' into local cache.
Set FORCE-DOWNLOADING to non-nil to force re-download the database."
  (interactive "P")
  (or force-downloading ;; FIXME We shouldn't short-circuit here!
      (file-exists-p lsp-yaml-schema-store-local-db)
      (url-copy-file lsp-yaml-schema-store-uri lsp-yaml-schema-store-local-db)))
#+end_src

Better implementation:

#+begin_src elisp
(defun lsp-yaml-download-schema-store-db (&optional force-downloading)
  "Download the remote schema store at `lsp-yaml-schema-store-uri' into local cache.
Set FORCE-DOWNLOADING to non-nil to force re-download the database."
  (interactive "P")
  (when (or force-downloading
            (not (file-exists-p lsp-yaml-schema-store-local-db)))
    (url-copy-file lsp-yaml-schema-store-uri lsp-yaml-schema-store-local-db)))
#+end_src

** TODO [#C] Fix documentation for session persistence
This just doesn't make any sense:
#+begin_quote
You can supply either a name to load a specific session to replace your current
one.
#+end_quote

[[file:~/.config/emacs/modules/ui/workspaces/README.org::*Session persistence][Session persistence]]

** TODO [#C] Fix documentation for automatic workspaces
[[file:modules/ui/workspaces/README.org::*Automatic workspaces][modules/ui/workspaces/README.org]]:
#+begin_quote
A workspace is automatically created (and switched to) when you:

+ Create a new frame (with =make-frame=; bound to =M-N= by default).
#+end_quote

The =M-N= keybinding is incorrect, both for Evil mode and regular Emacs
keybindings.

** TODO [#C] Reconcile discrepancies in documentation for Doom font variables
- [[file:~/.config/emacs/modules/ui/doom/README.org::*Changing fonts][modules/ui/doom/README.org]]:
  #+begin_quote
  core/core-ui.el has four relevant variables

  + ~doom-font~ :: the default font to use in Doom Emacs.
  + ~doom-big-font~ :: the font to use when ~doom-big-font-mode~ is enabled.
  + ~doom-variable-font~ :: the font to use when ~variable-pitch-mode~ is active (or where the ~variable-pitch~ face is used).
  + ~doom-unicode-font~ :: the font used to display unicode symbols. This is ignored if the =:ui unicode= module is enabled.
  #+end_quote

- [[file:~/.config/emacs/core/templates/config.example.el::;; Doom exposes five (optional) variables for controlling fonts in Doom. Here][core/templates/config.example.el]]:
  #+begin_quote
  ;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
  ;; are the three important ones:
  ;;
  ;; + `doom-font'
  ;; + `doom-variable-pitch-font'
  ;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
  ;;   presentations or streaming.
  #+end_quote

* Config [3/6]
:PROPERTIES:
:CATEGORY: doom/config
:END:
** DONE [#A] Sync Doom dotfiles
** DONE [#A] Create a =custom.el= file and load it when present
+ I believe there is a Doom-specific construct for checking for file existence
+ Move my name and email-address to =custom.el=

** TODO [#B] Write =$DOOMDIR/README.org=
Interestingly, when I first opened the file, it was pre-populated (probably by
the =:editor file-templates= module) to look like documentation for a Doom
module. IIRC, the private user configuration in =$DOOMDIR= is a module itself,
so I suppose it makes sense. But certain things do *not* make sense:

- [ ] Does the =$DOOMDIR= module have a formal name?
- [ ] Does the =$DOOMDIR= module have module flags?
  - [ ] If so, where are they specified?
- [ ] Is =$DOOMDIR/init.el= a member of the =$DOOMDIR= module?

** DONE [#B] Rewrite this document using Doom project conventions
*** DONE Determine conventions
**** DONE When to use =this= vs. ~that~
Here is the convention:
+ CLI commands and generic code
  + ~echo 'Hello, world!'~
  + ~printf("Hello, world!\n");~
+ elisp code and symbols
  + ~(message "Hello, world!")~
  + ~doom+emacs+dir~
  + ~doom/reload~
+ markup
  + ~#+STARTUP:~
  + ~*** Org Headline~
  + ~### Markdown Headline~
+ key bindings
  + =K=
  + =M+x +lookup/documentation=
+ file paths
  + =$DOOMDIR/config.el=
+ citations
  + =:editor evil=
  + =evil=
  + =+everywhere=

***** DONE See if I get a response on Discord
https://discord.com/channels/406534637242810369/406627025030348820/780499424983646240

From Henrik himself:
#+begin_quote
~...~ for code/markup and elisp symbols. =...= for keybinds, file paths, and
citations (names of modules and packages).

TODO, #include, and :DRAWER: are all org markup, so use the former for them.
#+end_quote

**** DONE Bullet point style
So far, I haven't really seen a consistent style in the Doom documentation, but
I have noticed a few patterns:

+ ~+~ is used more often than ~-~
  + The benefit of using ~+~ is that it is slightly more conspicuous than ~-~
  + The downside is that one more keystroke is needed to start a list
  + For now, I'll use ~+~ for information and ~-~ for checkbox lists
    + Checkboxes are already pretty conspicuous
    + Having separate checkbox list syntax means that I can search for those
      lists by ~^ *-~ instead of ~^ *\+ \[[ X-]\]~
+ Each item in a given list (including nested items) starts with the same symbol
+ Tables of contents always use ~-~

*** DONE Rewrite the document
** TODO [#C] Make ~PREREQ~ lines OS-independent
Currently, the ~PREREQ~ comments just explain what prerequisite commands need to
be run for macOS. I would like to refactor these comments into a script or set
of scripts to install prerequisites based on the host OS. For the module
prerequisites, it would be great to be able to run the prerequisite system
commands based on which modules are enabled; to do that, we must be able to
programmatically query which modules are enabled.  It would be easy enough to
write a command to do that:

#+begin_src sh
sed -n \
    -e '/^(doom!/d' -e '/^[ 	]*;;/d' \
    -e 's/^[ 	]*(\{0,1\}\([^:; 	][^ 	]*\).*$/\1/p' \
    init.el
#+end_src

Which actually comes pretty close (it misses ~(:if IS-MAC macos)~ but otherwise
gets everything). The better way would be to parse the output of ~doom info~:

#+begin_src sh
doom info | sed -n \
    -e 's/^[ 	]*modules[ 	]\{1,\}//p'
    # (keep parsing...)
#+end_src

Which doesn't miss anything, and seems more idiomatic.

** TODO [#C] Figure out how to patch specific functions in Doom
- =el-patch= looks great: https://github.com/raxod502/el-patch
  - Doesn't look like it's used in Doom Emacs

*** TODO Check the Doom documentation
*** HOLD Ask on Discord
* Org [9/16]
:PROPERTIES:
:CATEGORY: doom/org
:END:
** DONE [#A] Display distinguishable name in refile targets
Well, it's distinguishable, but I don't like seeing the entire path. I guess
this counts as done, and I'll continue to shorten the path (but that will be a
lower-priority item).

** DONE [#A] Capture Org in separate files for work and otherwise
** DONE [#A] Do not indent text in bodies of subtrees
** DONE [#A] Indent Org source blocks
Refer to your old dotfiles.

** TODO [#B] Fix org headline insert hook
I do not want there to be a blank line after drawers or scheduling information:
- [ ] ~^:END:$~
- [ ] ~^\\(?:DEADLINE\\|SCHEDULED\\):~

** DONE [#B] Display parent directory instead of "todo.org" for Org agenda
Currently, the agenda displays "todo.org" for entries in =~/org/todo.org=,
=~/org/work/todo.org=, and =~/org/life/todo.org=. I would rather it just display
"org", "work", and "life", respectively.

- ~org-todo-list~ (=SPC o a t=)
- ~org-agenda-prefix-format~

** DONE [#B] Remove file links from org capture
At least from the personal ones...
#+begin_src emacs-lisp :tangle no
(setq org-default-notes-file
      (expand-file-name +org-capture-notes-file org-directory)
      +org-capture-journal-file
      (expand-file-name +org-capture-journal-file org-directory)
      org-capture-templates
      '(("t" "Personal todo" entry
         (file+headline +org-capture-todo-file "Inbox")
         "* TODO %?\n%i\n%a" :prepend t)
        ("n" "Personal notes" entry
         (file+headline +org-capture-notes-file "Inbox")
         "* %u %?\n%i\n%a" :prepend t)
        ("j" "Journal" entry
         (file+olp+datetree +org-capture-journal-file)
         "* %U %?\n%i\n%a" :prepend t)

        ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
        ;; {todo,notes,changelog}.org file is found in a parent directory.
        ;; Uses the basename from `+org-capture-todo-file',
        ;; `+org-capture-changelog-file' and `+org-capture-notes-file'.
        ("p" "Templates for projects")
        ("pt" "Project-local todo" entry  ; {project-root}/todo.org
         (file+headline +org-capture-project-todo-file "Inbox")
         "* TODO %?\n%i\n%a" :prepend t)
        ("pn" "Project-local notes" entry  ; {project-root}/notes.org
         (file+headline +org-capture-project-notes-file "Inbox")
         "* %U %?\n%i\n%a" :prepend t)
        ("pc" "Project-local changelog" entry  ; {project-root}/changelog.org
         (file+headline +org-capture-project-changelog-file "Unreleased")
         "* %U %?\n%i\n%a" :prepend t)

        ;; Will use {org-directory}/{+org-capture-projects-file} and store
        ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
        ;; support `:parents' to specify what headings to put them under, e.g.
        ;; :parents ("Projects")
        ("o" "Centralized templates for projects")
        ("ot" "Project todo" entry
         (function +org-capture-central-project-todo-file)
         "* TODO %?\n %i\n %a"
         :heading "Tasks"
         :prepend nil)
        ("on" "Project notes" entry
         (function +org-capture-central-project-notes-file)
         "* %U %?\n %i\n %a"
         :heading "Notes"
         :prepend t)
        ("oc" "Project changelog" entry
         (function +org-capture-central-project-changelog-file)
         "* %U %?\n %i\n %a"
         :heading "Changelog"
         :prepend t)))
#+end_src

** DONE [#B] Reorganize layout of agenda files and directories
*** DONE Determine relevant variables and commands
- ~org-directory~
- ~org-agenda-files~
- ~org-attach-directory~
- ~org-mobile-directory~

| Candidates          | Buffer or File             | Headline          | Text              |
|---------------------+----------------------------+-------------------+-------------------|
| Current buffer      |                            | org: =SPC m .=    | global: =SPC s s= |
| Org buffers         | org: =SPC m ,=             | org: =SPC m /=    |                   |
| Agenda files        | org: =SPC u SPC u SPC m ,= | global: =SPC n S= |                   |
| Org directory files | global: =SPC n f=          |                   | global: =SPC n s= |

** DONE [#B] Have progress cookies only reference top-level ~TODO~ items
Turns out this is already the case. I just wasn't updating the cookies.

** TODO [#C] Use Org speed keys
Just apply your old configuration

** TODO [#C] Create headline sorting function
+ Sort by priority, then by by ~TODO~ keyword
+ Reference ~org-sort-entries~

** TODO [#C] Create integration between embedded ~TODO~ and project =todo.org=
Something like this Atlassian VS Code plugin:
https://support.atlassian.com/bitbucket-cloud/docs/jira-issues-in-vs-code/

+ Embedded ~TODO~ comments:
  + https://github.com/tarsius/hl-todo
  + ~hl-todo-keyword-faces~
  + ~hl-todo-next~, ~hl-todo-previous~, ~hl-todo-occur~
+ Project =todo.org= list:
  + ~org-capture-templates~
  + ~counsel-projectile-org-capture-templates~
  + ~counsel-projectile-org-capture~
+ Integration with Git:
  + https://github.com/alphapapa/magit-todos
  + ~magit-todos-list~

** TODO [#C] Figure out how to /easily/ insert screenshots into Org buffers
Right now, the best way I know how is to take a screenshot using the macOS
system keybinding (=Cmd-Shift-4=), save it as a file, and then drag and drop the
file itself (from Finder) into an Org buffer via =+dragndrop=. This takes too
long. What about ~org-screenshot-take~?

** TODO [#C] Ignore surrounding tildes for interactive help functions
Doom's org markup convention is to surround elisp symbols with tildes. However,
this makes it difficult to use commands such as ~counsel-describe-variable~
(=SPC h v=), ~counsel-describe-function~ (=SPC h f=), and ~find-function~
(custom-mapped to =C-h C-f=) for symbols under point.

The current workaround is to select the "object" under point using =v i e= and
then use the corresponding help command. This works well enough, but is an
annoying extra step.

** TODO [#C] Fix alignment for agenda view (the one with the dates)
- https://www.reddit.com/r/orgmode/comments/6ybjjw/aligned_agenda_view_anyway_to_make_this_more/
- IIRC, this is called the "fancy diary"

** DONE [#C] New headings following non-blank entries should come after a blank line
This one was really sticky.  Finally got it how I like it, though.

* Markdown [1/2]
:PROPERTIES:
:CATEGORY: doom/markdown
:END:
** DONE [#B] Create ligatures for Markdown
| Before      | After |
|-------------+-------|
| &copy       | ©    |
| \\.         | .     |
| \\(         | (     |
| \\)         | )     |
| \\-         | -     |
| <a.*>.*</a> |       |

[[file:~/.config/doom/config.el::;;; ui/ligatures]]

** TODO [#C] Replace Markdown ligatures and syntax hiding with mode-native hiding
:PROPERTIES:
:CUSTOM_ID: emacs-1
:END:
- [[file:~/.config/emacs/.local/straight/repos/markdown-mode/markdown-mode.el::defun markdown-toggle-markup-hiding (&optional arg][(defun markdown-toggle-markup-hiding]]
- [[file:~/.config/emacs/.local/straight/repos/markdown-mode/markdown-mode.el::;;; Markup Hiding =============================================================][;;; Markup Hiding]]

* YAML [1/2]
:PROPERTIES:
:CATEGORY: doom/yaml
:END:
** DONE [#A] Set the YAML LSP server to RedHat's implementation
https://developers.redhat.com/blog/2017/10/18/yaml-language-server-extension-vs-code/

Every time I try to use LSP with ~yamlls~, this is what I get:
: Server yamlls:4133 status:starting exited with status exit. Do you want to restart it? (y or n)

Got it working. See the ~PREREQ~ lines for the =yaml= module in
=$DOOMDIR/init.el=. Could use some cleanup.

** TODO Import the CloudFormation YAML schema
- ~lsp-yaml-schemas~

* Python [1/2]
:PROPERTIES:
:CATEGORY: doom/python
:END:
** DONE [#A] Develop and run a simple "Hello World" program
More than a simple "Hello World":
- [[file:~/src/life/secret-santa/][Secret Santa project]]
- [[file:~/Documents/org/life/notes.org::*Developing with interpreted languages][Notes for developing with interpreted languages]]

** TODO [#B] Set up debugging
* Typescript [0/2]
:PROPERTIES:
:CATEGORY: doom/ts
:END:
** TODO [#A] Develop and run a simple "Hello World" program
** TODO [#B] Set up debugging
Try ~dap-mode~ https://www.youtube.com/watch?v=0bilcQVSlbM

* Miscellany [10/18]
:PROPERTIES:
:CATEGORY: doom/misc
:END:
** DONE [#A] Do not auto-insert pairs of quotes
More than half the time, I do not want that behavior.

** DONE [#A] Find undocumented prerequisites via ~executable-find~ in =config.el= files
Some prerequisites are installed by LSP at run-time, so just use that.

** DONE [#A] Persist ~woman~ and ~man~ buffers even though they are popups
** DONE [#A] Have ^L bring to the top first (like clearing the screen)
This is in my old Emacs config

** KILL [#A] Install a package to assign unique names to buffers based on file path
Not needed.  There's a builtin option.

** DONE [#B] Create a function for describing where all invocations of a key sequence is
*** DONE Check out ~describe-key-briefly~ for how to read keybindings
*** DONE Create the function in =config.el=
#+begin_src emacs-lisp :tangle no
(defun my/alternate-keys (key &optional insert)
  "Print message listing equivalent alternate key sequences for KEY.
KEY is a pair (SEQ . RAW-SEQ) of key sequences, where
RAW-SEQ is the untranslated form of the key sequence SEQ.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.

While reading KEY interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them."
  (interactive
   ;; Ignore mouse movement events because it's too easy to miss the
   ;; message while moving the mouse.
   (list (car (help--read-key-sequence 'no-mouse-movement)) current-prefix-arg))
  (where-is (cadr (help--analyze-key (car key) (cdr key))) insert))
#+end_src

*** DONE Bind the function to the help keymap
**** DONE Check out the FAQ for how to do that
Just use ~map!~. By the way, you need to use =SPC h f map\!= to get help (be
sure to escape the exclamation point).

#+begin_src emacs-lisp :tangle no
;; Custom help keys -- these aren't under `+bindings' because they ought to be
;; universal.
(define-key! help-map
  ;; new keybinds
  "'"    #'describe-char
  "u"    #'doom/help-autodefs
  "E"    #'doom/sandbox
  "M"    #'doom/describe-active-minor-mode
  "O"    #'+lookup/online
  "T"    #'doom/toggle-profiler
  "V"    #'set-variable
  "W"    #'+default/man-or-woman
  "C-k"  #'describe-key-briefly
  "C-l"  #'describe-language-environment
  "C-m"  #'info-emacs-manual

  ;; Unbind `help-for-help'. Conflicts with which-key's help command for the
  ;; <leader> h prefix. It's already on ? and F1 anyway.
  "C-h"  nil

  ;; replacement keybinds
  ;; replaces `info-emacs-manual' b/c it's on C-m now
  "r"    nil
  "rr"   #'doom/reload
  "rt"   #'doom/reload-theme
  "rp"   #'doom/reload-packages
  "rf"   #'doom/reload-font
  "re"   #'doom/reload-env

  ;; make `describe-bindings' available under the b prefix which it previously
  ;; occupied. Add more binding related commands under that prefix as well
  "b"    nil
  "bb"   #'describe-bindings
  "bi"   #'which-key-show-minor-mode-keymap
  "bm"   #'which-key-show-major-mode
  "bt"   #'which-key-show-top-level
  "bf"   #'which-key-show-full-keymap
  "bk"   #'which-key-show-keymap

  ;; replaces `apropos-documentation' b/c `apropos' covers this
  "d"    nil
  "db"   #'doom/report-bug
  "dc"   #'doom/goto-private-config-file
  "dC"   #'doom/goto-private-init-file
  "dd"   #'doom-debug-mode
  "df"   #'doom/help-faq
  "dh"   #'doom/help
  "dl"   #'doom/help-search-load-path
  "dL"   #'doom/help-search-loaded-files
  "dm"   #'doom/help-modules
  "dn"   #'doom/help-news
  "dN"   #'doom/help-search-news
  "dpc"  #'doom/help-package-config
  "dpd"  #'doom/goto-private-packages-file
  "dph"  #'doom/help-package-homepage
  "dpp"  #'doom/help-packages
  "ds"   #'doom/help-search-headings
  "dS"   #'doom/help-search
  "dt"   #'doom/toggle-profiler
  "du"   #'doom/help-autodefs
  "dv"   #'doom/version
  "dx"   #'doom/sandbox

  ;; replaces `apropos-command'
  "a"    #'apropos
  "A"    #'apropos-documentation
  ;; replaces `describe-copying' b/c not useful
  "C-c"  #'describe-coding-system
  ;; replaces `Info-got-emacs-command-node' b/c redundant w/ `Info-goto-node'
  "F"    #'describe-face
  ;; replaces `view-hello-file' b/c annoying
  "h"    nil
  ;; replaces `view-emacs-news' b/c it's on C-n too
  "n"    #'doom/help-news
  ;; replaces `help-with-tutorial', b/c it's less useful than `load-theme'
  "t"    #'load-theme
  ;; replaces `finder-by-keyword' b/c not useful
  "p"    #'doom/help-packages
  ;; replaces `describe-package' b/c redundant w/ `doom/help-packages'
  "P"    #'find-library)
#+end_src

** TODO [#B] Make a toggle for ~auto-fill-mode~
** TODO [#B] Fix spelling correction
~+spell/correct~ (=z ==) spits the following error:
#+begin_quote
Starting new Ispell process aspell with english dictionary...done
ispell-init-process: Error: /Users/eeowaa/.config/emacs/.local/etc/ispell/english.pws: The language "english" is not known. This is probably because: the file "/usr/local/Cellar/aspell/0.60.8/lib/aspell-0.60/english.dat" can not be opened for reading.
#+end_quote

** TODO [#B] Always trust file-location and directory-local variables
At least for all files in allowed paths (e.g. my source code).

** TODO [#C] Remove =~/.emacs/local= subdirectories from known projects
#+begin_src elisp
(after! projectile
  (dolist (f (directory-files (format "%s/.local/straight/repos" doom-emacs-dir)))
    (when (and (file-directory-p f) (not (member f '("." ".."))))
      (push (abbreviate-file-name f) projectile-globally-ignored-directories))))
#+end_src

** TODO [#C] Figure out how to use ~projectile-edit-dir-locals~ (=SPC p e=)
https://www.emacswiki.org/emacs/SkeletonMode

** TODO [#C] Create custom module =:ui page-break-lines=
Although I already have the =page-break-lines= package installed in
=$DOOMDIR/packages.el= and ~global-page-break-lines-mode~ enabled in
=$DOOMDIR/config.el=, I could write a custom module to do this, placing it under
=$DOOMDIR/modules/ui/page-break-lines=. (See the documentation for
~doom-modules-dirs~.)  This would be an easy introduction to writing modules.

It would be nice to include a ~CUSTOM~ comment tag over the module declaration
in the ~doom!~ block of =$DOOMDIR/init.el= just to remember that /I/ defined the
module.

** TODO [#C] Replace =C-?= with backspace
We already have =C-r=, so might as well replace this mostly-useless keybinding.

** HOLD [#C] Add dictionary and thesaurus backends for =SPC s t/T=
I've done everything that the Doom documentation told me to do, but things
aren't working very well. Just try it out for yourself and see. Might want to
open a PR or two.

** DONE [#C] Enable all disabled commands disabled by Emacs and Doom Emacs
** DONE [#C] Enable emojis (just for =SPC i e=)
** DONE [#C] Configure =counsel-spotify= in local config file
** KILL [#C] Replace npm symbol in Treemacs with something better
Currently, it is an image with a white background (at least in the ~dracula~
theme -- maybe it's different with themes with jet black backgrounds)

After upgrading Doom Emacs, I don't see the problem anymore.
