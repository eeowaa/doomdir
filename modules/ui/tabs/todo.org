#+title: Tabs

* TODO Make windows behave more like ~tmux~ panes
I would like for Emacs to obey the following precepts:

1. *Always* open buffers in the [[help:selected-window][selected-window]] (i.e. current window).
2. *Never* create, split, resize, move, or select windows automatically.

Override mechanisms should be in place for both precepts, but the ultimate goal
is that I never want to be surprised by the window layout. The [[info:elisp#Windows][windows section]]
in the elisp manual should contain information on how to implement all of this.

* TODO Implement overarching ~tmux~-like behavior
Additionally, I would like to implement the following behaviors:

1. Do not allow splits when the current window is maximized.
   - On second thought, this behavior could actually be pretty annoying.
   - It is not so annoying with ~tmux~ for a couple of reasons:
     * I can still perform ~vim~ window splits in a maximized pane.
     * I can move panes to a new ~tmux~ window and split from there.
   - Maybe a good middle ground would be to allow window splits in a maximized
     window, but to restore the previous window state (layout and buffers) when
     undoing maximization. Splits in the maximized window would be discarded.
     * This could be achieved by saving the window state when maximizing.
     * A stack data structure could be used for undoing maximization of a split
       window within an already-maximized window.

2. Enable persistent display of "status line" across the entire frame.
   - Could use [[help:tab-bar-mode][tab-bar-mode]]. See also: [[info:emacs#Tab Bars][emacs#Tab Bars]].
     * Should integrate with Doom workspaces.
       + Doom configures =persp-mode= in a handy way that I don't want to
         reimplement (I've struggled with this in the past with vanilla Emacs).
       + I would like to keep the order of workspaces and the order of tabs in
         sync with each other.
       + Could potentially propose a reimplementation of the =:ui tabs= module
         to use builtin tabs by default, with a new =+centaur= module flag to
         keep the current behavior.
   - The status line would display arbitrary global information.
     * Could use [[help:tab-bar-format][tab-bar-format]] to specify what to display and how.
     * Do not want to clutter the modeline with global information.
       + Horizontal screen real estate is limited in the modeline, especially
         when the window is split to take up a fraction of the frame width.
     * Information should include:
       + [-] Doom "workspaces"
         - Could use [[help:tab-bar-tab-name-format-function][tab-bar-tab-name-format-function]].
         - I find it incredibly annoying to always have to press =SPC TAB TAB= in
           order to view my workspaces.
         - When juggling a lot of tasks, the constant display of ~tmux~ windows
           reminds me of the various contexts that I'm working with.
       + [ ] Dynamic data
         - [ ] Current date and time
         - [ ] Battery indicator
         - [ ] System load averages
         - [ ] Alerts from the OS and Emacs modes
   - Sometimes it would nice to hide the "status line", so the ability to toggle
     its display would be nice. This is what ~tmux~ does.
     * Could use [[help:toggle-frame-tab-bar][toggle-frame-tab-bar]].

3. Allow tabs within a given window, just like ~tmux~ panes displaying ~vim~ or
   nested ~tmux~ sessions.
   - Could use [[help:tab-line-mode][tab-line-mode]].
   - Would like to limit the available buffers when opening new tabs.
     * Could use =persp-mode=.
     * Could use the [[info:elisp#Window History][window history]].
       + Could reimplement the ~:ls~ evil-ex command to use window history, as
         well. This would be closer to a vim/tmux workflow.

=tab-line= uses [[info:elisp#Window History][Window History]] to display buffers. You can manipulate the window
history in order to "move" tabs; you can probably use your abstraction of
"buffer groups" to move whole sets of tabs between popup windows.
