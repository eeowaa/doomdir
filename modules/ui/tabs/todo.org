#+title: Tabs

* Internals [1/3]
** DONE Create a =vimish-tab= global minor mode
Sort of like ~global-tab-line-mode~.

** TODO Create a =vimish-tab-evil= library
Migrate evil bindings from Doom module config. Refer to =treemacs-evil=,
=kubernetes-evil=, and =kubel-evil= for how to do this.

** TODO Add a keymap for non-=evil= users
* Bugs [0/5]
** HOLD Integrate =vimish-tab= with =winner=
I do not have steps to replicate this at the moment.

** TODO Integrate =vimish-tab= with =persp=
Should ensure a package-agnostic mechanism so that =tab-bar= users not using
=persp= can still benefit.

** TODO Integrate =vimish-tab= with =better-jumper=
Currently, the jump history is recorded per window, which can cause some
unexpected behavior when using multiple tabs in the same window. Consider adding
another parameter to each tab to track the jump list.

** TODO Preserve buffer position in window tabs
- _Steps to replicate:_
  1. Open a buffer in a window tab
  2. Open the same buffer in a new tab in the same window
  3. Move point in the new tab
  4. Select the previous tab

- _Expected behavior:_ \\
  The point and buffer position should be as I left them

- _Actual behavior:_ \\
  The point and buffer position were updated to match the new tab

Note that this is not a problem when a buffer is displayed in multiple live
windows (point and buffer position are independent between windows). Are window
parameters used to achieve this?

** TODO Fix bugs in tab caching
The ~tab-line-format~ function manages a ~tab-line-cache~ window parameter that
is used in displaying tab names as well as keeping track of buffers within tabs.
This mechanism does not always work correctly.

- _Steps to replicate:_
  1. Use =:Tex= to open a new dired tab
  2. Use =-= to navigate up a directory
  3. Use =gT= to navigate to the previous tab

- _Expected behavior:_ \\
  The name of the new dired tab is that of the directory that I navigated up to.
  Switching between tabs does not affect tab names or buffer content.

- _Actual behavior:_ \\
  The name of the new dired tab goes back to the original directory. Switching
  back to the dired tab from the original tab takes me to the original
  directory.

  If I use =-= to navigate up a directory again, then switch to the original
  tab, the new dired tab shows the parent directory as the name. Switching back
  to the dired tab takes me to the parent directory. At this point, switching
  back and forth between tabs works as expected.

It seems to me that ~tab-line-format~ is only ever called when the mode line is
updated. Actually, all that ~tab-line-mode~ does is set the buffer-local
~tab-line-format~ variable to ~(:eval (tab-line-format))~, which is supposed to
handle the rest. That's a lot hinging on proper mode line updates!

* Features [0/9]
** TODO Show a line beneath the tab bar just like in modus-operandi theme
Can do this in private config for now, but this is useful enough to warrant
inclusion in the Doom module.

** TODO Bind =C-w C= (capital "C") to ~vimish-tab-close-window-function~
Users should have a mechanism to close windows at will, even when there is more
than one tab in that window.

** TODO Add =C-w gf= and =C-w gF= bindings for =ffap= behavior
** TODO Implement standard Vim behavior for =gt=
A numeric prefix argument should give the tab number, not how many times to
repeat the command (like how =gT= works). There should be a user option to
override this behavior if desired.

** TODO Implement a mechanism to go to the last access tab page
Only need to keep track of the last-accessed tab, not the entire history of
which tabs were last accessed in a window.

- Implement as a tab alist entry if it helps with fontification
- Otherwise, just implement as a window parameter (start with this)

Vim has a command to jump to the previous tab, which is mapped to =g TAB=, =C-w
g TAB=, and =C-TAB=. Doom Emacs already has =C-TAB= mapped, so I would just like
to map this to the first two in my personal config.

** TODO Add an option to configure where new tabs are inserted
Refer to the option ~tab-bar-new-tab-to~ option for =tab-bar=.

** TODO Add an option to configure which tab gets selected after closing
Refer to the option ~tab-bar-close-tab-select~ option for =tab-bar=. Default to
~right~ to emulate Vim.

** TODO Add support for splits within tabs using atomic windows
For a true vim/tmux-like workflow, each vimish-tab should allow the window they
describe to be split, yet still be tracked within that tab.

- This should be possible via Emacs' atomic windows.
- The tab bar should always appear above the topmost live window.
- A mode-line indicator can be used to help identify live windows belonging to
  an atomic window. (Maybe there is already such a feature or package?)

** TODO Provide full Vim emulation for ~count~ arguments in =evil-ex= commands
Some tab commands in Vim have ~count~ arguments that accept both numbers and
symbols. For example, the ~:tabnext~ command accepts ~+N~ and ~-N~ arguments
with ~N~ defaulting to 1, so a plus or minus sign can be provided on its own;
also, ~$~ symbolizes the index of the rightmost tab, and ~#~ symbolizes the
index of the last-accessed tab.

In order to implement such behavior, =vimish-tab= should define a new
interactive code via ~evil-define-interactive-code~; refer to the =evil-types=
library for how to do this.

* Uncategorized [0/2]
** TODO Make windows behave more like ~tmux~ panes
I would like for Emacs to obey the following precepts:

1. *Always* open buffers in the [[help:selected-window][selected-window]] (i.e. current window).
2. *Never* create, split, resize, move, or select windows automatically.

Override mechanisms should be in place for both precepts, but the ultimate goal
is that I never want to be surprised by the window layout. The [[info:elisp#Windows][windows section]]
in the elisp manual should contain information on how to implement all of this.

** TODO Implement overarching ~tmux~-like behavior
Additionally, I would like to implement the following behaviors:

1. Do not allow splits when the current window is maximized.
   - On second thought, this behavior could actually be pretty annoying.
   - It is not so annoying with ~tmux~ for a couple of reasons:
     * I can still perform ~vim~ window splits in a maximized pane.
     * I can move panes to a new ~tmux~ window and split from there.
   - Maybe a good middle ground would be to allow window splits in a maximized
     window, but to restore the previous window state (layout and buffers) when
     undoing maximization. Splits in the maximized window would be discarded.
     * This could be achieved by saving the window state when maximizing.
     * A stack data structure could be used for undoing maximization of a split
       window within an already-maximized window.

2. Enable persistent display of "status line" across the entire frame.
   - [-] Could use [[help:tab-bar-mode][tab-bar-mode]]. See also: [[info:emacs#Tab Bars][emacs#Tab Bars]].
     * [X] Should integrate with Doom workspaces.
       + [X] Doom configures =persp-mode= in a handy way that I don't want to
         reimplement (I've struggled with this in the past with vanilla Emacs).
       + [X] I would like to keep the order of workspaces and the order of tabs
         in sync with each other.
       + [ ] Could potentially propose a reimplementation of the =:ui tabs=
         module to use builtin tabs by default, with a new =+centaur= module
         flag to keep the current behavior.
   - [ ] The status line would display arbitrary global information.
     * [X] Could use [[help:tab-bar-format][tab-bar-format]] to specify what to display and how.
     * Do not want to clutter the modeline with global information.
       + Horizontal screen real estate is limited in the modeline, especially
         when the window is split to take up a fraction of the frame width.
     * Information should include:
       + [X] Doom "workspaces"
         - Could use [[help:tab-bar-tab-name-format-function][tab-bar-tab-name-format-function]].
         - I find it incredibly annoying to always have to press =SPC TAB TAB= in
           order to view my workspaces.
         - When juggling a lot of tasks, the constant display of ~tmux~ windows
           reminds me of the various contexts that I'm working with.
       + [-] Dynamic data
         - [X] Current date and time
         - [X] Battery indicator
         - [X] System load averages
         - [ ] Alerts from the OS and Emacs modes
   - Sometimes it would nice to hide the "status line", so the ability to toggle
     its display would be nice. This is what ~tmux~ does.
     * Could use [[help:toggle-frame-tab-bar][toggle-frame-tab-bar]].

3. Allow tabs within a given window, just like ~tmux~ panes displaying ~vim~ or
   nested ~tmux~ sessions.
   - [X] Could use [[help:tab-line-mode][tab-line-mode]].
   - [X] Would like to limit the available buffers when opening new tabs.
     * [X] Could use =persp-mode=.
     * Could use the [[info:elisp#Window History][window history]].
       + Could reimplement the ~:ls~ evil-ex command to use window history, as
         well. This would be closer to a vim/tmux workflow.

=tab-line= uses [[info:elisp#Window History][Window History]] to display buffers. You can manipulate the window
history in order to "move" tabs; you can probably use your abstraction of
"buffer groups" to move whole sets of tabs between popup windows.
