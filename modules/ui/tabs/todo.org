#+title: Tabs

* Internals [1/3]
** DONE Create a =vimish-tab= global minor mode
Sort of like ~global-tab-line-mode~.

** TODO Create a =vimish-tab-evil= library
Migrate evil bindings from Doom module config. Refer to =treemacs-evil=,
=kubernetes-evil=, and =kubel-evil= for how to do this.

** TODO Add a keymap for non-=evil= users
* Bugs [2/9]
** DONE Display window tabs when point is in an EIN notebook cell
=tab-line= disables ~tab-line-mode~ for buffers whose name begins with a space.
When ~pm-hide-implementation-buffers~ is enabled, =polymode= (used by =poly-ein=
in order to create =ein= notebooks displaying interleaved buffers) prepends a
space to all notebook cell buffer names. Moving point to a cell will display the
buffer name corresponding to point.

*UPDATE*: Disabling ~pm-hide-implementation-buffers~ fixes the buffer names, but
~vimish-tab-mode~ still does not get enabled in these notebook cells for some
reason, despite all the conditions in ~vimish-tab-mode--turn-on~ being met and
~vimish-tab-show-p~ returning ~t~. My guess is that there is some issue with how
global minor modes operate on =polymode= implementation buffers. I fixed this in
the ~use-package~ form for =vimish-tab=

** DONE Fix confusion after LSP documentation popup
When =company-box= displays a documentation childframe in
~lsp-completion-mode~, selecting a different tab in the current window causes
the previously-selected tab (the one where =company= completion was invoked) to
display ~*lsp-documentation*~, created by ~lsp-doc-buffer~.

*UPDATE*: The issue was that ~vimish-tab--update~ triggered on
~buffer-list-update-hook~, which gets run when ~get-buffer-create~ is called
with an unset ~inhibit-buffer-hooks~ argument; ~lsp-doc-buffer~ makes such a
function call when creating or obtaining the ~*lsp-documentation*~ buffer. (Of
course, this happens in many elisp packages.) I fixed this by refactoring
=vimish-tab= to use the ~window-buffer-change-functions~ hook instead of
~buffer-list-update-hook~.

** LOOP Fix bugs in tab caching
:LOGBOOK:
- Note taken on [2023-02-02 Thu 17:44] \\
  Recent bug fixes might have resolved this issue, as I can no longer replicate it.
:END:
The ~tab-line-format~ function manages a ~tab-line-cache~ window parameter that
is used in displaying tab names as well as keeping track of buffers within tabs.
This mechanism does not always work correctly.

- _Steps to replicate:_
  1. Use =:Tex= to open a new dired tab
  2. Use =-= to navigate up a directory
  3. Use =gT= to navigate to the previous tab

- _Expected behavior:_ \\
  The name of the new dired tab is that of the directory that I navigated up to.
  Switching between tabs does not affect tab names or buffer content.

- _Actual behavior:_ \\
  The name of the new dired tab goes back to the original directory. Switching
  back to the dired tab from the original tab takes me to the original
  directory.

  If I use =-= to navigate up a directory again, then switch to the original
  tab, the new dired tab shows the parent directory as the name. Switching back
  to the dired tab takes me to the parent directory. At this point, switching
  back and forth between tabs works as expected.

It seems to me that ~tab-line-format~ is only ever called when the mode line is
updated. Actually, all that ~tab-line-mode~ does is set the buffer-local
~tab-line-format~ variable to ~(:eval (tab-line-format))~, which is supposed to
handle the rest. That's a lot hinging on proper mode line updates!

** TODO Integrate =vimish-tab= with =winner=
After ~winner-undo~, the tab state does not get updated appropriately. To
replicate, perform the following steps (*[LOG]* means to run ~vimish-tab-list~
and ~vimish-tab-index~ to log the state to the ~*Messages*~ buffer):

1. Open a new window
2. Open a new tab in that window (at the end of the tab list); *[LOG]*
3. Close the new tab; *[LOG]*
4. Run ~winner-undo~ in the new window; *[LOG]*

After all of these steps, both of the tabs have a ~(selected . t)~ member in
their respective ~vimish-tab-parameters~ structure. Could it be that
~vimish-tab--update~ is conflicting with how =ace-window= restores window
parameters, specifically the ~vimish-tab-list~ window parameter?

** TODO Integrate =vimish-tab= with =persp=
Currently, if a window is reused between perspectives, the =vimish-tabs= do not
get saved and restored properly when switching between perspectives. The manual
workaround I've been employing is as follows:

1. After opening a new perspective (Doom workspace), create a new window split.
2. Switch to the new window split.
3. Run ~delete-other-windows~ (bound to =C-x 1= and =C-w C-o=).
4. Use the perspective like you normally would.

This works reasonably well, although it isn't 100% reliable. After using the new
perspective for a while, I sometimes notice =vimish-tab= state being shared
between windows in different perspectives. My guess as to why this happens is
that I eventually delete the window that I created using my manual workaround,
and the [[info:elisp#Windows and Frames][window tree]] rearranges itself in such a way that windows become shared
again between perspectives.

I think there are two approaches to fix this issue:

1. Automate my manual workaround, including additional steps to improve
   reliability (see above paragraph).
2. Figure out /how/ =persp-mode= actually saves and restores window
   configurations, and work with that. Some functions to look at (all taking a
   frame as their first argument):
   - ~persp-activate~
     - ~persp--deactivate~
       - ~persp-before-deactivate-functions~ (hook)
       - ~persp-frame-save-state~
     - ~persp-restore-window-window-conf~
     - ~persp-activate-functions~ (hook)

Ideally, I would use a package-agnostic mechanism so that =tab-bar= users not
using =persp-mode= can still benefit.

** TODO Integrate =vimish-tab= with =better-jumper=
Currently, the jump history is recorded per window, which can cause some
unexpected behavior when using multiple tabs in the same window. Consider adding
another parameter to each tab to track the jump list.

** TODO Preserve buffer position in window tabs
- _Steps to replicate:_
  1. Open a buffer in a window tab
  2. Open the same buffer in a new tab in the same window
  3. Move point in the new tab
  4. Select the previous tab

- _Expected behavior:_ \\
  The point and buffer position should be as I left them

- _Actual behavior:_ \\
  The point and buffer position were updated to match the new tab

Note that this is not a problem when a buffer is displayed in multiple live
windows (point and buffer position are independent between windows). Are window
parameters used to achieve this?

** TODO Fix alignment of tab-bar status in TTY Emacs
The status is not right-aligned in TTY Emacs, so I currently have it disabled in
that operating mode. In my case, I can just rely on the tmux status bar for the
time and battery status, as I nearly always run interactive sessions in tmux.

* Features [2/15]
** DONE Bind =C-w C= (capital "C") to ~vimish-tab-close-window-function~
Users should have a mechanism to close windows at will, even when there is more
than one tab in that window.

** DONE Add =C-w gf= and =C-w gF= bindings for =ffap= behavior
** TODO Create ~display-buffer~ functions for opening buffers in =vimish-tab= tabs
Could have at least two different functions:

1. Open the buffer in a new tab of the current window.
2. If the buffer is assigned to a tab of a live window, display the buffer in
   that tab (make that tab current). At least two ambiguities could arise:
   - When multiple live windows have a tab for the buffer.
   - When a live window has multiple tabs for the buffer.

** TODO Add =ace-window= command to =treemacs= to open a file in a new window tab
This will require a new ~display-buffer~ function (see the previous item).

** TODO Add =ace-window= command to "move" the selected tab to another window
The implementation of this would probably be similar to that of the previous
item (might be able to share an underlying function).

** TODO Implement a command to select a tab in the current window using ~completing-read~
To account for cases where there are multiple tabs displaying the same buffer, I
should prepend the tab index to the buffer name. It would also be nice to show a
prevent of the buffer as part of the selection process.

** TODO Implement a command to select a tab in the current frame using ~completing-read~
This would be similar to the command for selecting a tab in the current window,
except it would also prepend the window number.

** TODO Implement a mechanism to dedicate a window to its current tabs
Essentially, I want a mechanism similar to [[info:elisp#Dedicated Windows][dedicated windows]] (although perhaps
implemented through other [[info:elisp#Window Parameters][window parameters]]) such that ~display-buffer~ will not
allow any buffers to be displayed in a specific window except for the buffers
currently assigned to one of its window tabs.

I would like to wrap this in a toggle function that I can then incorporate into
my private ~my/toggle-window-dedicated~ command (if ~vimish-tab-mode~ is
enabled, call the toggle function provided by =vimish-tab=, otherwise toggle
standard window dedication).

** TODO Show a line beneath the tab bar just like in modus-operandi theme
Can do this in private config for now, but this is useful enough to warrant
inclusion in the Doom module.

*UPDATES*:

- The modus themes achieve this by setting the ~box~ attribute for the ~tab-bar~
  face. In effect, a border appears around the /entire/ tab bar, but you can't
  really see the border on the sides or top due to contrast ratios of the modus
  themes. Unfortunately, this does not look good with other themes.

- In a response to [[https://www.reddit.com/r/emacs/comments/o2rmo4/how_to_add_border_between_tabbar_and_window/][this Reddit post]], one user reported that the ~tab-bar-border~
  variable didn't work for them (it doesn't seem to work for me, either).
  However, they found success by setting the ~internal-border-width~ frame
  parameter to 1

  #+begin_src emacs-lisp :tangle no
  (setq tab-bar-border 'internal-border-width)
  (set-frame-parameter nil 'internal-border-width 1)
  (custom-set-faces!
    '(border :inherit window-divider)
    '(internal-border :inherit window-divider))
  #+end_src

- For consistency, the ~window-divider~ (?) face should be inherited by whatever
  face is used to separate the tab bar from the rest of the frame.

** TODO Implement standard Vim behavior for =gt=
A numeric prefix argument should give the tab number, not how many times to
repeat the command (like how =gT= works). There should be a user option to
override this behavior if desired.

** TODO Implement a mechanism to go to the last accessed tab page
Only need to keep track of the last-accessed tab, not the entire history of
which tabs were last accessed in a window.

- Implement as a tab alist entry if it helps with fontification
- Otherwise, just implement as a window parameter (start with this)

Vim has a command to jump to the previous tab, which is mapped to =g TAB=, =C-w
g TAB=, and =C-TAB=. Doom Emacs already has =C-TAB= mapped, so I would just like
to map this to the first two in my personal config.

** TODO Add an option to configure where new tabs are inserted
Refer to the option ~tab-bar-new-tab-to~ option for =tab-bar=.

** TODO Add an option to configure which tab gets selected after closing
Refer to the option ~tab-bar-close-tab-select~ option for =tab-bar=. Default to
~right~ to emulate Vim.

** TODO Add support for splits within tabs using atomic windows
For a true vim/tmux-like workflow, each vimish-tab should allow the window they
describe to be split, yet still be tracked within that tab.

- This should be possible via Emacs' atomic windows.
- The tab line should always appear above the topmost live window.
- A mode-line indicator can be used to help identify live windows belonging to
  an atomic window. (Maybe there is already such a feature or package?)
  - Alternatively, the mode-line can be shared between all windows in the atomic
    window group, appearing at the bottom of the parent window. This could be
    more difficult to achieve, because we can't rely on there being a window at
    the bottom of the window group that spans the full horizontal width of the
    parent window. The mode-line would need to somehow be independent of any
    "live" window; it would be attached to and appear at the bottom of the
    "internal" (and "valid") parent window. An option should be exposed to allow
    users to choose between mechanisms.

** TODO Provide full Vim emulation for ~count~ arguments in =evil-ex= commands
Some tab commands in Vim have ~count~ arguments that accept both numbers and
symbols. For example, the ~:tabnext~ command accepts ~+N~ and ~-N~ arguments
with ~N~ defaulting to 1, so a plus or minus sign can be provided on its own;
also, ~$~ symbolizes the index of the rightmost tab, and ~#~ symbolizes the
index of the last-accessed tab.

In order to implement such behavior, =vimish-tab= should define a new
interactive code via ~evil-define-interactive-code~; refer to the =evil-types=
library for how to do this.

* Uncategorized [0/2]
** TODO Make windows behave more like ~tmux~ panes
I would like for Emacs to obey the following precepts:

1. *Always* open buffers in the [[help:selected-window][selected-window]] (i.e. current window).
2. *Never* create, split, resize, move, or select windows automatically.

Override mechanisms should be in place for both precepts, but the ultimate goal
is that I never want to be surprised by the window layout. The [[info:elisp#Windows][windows section]]
in the elisp manual should contain information on how to implement all of this.

** TODO Implement overarching ~tmux~-like behavior
Additionally, I would like to implement the following behaviors:

1. Do not allow splits when the current window is maximized.
   - On second thought, this behavior could actually be pretty annoying.
   - It is not so annoying with ~tmux~ for a couple of reasons:
     * I can still perform ~vim~ window splits in a maximized pane.
     * I can move panes to a new ~tmux~ window and split from there.
   - Maybe a good middle ground would be to allow window splits in a maximized
     window, but to restore the previous window state (layout and buffers) when
     undoing maximization. Splits in the maximized window would be discarded.
     * This could be achieved by saving the window state when maximizing.
     * A stack data structure could be used for undoing maximization of a split
       window within an already-maximized window.

2. Enable persistent display of "status line" across the entire frame.
   - [-] Could use [[help:tab-bar-mode][tab-bar-mode]]. See also: [[info:emacs#Tab Bars][emacs#Tab Bars]].
     * [X] Should integrate with Doom workspaces.
       + [X] Doom configures =persp-mode= in a handy way that I don't want to
         reimplement (I've struggled with this in the past with vanilla Emacs).
       + [X] I would like to keep the order of workspaces and the order of tabs
         in sync with each other.
       + [ ] Could potentially propose a reimplementation of the =:ui tabs=
         module to use builtin tabs by default, with a new =+centaur= module
         flag to keep the current behavior.
   - [ ] The status line would display arbitrary global information.
     * [X] Could use [[help:tab-bar-format][tab-bar-format]] to specify what to display and how.
     * Do not want to clutter the modeline with global information.
       + Horizontal screen real estate is limited in the modeline, especially
         when the window is split to take up a fraction of the frame width.
     * Information should include:
       + [X] Doom "workspaces"
         - Could use [[help:tab-bar-tab-name-format-function][tab-bar-tab-name-format-function]].
         - I find it incredibly annoying to always have to press =SPC TAB TAB= in
           order to view my workspaces.
         - When juggling a lot of tasks, the constant display of ~tmux~ windows
           reminds me of the various contexts that I'm working with.
       + [-] Dynamic data
         - [X] Current date and time
         - [X] Battery indicator
         - [X] System load averages
         - [ ] Alerts from the OS and Emacs modes
   - Sometimes it would nice to hide the "status line", so the ability to toggle
     its display would be nice. This is what ~tmux~ does.
     * Could use [[help:toggle-frame-tab-bar][toggle-frame-tab-bar]].

3. Allow tabs within a given window, just like ~tmux~ panes displaying ~vim~ or
   nested ~tmux~ sessions.
   - [X] Could use [[help:tab-line-mode][tab-line-mode]].
   - [X] Would like to limit the available buffers when opening new tabs.
     * [X] Could use =persp-mode=.
     * Could use the [[info:elisp#Window History][window history]].
       + Could reimplement the ~:ls~ evil-ex command to use window history, as
         well. This would be closer to a vim/tmux workflow.

=tab-line= uses [[info:elisp#Window History][Window History]] to display buffers. You can manipulate the window
history in order to "move" tabs; you can probably use your abstraction of
"buffer groups" to move whole sets of tabs between popup windows.
