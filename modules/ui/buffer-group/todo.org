#+title: Buffer-Group

* Internals [0/7]
** TODO Split =buffer-group.el= into multiple files
One file for buffer groups, another file for display rules. Should also include
a file explaining how to use the package.

** TODO Make ~buffer-group-define~ and ~buffer-group-property-pushnew~ variadic
** TODO Refactor ~buffer-group-define~ to remove argument quoting
Such syntactic sugar is conventional for this kind of macro.

** TODO Create a macro that wraps ~buffer-group-define~ and ~buffer-group-property-pushnew~
This macro should define a buffer group if one does not exist, otherwise it
should modify an existing buffer group. This should allow for easier
configuration.

** TODO Add ~defcustom~ setter for buffer group definitions
The setter should be a function that can be called directly by users if they
prefer that over the =customize= machinery. Being able to automatically run code
when a buffer group definition has been modified would be helpful in updating
other packages (e.g. =vimish-tab=) that utilizes buffer groups.

** TODO Refactor the buffer group property system
- Create abstraction for pluggable properties
- Distinguish between properties that help define a buffer group and properties
  that are used to describe the behavior of buffer groups; might want to
  separate into different data structures

** TODO Create a function to toggle debugging functionality
This could help with package development, but more importantly, it can help
users diagnose issues and would make the package easier to support. Some initial
ideas for debugging functionality:

- Trace calls to ~display-buffer~
- Trace calls to the [[info:elisp#Buffer Display Action Functions][well-known buffer display action functions]]
- Watch changes to ~display-buffer-alist~
- Watch changes to [[info:elisp#Choosing Window Options][common user options for displaying buffers]]

* Bugs [0/1]
** TODO Prevent other buffers from appearing in side window slots
Refer to ~+popup/quit-window~ for inspiration.

*UPDATE*: After running ~quit-window~ once in a window (for example, =q= in a
=helpful= buffer), the ~quit-restore~ window parameter gets set to ~nil~. Unless
you visit another buffer in that window, running ~quit-window~ a second time
will delete the window. See the [[info:elisp#Quitting Windows][Quitting Windows]] documentation for more info.

* Features [0/4]
** TODO Introduce a mechanism to display a side window across all slots
Sometimes, a side window should always span the entire length of its side.
Perhaps there is an existing ~display-buffer~ action alist entry or window
parameter that can help with this. If not, you can implement a custom
~display-buffer~ function with a custom parameter. See =:ui popup= for
reference.

** TODO Interactive functions to add and remove conditions to buffer groups
I would like to make ~buffer-group-property-pushnew~ interactive and allow the
user to select a regexp (defaulting to the current buffer's name) and/or a major
mode (defaulting to the current buffer's major mode) to add as a condition to an
existing buffer group. I would also like to allow interactive selection of a
buffer group.

Beyond that, I would like to create a new function named
~buffer-group-property-remove~ and allow interactive selection of the buffer
group and condition(s).

** TODO Interactive ~display-buffer-alist~ setup for buffer groups
I would like to create a function that allows users to interactively select a
buffer group and a corresponding ~display-buffer-alist~ action for that buffer
group. Before that can happen, I'll need to lay some groundwork for the creation
and management of such actions. Perhaps another alist?

** TODO Implement optional =window-purpose=-like functionality
A window could be dedicated to a specific buffer group or collection of buffer
groups. Consult the [[info:elisp#Dedicated Windows][Dedicated Windows]] documentation for ideas on how to
accomplish this via a custom value supplied to the ~dedicated~ window parameter.

This could be configurable during buffer-group definition, although I think it
would be best as a dynamic option. For example, a user could run a command to
dedicate the selected window to the buffer group of the current buffer. If using
=vimish-tab= (or vanilla =tab-line=), all tabs containing buffers *not* in that
buffer group get removed from the window; no buffers besides those in the
specified buffer group(s) can be displayed in that window after that.

One example where this functionality would be useful is for W3M. Each web page
could have its own tab and exist in that window.

* Configuration [2/6]
** DONE Define buffer groups in =config.el=
** DONE Add =+hacks.el= file
** TODO Create display rules for temporary =org= buffers
I would like for most (if not all) temporary =org= buffers to appear in a
bottom-right side window.

1. Search =org= sources for a known buffer name string
2. Identify the function or macro used to create =org= buffers
3. Search for the elisp form identified in the previous step
4. Create a buffer group for all buffer name strings passed to this form

** TODO Define display rules when =+defaults= is given
** TODO Add =+all= flag to set ~switch-to-buffer-obey-display-actions~
** TODO Create a Doom "autodef" for configuring buffer groups
*NOTE*: I should probably implement variadic forms of ~buffer-group-define~ and
~buffer-group-property-pushnew~ before pursuing this todo item.

Similar to ~set-popup-rule!~ and ~set-popup-rules!~, there should be an autodef
for configuring buffer groups. This would replace forms like this:

#+begin_src emacs-lisp
(when (modulep! :ui buffer-group)
  (buffer-group-reuse-window-setup
   (buffer-group-define tfstate
     `(:names ("^\\*tfstate: ")))))
#+end_src

...with forms like this:

#+begin_src emacs-lisp
(set-buffer-group! tfstate
  :names "^\\*tfstate: "
  :setup #'buffer-group-reuse-window-setup)
#+end_src

The exact syntax of the replacement form is TBD. Doom's =docs/contributing.org=
has the following to say about autodefs:

#+begin_quote
+ ~abc!~ :: A public Doom "autodef" function or macro. An autodef should always
  be defined, even if its containing module is disabled (i.e. they will not
  throw a void-function error). The purpose of this is to avoid peppering module
  configs with conditionals or `after!` blocks before using their APIs. They
  should noop if their module is disabled, and should be zero-cost in the case
  their module is disabled.

  Autodefs usually serve to configure Doom or a module. e.g. ~after!~,
  ~set-company-backends!~, ~set-evil-initial-state!~
#+end_quote

See also: ~doom/help-autodefs~ (=SPC h u=).

* Documentation [0/5]
** TODO Buffer name regexps vs. major modes
Sometimes buffers are displayed before the major mode is set. In these cases,
major modes in buffer group definitions will not be checked in order to
determine where to display the buffer. Therefore, it is good to define buffer
groups based on buffer name regexps as well as major modes. I have not found
another workaround.

** TODO Incompatibility with =:ui popup=
** TODO Order is important in ~display-buffer-alist~
** TODO Use of the ~window-sides-vertical~ option
** TODO Migrate reference documentation from private config
