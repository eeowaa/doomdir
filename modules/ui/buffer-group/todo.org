#+title: Buffer-Group

* Documentation [0/5]
** TODO Buffer name regexps vs. major modes
Sometimes buffers are displayed before the major mode is set. In these cases,
major modes in buffer group definitions will not be checked in order to
determine where to display the buffer. Therefore, it is good to define buffer
groups based on buffer name regexps as well as major modes. I have not found
another workaround.

** TODO Incompatibility with =:ui popup=
** TODO Order is important in ~display-buffer-alist~
** TODO Use of the ~window-sides-vertical~ option
** TODO Migrate reference documentation from private config
* Configuration [1/5]
** DONE Define buffer groups in =config.el=
** TODO Split =buffer-group.el= into multiple files
One file for buffer groups, another file for display rules. Should also include
a file explaining how to use the package.

** TODO Define display rules when =+defaults= is given
** TODO Add =+all= flag to set ~switch-to-buffer-obey-display-actions~
** TODO Add =+hacks.el= file
* Features [0/8]
** TODO Make ~buffer-group-define~ and ~buffer-group-property-pushnew~ variadic
** TODO Refactor ~buffer-group-define~ to remove argument quoting
Such syntactic sugar is conventional for this kind of macro.

** TODO Create a macro that wraps ~buffer-group-define~ and ~buffer-group-property-pushnew~
This macro should define a buffer group if one does not exist, otherwise it
should modify an existing buffer group. This should allow for easier
configuration.

** TODO Interactive functions to add and remove conditions to buffer groups
I would like to make ~buffer-group-property-pushnew~ interactive and allow the
user to select a regexp (defaulting to the current buffer's name) and/or a major
mode (defaulting to the current buffer's major mode) to add as a condition to an
existing buffer group. I would also like to allow interactive selection of a
buffer group.

Beyond that, I would like to create a new function named
~buffer-group-property-remove~ and allow interactive selection of the buffer
group and condition(s).

** TODO Interactive ~display-buffer-alist~ setup for buffer groups
I would like to create a function that allows users to interactively select a
buffer group and a corresponding ~display-buffer-alist~ action for that buffer
group. Before that can happen, I'll need to lay some groundwork for the creation
and management of such actions. Perhaps another alist?

** TODO Prevent other buffers from appearing in side window slots
Refer to ~+popup/quit-window~ for inspiration.

** TODO Add ~defcustom~ setter for buffer group definitions
The setter should be a function that can be called directly by users if they
prefer that over the =customize= machinery. Being able to automatically run code
when a buffer group definition has been modified would be helpful in updating
other packages (e.g. =vimish-tab=) that utilizes buffer groups.

** TODO Refactor the buffer group property system
- Create abstraction for pluggable properties
- Distinguish between properties that help define a buffer group and properties
  that are used to describe the behavior of buffer groups; might want to
  separate into different data structures
