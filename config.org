#+STARTUP:  overview
#+FILETAGS: :doom:
* Hints
** DONE Trouble tangling
Are you having trouble tangling this file with =C-c C-v C-t=
(~org-babel-tangle~)? Have you recently updated Doom Emacs using ~doom upgrade~?
Why don't you try =M-x pdf-tools-install= and try again? 😃

** HOLD ~error in process sentinel: Wrong type argument: number-or-marker-p, nil~
I'm not sure if this will solve it, but you can try:
#+begin_src sh :tangle no
find ~/.config/doom -type f -name .DS_Store -exec rm '{}' \;
doom purge
#+end_src

** STRT Finding a good subtree for configuration
This Org file has been organized to mirror the structure [[file:init.el][init.el]], which in turn
mirrors the structure of =~/.emacs.d/modules=. Configuration for options, hooks,
etc. in this file should be done in the subtree which corresponds to the Doom
module that performs configuration on related options, hooks, etc.

Use =SPC h d e= (~my/doom-help-search-source~) and =SPC h d M=
(~my/doom-help-search-modules~) to find the module that contains configuration
for (or in some cases, is at least /intended/ to contain configuration for) the
option, hook, etc. that you want to configure.

* Prerequisites
** DONE macOS
#+begin_src sh :tangle install/macos.sh
#!/bin/sh

# Install Homebrew
curl -Lo- https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash

# Install NVM
curl -Lo- https://raw.githubusercontent.com/nvm-sh/nvm/HEAD/install.sh | bash
#+end_src

* :input
** chinese [0/0] :ARCHIVE:
#+begin_quote
This module adds support for traditional Chinese script by introducing two input
methods: Pinyin and Wubi.
#+end_quote

** japanese [0/0] :ARCHIVE:
#+begin_quote
This module adds support for Japanese script.
#+end_quote

** layout [0/0] :ARCHIVE:
#+begin_quote
This module provides barebones support for using Doom with non-qwerty layouts.
#+end_quote

* :completion
#+begin_quote
Modules that provide new interfaces or frameworks for completion, including code
completion.
#+end_quote

** company [1/1]
#+begin_quote
This module provides code completion, powered by [[https://github.com/company-mode/company-mode][company-mode]]. It is required
for code completion in many of Doom's :lang modules.
#+end_quote

*** DONE [#B] Never start completion automatically (require =C-SPC=)
#+begin_src emacs-lisp :tangle yes
(setq company-idle-delay nil)
#+end_src

This was born from a desire to prevent autocompletion of ordinary words in Org
buffers, but I decided that I don't really need autocompletion anywhere. The
following are the notes I took when pursuing my original plan:

#+begin_quote
=M-x company-capf= gives ~company-ispell~ as one completion backend in Org
buffers. I guess I'd like to have spelling completion as an option that I could
invoke using =C-SPC= (~+company/complete~), but not something that just pops up
on its own.
#+end_quote

** helm [0/0] :ARCHIVE:
#+begin_quote
This module provides Helm integration for a variety of Emacs commands, as well as
a unified interface for project search and replace, powered by ripgrep.
#+end_quote

** ido [0/0] :ARCHIVE:
** ivy [2/2]
#+begin_quote
This module provides Ivy integration for a variety of Emacs commands, as well as
a unified interface for project search and replace, powered by [[https://github.com/BurntSushi/ripgrep/][ripgrep]].
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `completion/ivy` module
brew install ripgrep
#+end_src

*** DONE [#A] Make it easier to jump to headlines across Org buffers
#+begin_src emacs-lisp :tangle yes
(setq counsel-org-goto-all-outline-path-prefix 'buffer-name)
#+end_src

** vertico [0/1] :ARCHIVE:
#+begin_quote
This module enhances the Emacs search and completion experience, and also
provides a united interface for project search and replace, powered by [[https://github.com/BurntSushi/ripgrep/][ripgrep]].
#+end_quote

*** TODO Replace =ivy= with =vertico=
* :ui
#+begin_quote
Aesthetic modules that affect the Emacs interface or user experience.
#+end_quote

** deft [0/0] :ARCHIVE:
#+begin_quote
[[https://jblevins.org/projects/deft/][Deft]] is a major mode for browsing and filtering notes written in plain text
formats, such as org-mode, markdown, and LaTeX.
#+end_quote

** doom [3/3]
#+begin_quote
This module gives Doom its signature look: powered by the =doom-one= theme
(inspired by Atom's One Dark theme) and =solaire-mode=.
#+end_quote

*** DONE [#A] Never hide the modeline
Without a modeline, the only way to see a clear distinction between the bottom
of a window without a modeline and the top of another window is by using certain
themes in GUI Emacs.

#+begin_src emacs-lisp :tangle yes
;; `always' is just a no-op that returns `t'
(advice-add 'hide-mode-line-mode :override #'always)
(advice-add 'doom-themes-hide-modeline :override #'always)
#+end_src

**** COMMENT Other ways to disable modeline hiding
In the end, I prefer the heavy-handed approach and like to see modelines beneath
all windows. The consistently clear distinction between windows is worth the
exchange of screen real estate.

#+CAPTION: Disable modeline hiding in all popup buffers
#+begin_src emacs-lisp :tangle no
(remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)
#+end_src

#+CAPTION: Disable modeline hiding by default in popup buffers:
#+begin_src emacs-lisp :tangle no
(plist-put +popup-defaults :modeline t)
#+end_src

#+CAPTION: Disable modeline hiding in specific modes
#+begin_src emacs-lisp :tangle no
;; Not an exhuastive list of hooks
(remove-hook! '(shell-mode-hook
                term-mode-hook
                vterm-mode-hook
                eshell-mode-hook)
              #'hide-mode-line-mode)
#+end_src

*** DONE [#C] Set the font
Terminus is a good font but must be installed first:
#+begin_src sh :tangle no
brew install font-terminus
#+end_src

#+TITLE: Terminus (disabled)
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Terminus (TTF)" :size 16))
#+end_src

#+TITLE: Menlo (disabled)
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Menlo" :size 16))
#+end_src

*** DONE [#C] Set the theme
There are literally only two custom themes (~doom-badger~ and ~doom-rouge~) that
satisfy the following requirements /without modification/ when running in a
256-color terminal:

1. Files and directories have different colors in Treemacs
2. Buffers and modelines have noticeably different background colors even in
   unselected windows
3. The background color of the current selection in ~ivy~ is never the same as
   the foreground color of any part of the selection

While ~doom-badger~ is OK, I prefer ~doom-henna~. Unfortunately, it does not
satisfy the 3rd requirement, so I made a patched copy of the theme called
~eeowaa-henna~ which fixes the problem.

#+begin_src emacs-lisp :tangle yes
;; Use a modified `doom-henna' theme which fixes `ivy-current-match'
(setq doom-theme 'eeowaa-henna)
#+end_src

** doom-dashboard [0/0] :ARCHIVE:
#+begin_quote
This module adds a minimalistic, Atom-inspired dashboard to Emacs.
#+end_quote

** doom-quit [0/0] :ARCHIVE:
#+begin_quote
A silly module that prompts you with messages when you try to quit, like DOOM
did. Some quotes are from Doom's quit-message list. Others are random, nerdy
references that no decent human being has any business recognising.
#+end_quote

** emoji [1/1]
#+begin_quote
Displays and inserts emojis (ASCII, Github style, unicode).
#+end_quote

*** DONE [#C] Enable emojis (just for =SPC i e=)
This is done in =doom/init.el=.

** hl-todo [1/1]
#+begin_quote
This module adds syntax highlighting for TODO/FIXME/NOTE tags in programming
major-modes.
#+end_quote

*** DONE [#B] Add a few different tags to highlight in programming major-modes
#+begin_src emacs-lisp :tangle yes
(after! hl-todo
  (setq hl-todo-keyword-faces
        (append '(("TESTME" font-lock-constant-face bold)
                  ("PREREQ" font-lock-doc-face bold)
                  ("DEBUG" font-lock-preprocessor-face bold))
                hl-todo-keyword-faces)))
#+end_src

** hydra [2/3]
#+begin_quote
This module adds hydra to Doom Emacs, as well as a few custom built hydras to
start with.
#+end_quote

*** STRT [#B] Add a hydra for table.el
#+BEGIN_SRC emacs-lisp :tangle yes
(global-set-key (kbd "C-c t") 'hydra-table/body)
(defhydra hydra-table ()
  "table.el"
  ("n" hydra-table-navigate/body "Navigate" :exit t)
  ("i" hydra-table-insert/body "Insert" :exit t)
  ("d" hydra-table-delete/body "Delete" :exit t)
  ("s" hydra-table-span-or-split/body "Span or Split" :exit t)
  ("r" hydra-table-resize/body "Resize" :exit t)
  ("j" hydra-table-justify/body "Justify" :exit t)
  ("e" hydra-table-export/body "Export" :exit t)
  ("SPC" ignore nil :color red))
#+END_SRC

**** TODO Capture and Release
**** TODO Recognize and Unrecognize
**** STRT Navigate
I want "fbnp" or "hjkl" navigation between cells, but table.el does
not provide such functions, so I'll need to implement them myself
using regexps.  Looking at the table.el source code might provide some
inspiration (look for [[help:table-forward-cell][table-forward-cell]] and [[help:table-backward-cell][table-backward-cell]]
implementations).

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-navigate ()
  "Navigation"
  ("1" (progn (table-goto-top-left-corner)
              (forward-char) (next-line)))
  ("2" (progn (table-goto-top-right-corner)
              (backward-char) (next-line)))
  ("3" (progn (table-goto-bottom-left-corner)
              (forward-char) (previous-line)))
  ("4" (progn (table-goto-bottom-right-corner)
              (backward-char) (previous-line)))
  ("f" table-forward-cell)
  ("b" table-backward-cell)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

**** DONE Insert
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-insert ()
  "Insert"
  ("t" table-insert "table")
  ("r" table-insert-row "row")
  ("c" table-insert-column "column")
  ("s" table-insert-sequence "sequence")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

**** DONE Delete
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-delete ()
  "Delete"
  ("r" table-delete-row "row")
  ("c" table-delete-column "column")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

**** DONE Span or Split
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-span-or-split ()
  "Span or Split"
  ("h" (table-span-cell 'left))
  ("j" (table-span-cell 'below))
  ("k" (table-span-cell 'above))
  ("l" (table-span-cell 'right))
  ("|" table-split-cell-horizontally)
  ("-" table-split-cell-vertically)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

**** DONE Resize
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-resize ()
  "Resize"
  ("}" table-heighten-cell "heighten")
  ("{" table-shorten-cell "shorten")
  (">" table-widen-cell "widen")
  ("<" table-narrow-cell "narrow")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

**** DONE Justify
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-justify ()
  "Justify"
  ("a" hydra-table-justify-cell/body "Cell" :exit t)
  ("r" hydra-table-justify-row/body "Row" :exit t)
  ("c" hydra-table-justify-column/body "Column" :exit t)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

***** ~a~: Cell
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-justify-cell ()
  "Justify Cell"
  ("h" (table-justify-cell 'left))
  ("j" (table-justify-cell 'bottom))
  ("k" (table-justify-cell 'top))
  ("l" (table-justify-cell 'right))
  ("c" (table-justify-cell 'center) "center")
  ("m" (table-justify-cell 'middle) "middle")
  ("n" (table-justify-cell 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

***** ~r~: Row
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-justify-row ()
  "Justify Row"
  ("h" (table-justify-row 'left))
  ("j" (table-justify-row 'bottom))
  ("k" (table-justify-row 'top))
  ("l" (table-justify-row 'right))
  ("c" (table-justify-row 'center) "center")
  ("m" (table-justify-row 'middle) "middle")
  ("n" (table-justify-row 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

***** ~c~: Column
#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-justify-column ()
  "Justify Column"
  ("h" (table-justify-column 'left))
  ("j" (table-justify-column 'bottom))
  ("k" (table-justify-column 'top))
  ("l" (table-justify-column 'right))
  ("c" (table-justify-column 'center) "center")
  ("m" (table-justify-column 'middle) "middle")
  ("n" (table-justify-column 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

**** STRT Export
I just need to test this functionality.

#+BEGIN_SRC emacs-lisp :tangle yes
(defhydra hydra-table-export ()
  "Export to"
  ("h" (table-generate-source 'html) "HTML")
  ("l" (table-generate-source 'latex) "LaTeX")
  ("c" (table-generate-source 'cals) "CALS")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+END_SRC

*** DONE [#C] Add a hydra for games
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-game (:color blue :hint nil)
  "
^Arcade^      ^Puzzle^        ^Board^          ^Text^        ^Self-Playing^
^-^-----------^-^--------------------------------------------^-^-----------
_t_: Tetris   _5_: 5x5        _g_: Gomoku      _a_: Dunnet   _l_: Life
_s_: Snake    _b_: Blackbox   _i_: Solitaire   _d_: Doctor   _h_: Hanoi
_p_: Pong     _m_: Mpuz       ^ ^              ^ ^           _z_: Zone
^ ^           _o_: Bubbles
"
  ;; Arcade
  ("t" tetris)
  ("s" snake)
  ("p" pong)

  ;; Puzzle
  ("5" 5x5)
  ("b" blackbox)
  ("m" mpuz)
  ("o" bubbles)

  ;; Board
  ("i" solitaire)
  ("g" gomoku)

  ;; Text
  ("a" dunnet)
  ("d" doctor)

  ;; Self-Playing
  ("l" life)
  ("h" hanoi)
  ("z" zone)

  ;; Other
  ("q" nil))
(global-set-key (kbd "C-c g") #'hydra-game/body)
#+end_src

*** DONE [#C] Add a hydra for counsel-spotify
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c s") 'hydra-spotify/body)
(defhydra hydra-spotify (:color blue :hint nil)
  "
^Playback control^   ^Collection^     ^Song^           ^Open Spotify^
^---^----------------^-^--------------^-^-------------------------------
_SPC_: Play/Pause    _l_: Playlist    _s_: By name     _o_: Application
  _n_: Next          _a_: Artist      _A_: By artist   _w_: Web player
  _p_: Previous      _r_: Record      _R_: By record   _i_: Integrations
"
  ;; Playback Control
  ("SPC" counsel-spotify-toggle-play-pause :color red)
  ("n" counsel-spotify-next :color red)
  ("p" counsel-spotify-previous :color red)

  ;; Collection
  ("l" counsel-spotify-search-playlist)
  ("a" counsel-spotify-search-artist)
  ("r" counsel-spotify-search-album)

  ;; Song
  ("s" counsel-spotify-search-track)
  ("A" counsel-spotify-search-tracks-by-artist)
  ("R" counsel-spotify-search-tracks-by-album)

  ;; Open Spotify
  ("o" (cond
        (IS-MAC (call-process "open" nil nil nil "-a" "spotify"))
        (IS-LINUX (call-process "xdg-open" nil nil nil "spotify"))
        (t (user-error! "Unsupported operating system"))))
  ("w" (browse-url "https://open.spotify.com"))
  ("i" (browse-url "https://developer.spotify.com/my-applications"))

  ;; Other
  ("q" nil))
#+end_src

** indent-guides [0/0] :ARCHIVE:
** ligatures [1/1]
#+begin_quote
This module enables ligatures and arbitrary symbol substitutions with
~mac-auto-operator-composition-mode~ (on supported macOS systems) or composition
tables (harfbuzz on Emacs 28), falling back on ~prettify-symbols-mode~
otherwise.
#+end_quote

*** DONE [#C] Only enable extra ligatures in Org mode (for now)
#+begin_src emacs-lisp :tangle yes
(setq +ligatures-extras-in-modes '(org-mode))
#+end_src

** minimap [0/0]
#+begin_quote
This module adds a minimap to the right side of Emacs, similar to the feature
found in many other editors.
#+end_quote

** modeline [1/1]
#+begin_quote
This module provides an Atom-inspired, minimalistic modeline for Doom Emacs,
powered by [[https://github.com/seagle0128/doom-modeline][the doom-modeline package]] (where you can find screenshots).
#+end_quote

*** DONE [#C] Use 1-based column numbering in modeline
#+begin_src emacs-lisp :tangle yes
(setq column-number-indicator-zero-based nil)
#+end_src

** nav-flash [0/0] :ARCHIVE:
#+begin_quote
This module flashes the line around the cursor after any significant motion, to
make it easy to follow after big operations.
#+end_quote

** neotree [0/0] :ARCHIVE:
#+begin_quote
This module brings a side panel for browsing project files, inspired by vim's
NERDTree.
#+end_quote

** ophints [0/0]
#+begin_quote
This module provides op-hints (operation hinting), i.e. visual feedback for
certain operations. It highlights regions of text that the last operation (like
yank) acted on.
#+end_quote

** popup [5/7]
#+begin_quote
This module provides a customizable popup window management system.
#+end_quote

*** DONE [#B] Add a terminal-friendly keybinding for ~+popup/raise~
I've defined a global keybinding for this:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Raise popup"
      "^" #'+popup/raise)
#+end_src

Ideally, I'd just modify the ~popup-mode~ keymap, but the following doesn't seem
to work:
#+begin_src emacs-lisp :tangle no
(map! :map +popup-buffer-mode-map
      "SPC ^" #'+popup/raise)
#+end_src

*** DONE [#B] Configure Man for AWS CLI man pages
#+begin_src emacs-lisp :tangle yes
;; Allow any letter to be used a manual section for Man (AWS CLI uses "a")
(setq Man-section-regexp "[a-zA-Z0-9+]+")

;; Consider "AVAILABLE.*" page sections to be "SEE ALSO"
(setq Man-see-also-regexp
      (format "\\(%s\\)"
              (string-join '("SEE ALSO"
                             "VOIR AUSSI"
                             "SIEHE AUCH"
                             "VÉASE TAMBIÉN"
                             "VEJA TAMBÉM"
                             "VEDERE ANCHE"
                             "ZOBACZ TAKŻE"
                             "İLGİLİ BELGELER"
                             "参照"
                             "参见 SEE ALSO"
                             "參見 SEE ALSO"
                             "AVAILABLE.*") ;; For AWS CLI man pages
                           "\\|")))

;; Allow buttons to be properly overlayed on AWS CLI man page references
(after! man
  (setq
   Man-reference-regexp
   (concat
    ;; Ignore bullet points
    "\\(?:^\\.IP \\\\(bu 2\\n\\|o \\)?"
    ;; This is the <name> part
    "\\(" Man-name-regexp
         "\\("
              ;; This allow line-continuations for long man page names
              ;;
              ;; SEE ALSO
              ;;     foo(1), bar(1), line-
              ;;     continuation(1)
              ;;
              "\\([-‐]\n\\)?"
              "[ \t]+" Man-name-regexp
         "\\)*"
    "\\)"
    ;; This is the (<section>) part
    "[ \t]*(\\(" Man-section-regexp "\\))")))
#+end_src

*** DONE [#C] Do not open (Wo)Man buffers in a popup window
#+begin_src emacs-lisp :tangle yes
(setq +popup--display-buffer-alist
      (delq (assoc "^\\*\\(?:Wo\\)?Man " +popup--display-buffer-alist)
            +popup--display-buffer-alist))
(when (bound-and-true-p +popup-mode)
  (setq display-buffer-alist +popup--display-buffer-alist))
#+end_src

*** DONE [#C] Open man pages in the current window
#+begin_src emacs-lisp :tangle yes
(setq Man-notify-method 'pushy)
#+end_src

*** DONE [#C] Do not restrict (Wo)Man buffer width
#+begin_src emacs-lisp :tangle yes
(setq Man-width-max nil
      woman-fill-frame t)
#+end_src

To redisplay with new width, call ~Man-update-manpage~ in a =Man= buffer (or
just wait a few seconds after resizing a window for it to get called
automatically) or call ~woman-reformat-last-file~ in a =woman= buffer (bound to
=R= in Emacs evil state).

*** TODO [#B] Configure WoMan for AWS CLI man pages
*** TODO [#C] Modify popup behavior for Customize buffers
** tabs [0/0] :ARCHIVE:
#+begin_quote
This module adds an Atom-esque tab bar to the Emacs UI.
#+end_quote

** treemacs [4/5]
#+begin_quote
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a file and project explorer similar to NeoTree or vim’s NerdTree,
but largely inspired by the Project Explorer in Eclipse. It shows the file
system outlines of your projects in a simple tree layout allowing quick
navigation and exploration, while also possessing basic file management
utilities.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `ui/treemacs` module
brew install python3
#+end_src

*** DONE [#B] Fix ace-window keybindings :hack:
This slows down startup a bit, but whatever (I'm not obsessed with startup):
#+begin_src emacs-lisp :tangle yes
(require 'ace-window)
#+end_src

Reference: https://github.com/hlissner/doom-emacs/issues/4555

*** KILL [#B] Fix size of NPM logo
I am no longer seeing this issue as of [2021-01-11 Mon].

*** DONE [#C] Add keybindings to visit adjacent files
I'd prefer my functions to use ~treemacs-peek~ instead of
~treemacs-visit-node-no-split~, but for whatever reason, ~treemacs-peek~ does
not work in the lisp functions.

#+begin_src emacs-lisp :tangle yes
(after! treemacs-evil
  (defun my/treemacs-visit-next ()
    "Open the next node in another window."
    (interactive)
    (treemacs-next-line 1)
    (treemacs-visit-node-no-split 1))
  (defun my/treemacs-visit-previous ()
    "Open the previous node in another window."
    (interactive)
    (treemacs-previous-line 1)
    (treemacs-visit-node-no-split 1))
  (define-key! evil-treemacs-state-map
    "J" #'my/treemacs-visit-next
    "K" #'my/treemacs-visit-previous))
#+end_src

*** TODO [#B] Display "+" and "-" icons in tty emacs
https://github.com/hlissner/emacs-doom-themes/issues/489

** unicode [0/0] :ARCHIVE:
#+begin_quote
This module extends Doom's ability to display non-English unicode. It is
primarily useful for non-English Emacs users, for whom Doom's built-in unicode
support in insufficient.
#+end_quote

** vc-gutter [0/1]
*** TODO [#B] Enable toggling of vcs diff in the fringe
Unfortunately, when the =vc-gutter= module is enabled, I have found no way to
persistently disable =git-gutter= in a buffer.

** vi-tilde-fringe [0/0]
#+begin_quote
Displays a tilde(~) in the left fringe to indicate an empty line, similar to Vi.
#+end_quote

** window-select [0/1]
#+begin_quote
This module provides several methods for selecting windows without the use of
the mouse or spatial navigation (e.g. =C-w {h,j,k,l}=).
#+end_quote

*** TODO [#C] Add an =ace-window= keybinding to close windows
Currently, I can use =C-w C-w e <window> C-w c= to close a window, but the
cursor may switch to another window after this operation. I would rather create
a keybinding like =C-w C-w x <window>= that closes the window that I select
/without/ moving the cursor.

** workspaces [1/1]
#+begin_quote
This module adds support for workspaces, powered by persp_mode, as well as a API
for manipulating them.
#+end_quote

*** KILL Uniquify buffer names using file paths
This is done by setting the ~uniquify-buffer-name-style~ variable to ~forward~,
which Doom does by default in =core/core-ui.el=. However, when the =workspaces=
module is enabled, Doom makes sure that the =uniquify= package does not modify
buffer names, as it breaks =persp-mode= (what powers the =workspaces= module).

Visit the source code of ~+workspaces-init-persp-mode-h~ for more detail.

** zen [0/0]
#+begin_quote
This module provides two minor modes that make Emacs into a more comfortable
writing or coding environment. Folks familiar with "distraction-free" or "zen"
modes from other editors -- or [[https://github.com/rnkn/olivetti][olivetti]], [[https://github.com/zk-phi/sublimity][sublimity]], and [[https://github.com/IdoMagal/Tabula-Rasa][tabula-rasa]] (Emacs
plugins) -- will feel right at home.
#+end_quote

* :editor
#+begin_quote
Modules that affect and augment your ability to manipulate or insert text.
#+end_quote

** evil [2/3]
#+begin_quote
This holy module brings the vim experience to Emacs.
#+end_quote

*** DONE [#A] Fix ~evil-visual-block~ in =org= buffers
Oddly, this is a problem I've only encountered in =org= buffers, but when I use
=C-v= in ~normal~ state (/not/ =C-x SPC= in ~emacs~ state) the visual block
extends up and/or down further than what I've actually selected. This doesn't
appear to just be a visual artifact, either, since sometimes (but not always),
the action that I take on what I've actually selected extends to at least some
of the visually-highlighted text that I did not select.

To attempt to fix this problem, I performed a fresh install of Doom Emacs and
all its packages. However, it looks like maybe I need to install a different
version of Emacs (I have ~HEAD~ of Emacs 28), or just wait until =evil=, =org=
(or =evil-org=?) gets updated.

*UPDATE*: After installing gccemacs, this problem went away.

*** DONE [#B] Define modes that should always come up in Emacs state
#+begin_src emacs-lisp :tangle yes
(pushnew! evil-emacs-state-modes 'noaa-mode)
#+end_src

*** TODO [#C] Bind ~helpful-update~ to an Evil Normal state key
~helpful-update~ is the function that is used to redisplay help buffers (useful
for when a value changes). Currently, I need to switch to Emacs state via =C-z=
and then hit =g=, finally switching back to Normal state via =C-z=.

Options to look at:
+ ~evil-collection-helpful-maps~
+ ~helpful-mode-map~

** file-templates [0/2]
#+begin_quote
This module adds file templates for blank files, powered by yasnippet.
#+end_quote

*** STRT [#A] Figure out how to override existing templates
The function ~+file-templates-check-h~ determines if the current buffer is a
candidate for file template expansion, so its source code is probably the best
place to determine how this works.

Digging deeper, it looks like the following form in ~+file-templates-check-h~ is
what actually determines which, if any, template applies to the current buffer:

#+begin_src emacs-lisp :tangle no
(when-let (rule (cl-find-if #'+file-template-p +file-templates-alist))
  (apply #'+file-templates--expand rule))
#+end_src

For a buffer visiting a file named =foo.sh=, the ~rule~ symbol in the ~when-let~
form in the above code block would be assigned the value ~(sh-mode)~, a member
of ~+file-templates-alist~.

Now the important thing is how ~+file-templates--expand~ actually works.
*Potentially-important note*: ~yas_snippets-dirs~ contains ~+snippets-dir~, which
evaluates to =$DOOMDIR/snippets/=.

*** STRT [#B] Simplify the file template for =sh-mode=
Doom Emacs' builtin file template for =sh-mode= is not suitable for portable
shell scripts:

#+begin_src snippet :tangle no
#!/usr/bin/env `(if (equal (file-name-extension buffer-file-name) "zsh") "zsh" "bash")`
set -euo pipefail

$0
#+end_src

I just created a new file template as follows and stored it in
=$DOOMDIR/snippets/sh-mode/__=,
#+begin_src snippet :tangle no
#!/bin/sh
$0
#+end_src

From https://tecosaur.github.io/emacs-config/config.html#file-templates:
#+begin_src emacs-lisp :tangle no
(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
(set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)
#+end_src

** fold [0/2]
#+begin_quote
This module marries hideshow, vimish-fold and outline-minor-mode to bring you
marker, indent and syntax-based code folding for as many languages as possible.
#+end_quote

Emacs has a lot of different packages available for folding, for example:

+ =hideshow=
+ =yafolding=
+ =origami=
+ =outline-minor-mode=
+ =vimish-fold=

I'm not convinced that Doom utilizes Emacs folding to its full potential.

*** Vim help text for folding :noexport:
This only contains the relevant commands and nothing Vim-internal.

**** Creating and deleting folds
***** zf{motion} or {Visual}zf - Operator to create a fold
This only works when 'foldmethod' is "manual" or "marker". The new fold will be
closed for the "manual" method. 'foldenable' will be set.

***** zF - Create a fold for [count] lines
Works like "zf".

***** zd - Delete one fold at the cursor
When the cursor is on a folded line, that fold is deleted. Nested folds are
moved one level up. In Visual mode one level of all folds (partially) in the
selected area are deleted. Careful: This easily deletes more folds than you
expect and there is no undo for manual folding. This only works when
'foldmethod' is "manual" or "marker".

***** zD - Delete folds recursively at the cursor
In Visual mode all folds (partially) in the selected area and all nested folds
in them are deleted. This only works when 'foldmethod' is "manual" or "marker".

***** zE - Eliminate all folds in the window
This only works when 'foldmethod' is "manual" or "marker".

**** Opening and closing folds
***** zo - Open one fold under the cursor
When a count is given, that many folds deep will be opened. In Visual mode one
level of folds is opened for all lines in the selected area.

***** zO - Open all folds under the cursor recursively
Folds that don't contain the cursor line are unchanged. In Visual mode it opens
all folds that are in the selected area, also those that are only partly
selected.

***** zc - Close one fold under the cursor
When a count is given, that many folds deep are closed. In Visual mode one level
of folds is closed for all lines in the selected area. 'foldenable' will be set.

***** zC - Close all folds under the cursor recursively
Folds that don't contain the cursor line are unchanged. In Visual mode it closes
all folds that are in the selected area, also those that are only partly
selected. 'foldenable' will be set.

***** za - Toggle fold
When on a closed fold: open it. When folds are nested, you may have to use "za"
several times. When a count is given, that many closed folds are opened.

When on an open fold: close it and set 'foldenable'. This will only close one
level, since using "za" again will open the fold. When a count is given that
many folds will be closed (that's not the same as repeating "za" that many
times).

Open just enough folds to make the line in which the cursor is located not
folded.

***** zm - Fold more
Subtract ~v:count1~ from 'foldlevel'. If 'foldlevel' was already zero nothing
happens. 'foldenable' will be set.

***** zM - Close all folds
Set 'foldlevel' to 0. 'foldenable' will be set.

***** zr - Reduce folding
Add ~v:count1~ to 'foldlevel'.

***** zR - Open all folds
This sets 'foldlevel' to highest fold level.

**** Moving over folds
***** [z - Move to the start of the current open fold
If already at the start, move to the start of the fold that contains it. If
there is no containing fold, the command fails. When a count is used, repeats
the command [count] times.

***** ]z - Move to the end of the current open fold
If already at the end, move to the end of the fold that contains it. If there is
no containing fold, the command fails. When a count is used, repeats the command
[count] times.

***** zj - Move downwards to the start of the next fold
A closed fold is counted as one fold. When a count is used, repeats the command
[count] times. This command can be used after an |operator|.

***** zk - Move upwards to the end of the previous fold
A closed fold is counted as one fold. When a count is used, repeats the command
[count] times. This command can be used after an operator.

*** TODO [#A] Enable fine-grained folding for YAML mode
Play around with folding in the following code block and just /try/ to suppress
your annoyance:

#+begin_src yaml :tangle no
foo:
  bar:
    - 1
    - 2
    - 3
  baz:
    - 4
    - 5
    - 6
quz:
  - hello
  - goodbye
#+end_src

My mind can't even comprehend how broken this is.

*** TODO [#A] Enable fine-grained folding for JSON mode
Play around with folding in the following code block and just /try/ to suppress
your annoyance:

#+begin_src json :tangle no
{
  "foo": {
    "bar": [
      1,
      2,
      3
    ]
    "baz": [
      4,
      5,
      6
    ]
  },
  "quz": [
    "hello",
    "goodbye"
  ]
}
#+end_src

My mind can't even comprehend how broken this is.

** format [0/0] :ARCHIVE:
#+begin_quote
This module integrates code formatters into Emacs.
#+end_quote

** god [0/0] :ARCHIVE:
** lispy [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://github.com/noctuid/lispyville][lispy]] key functionality in Lisp languages.
#+end_quote

** multiple-cursors [0/0] :ARCHIVE:
** objed [0/0] :ARCHIVE:
#+begin_quote
This modules adds [[https://github.com/clemera/objed][objed]], a global minor-mode for navigating and manipulating
text objects. It combines the ideas of versor-mode and other editors like Vim or
Kakoune and tries to align them with regular Emacs conventions.
#+end_quote

** parinfer [0/0] :ARCHIVE:
#+begin_quote
Parinfer is a proof-of-concept editor mode for Lisp programming languages. It
will infer some changes to keep Parens and Indentation inline with one another.
#+end_quote

** rotate-text [0/0] :ARCHIVE:
** snippets [0/0]
#+begin_quote
This module adds snippets to Emacs, powered by yasnippet.
#+end_quote

** word-wrap [0/0]
#+begin_quote
This module adds a minor-mode ~+word-wrap-mode~, which intelligently wraps long
lines in the buffer without modifying the buffer content.
#+end_quote

* :emacs
#+begin_quote
Modules that reconfigure or augment packages or features built into Emacs.
#+end_quote

** dired [1/1]
#+begin_quote
This module provides configuration for dired.
#+end_quote

*** DONE Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `emacs/dired` module
brew install coreutils
#+end_src

** electric [0/0]
** ibuffer [0/0]
#+begin_quote
This module augments ibuffer.
#+end_quote

** undo [0/1]
#+begin_quote
This module augments Emacs' built-in undo system to be more intuitive and to
persist across Emacs sessions.
#+end_quote

*** STRT [#A] Enable ~undo-tree~
Sometimes this doesn't seem to work.

#+begin_src emacs-lisp :tangle yes
;; This should already be enabled by emacs/undo/config.el
(global-undo-tree-mode)

;; Not sure what the best way is to add this hook
(add-hook 'evil-local-mode-hook #'turn-on-undo-tree-mode)
#+end_src

** vc [1/1]
#+begin_quote
This module augments Emacs builtin version control support and provides better
integration with git.
#+end_quote

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("/git/config\\.d/.+" . gitconfig-mode))
#+end_src

* :term
:PROPERTIES:
:CATEGORY: doom/term
:END:
#+begin_quote
Modules that offer terminal emulation.
#+end_quote

** eshell [4/7]
#+begin_quote
This module provides additional features for the built-in [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Emacs Shell]].
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `term/eshell` module
brew install fish
#+end_src

*** DONE [#B] Define aliases
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
  ;; C-x [0123]
  "0" "delete-window"
  "1" "delete-other-windows"
  "2" "split-window-below"
  "3" "split-window-right"

  ;; find-file
  "e"  "find-file $1"
  "4e" "find-file-other-window $1"
  "5e" "find-file-other-frame $1"

  ;; find-file-read-only
  "r"  "find-file-read-only $1"
  "4r" "find-file-read-only-other-window $1"
  "5r" "find-file-read-only-other-frame $1"

  ;; view-file
  "v"  "view-file $1"
  "4v" "view-file-other-window"
  "5v" "view-file-other-frame"

  ;; eww-open-file
  "w" "eww-open-file $1"

  ;; shell commands
  "git" "TERM=eterm-color git --no-pager -c color.ui=always -c interactive.singleKey=false $*"
  "f"   "cd $1 && ls")
#+end_src

*** DONE [#B] Do not scroll after every command
#+begin_src emacs-lisp :tangle yes
(after! eshell
  (setq eshell-scroll-show-maximum-output nil))
#+end_src

*** DONE [#B] Make ^L simply scroll (not insert a bunch of blank lines
As long as the first element of ~recenter-positions~ is ~top~ (which is
how I have things configured), the following works great.

#+begin_src emacs-lisp :tangle yes
(after! eshell
  (advice-add 'eshell/clear :override #'recenter-top-bottom))
#+end_src

*** TODO [#B] Fix ANSI escape codes
When there is a lot of colorized output (for example, the output of ~git log -p~
on a big repo), eventually ANSI escape codes do not get interpreted. Here is an
example from ~doom doctor~:
#+begin_example
[33mThere are 4 warnings![0m
[32m✓ Finished in 7.4969s[0m
#+end_example

*** TODO [#B] Export ~$EDITOR~ to =eshell=
Unlike with =vterm=, we currently do not export ~$EDITOR~ to =eshell=. This is
to avoid a dangerous situation in which =C-c C-k= not only returns an error code
to =eshell=, it forcefully clears the file on disk.

*** TODO [#B] Fix terminal type
Sometimes ~git~ will spit the following:
#+begin_example
tput: unknown terminal "eterm-color"
#+end_example

** shell [0/0] :ARCHIVE:
** term [0/0] :ARCHIVE:
** vterm [3/4]
#+begin_quote
This module provides a terminal emulator powered by libvterm. It is still in
alpha and requires a component be compiled (=vterm-module.so=).
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `term/vterm` module
brew install libvterm cmake
#+end_src

*** DONE [#B] Export ~$EDITOR~ to =vterm=
#+begin_src emacs-lisp :tangle yes
(add-hook! vterm-mode #'with-editor-export-editor)
#+end_src

*** DONE [#B] Let =C-j= and =<M-backspace>= pass through in Evil insert state
#+begin_src emacs-lisp :tangle yes
(after! evil-collection-vterm
  (dolist (key '("C-j" "<M-backspace>"))
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd key) 'vterm--self-insert)))
#+end_src

*** TODO [#C] Prevent ~git-graph~ cutoff
The last character ("o" in this case) gets hidden:
#+begin_example
$ git graph
,* 65a8a6b6da9176bea78eb78c604120714207bcc5 Initial commit  eeowaa   3 weeks ag
#+end_example

I say "hidden" instead of "truncated" because if you kill the line and yank it
into another buffer, you can see the "o". *Note that this is only a problem in
GUI Emacs, not terminal Emacs*.

* :checkers
** syntax [1/1]
*** DONE [#B] Disable flycheck in Emacs Lisp config files
#+begin_src emacs-lisp :tangle yes
(mapc (lambda (config-file-dir)
        (add-to-list '+emacs-lisp-disable-flycheck-in-dirs config-file-dir))
      ;; Unique directory components of canonical config file paths
      (delete-dups
       (mapcar (lambda (config-file)
                 (file-name-directory (file-chase-links config-file)))
               ;; Config file paths in canonical config directories
               (mapcan (lambda (config-dir)
                         (directory-files config-dir t "\\.el"))
                       (list (file-truename doom-emacs-dir)
                             (file-truename doom-private-dir))))))
#+end_src

** spell [3/4]
#+begin_quote
This modules provides spellchecking powered by =aspell=, =hunspell= or =enchant=.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `checkers/spell` module
brew install aspell
#+end_src

*** DONE [#A] Prevent ~spell-fu-mode~ from being enabled by default
I like having the option, but I would prefer to enable it manually per buffer.

#+begin_src emacs-lisp :tangle yes
(when (and (featurep! :checkers spell)
           (not (featurep! :checkers spell +flyspell)))
  (remove-hook 'text-mode-hook 'spell-fu-mode))
#+end_src

**** COMMENT My initial stab at this
:LOGBOOK:
- Note taken on [2021-05-28 Fri 15:22] \\
  This was very convoluted and unnecessary, but I learned a lot during this
  process, so I want to save my work for future reference.
:END:
Unfortunately, ~use-package-hook!~ cannot be used to remove ~spell-fu-mode~ from
~text-mode-hook~ as set in the ~:hook~ section of the ~use-package!~ declaration
for =spell-fu= in the =checkers/spell= Doom module. (See [[https://emacs.stackexchange.com/questions/64395/how-to-override-the-hook-section-of-a-use-package-declaration][this post on Emacs
StackExchange]] for confirmation.)

Instead, I have decided to advise the ~add-hook~ function to prevent specific
functions from being added to specific hooks.

Note that I tangle to =early-init.el= (which I ~load!~ at the start of
=init.el=) so that the ~add-hook~ advice can be in place before the ~doom!~
block loads the =checkers/spell= module, which is what sets the hook.

: #+begin_src emacs-lisp :tangle early-init.el
#+begin_src emacs-lisp :tangle no
(setq my/hook-deny-list
      '((text-mode-hook . spell-fu-mode)))

(defun my/hook-denied-p (&rest r)
  (let ((hook (car r))
        (func (cadr r)))
    (member (cons hook func) my/hook-deny-list))

(advice-add 'add-hook :before-until #'my/hook-denied-p)
#+end_src

*** DONE [#B] Prevent =which-key= errors related to =spell-fu= :hack:
If I press =]= before =spell-fu= has been loaded and wait for a =which-key=
popup, I get the following error:

: Error running timer ‘which-key--update’: (void-function +spell/next-error)

Considering that the function /should/ be autoloaded in =+spell-fu.el= (see code
snippet below), I don't know why I'm getting that error.

#+begin_src emacs-lisp :tangle no
;;;###autoload (defalias '+spell/next-error #'spell-fu-goto-next-error)
#+end_src

Regardless, I just want to fix the issue. A manual workaround is to execute
=SPC t s= (~spell-fu-mode~) twice: the first time to load =spell-fu= and the
second time to disable it. For now, I'll just always require it:

#+begin_src emacs-lisp :tangle yes
(require 'spell-fu)
#+end_src

*** HOLD [#B] Fix spelling correction
:LOGBOOK:
- Note taken on [2021-06-25 Fri 11:13] \\
  I am no longer seeing this error and cannot replicate it.
:END:
~+spell/correct~ (=z ==) spits the following error:
#+begin_quote
Starting new Ispell process aspell with english dictionary...done
ispell-init-process: Error: /Users/eeowaa/.config/emacs/.local/etc/ispell/english.pws: The language "english" is not known. This is probably because: the file "/usr/local/Cellar/aspell/0.60.8/lib/aspell-0.60/english.dat" can not be opened for reading.
#+end_quote

*UPDATE*: After running the following, it worked for me:
#+begin_src sh :tangle no
rm -rf ~/.config/emacs/.local/etc/ispell
#+end_src

I also ran the following, but I'm not sure if it made a difference:
#+begin_src emacs-lisp :tangle yes
(setq ispell-dictionary "english")
#+end_src

**** TODO Prevent this from happening
I don't know why, but this problem reappears on me.

**** TODO Make spelling corrections match recommendations
The =company= backend that provides spelling recommendations (via =C-SPC=) must
use a different dictionary than the =spell= module that highlights errors and
provides corrections. For example, the word "fluctuant" is highlighted as a
spelling error by the =spell= module but is a completion for "flu" (just type
=C-SPC= in Evil insert state with the cursor positioned after the "u" in "flu").

** grammar [1/1] :ARCHIVE:
#+begin_quote
This module adds grammar checking to Emacs to aid your writing by combining
=lang-tool= and =writegood-mode=.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `checkers/grammar` module
brew install languagetool
sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk
#+end_src

* :tools
#+begin_quote
Small modules that give Emacs access to external tools & services.
#+end_quote

** ansible [1/1]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/ansible` module
brew install ansible
#+end_src

** debugger [0/2] :ARCHIVE:
*** STRT [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/debugger` module
# https://stackoverflow.com/questions/18423124/please-check-gdb-is-codesigned-see-taskgated8-how-to-get-gdb-installed-w
brew install gdb
#+end_src

*** TODO [#A] Fix DAP mode error message
I get this error when I visit a file that invokes ~lsp!~:
#+begin_example
(doom-hook-error lsp!
  (error Recursive load
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/lsp-mode/lsp-mode.el))
#+end_example

For now, I might just want to unset ~lsp-enable-dap-auto-configure~ and see if
that prevents errors. Worst case, I could disable =debugger=.

*UPDATE*: Unfortunately I was unable to resolve this quickly and opted to
disable =debugger= for the time being (it's not super-important for me right
now, anyway).

** direnv [1/2] :ARCHIVE:
#+begin_quote
This module integrates direnv into Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/direnv` module
brew install direnv
#+end_src

*** TODO [#A] See why =direnv= prevents envvars from propagating between buffers
I have this module disabled for this sole reason.

** docker [1/1]
#+begin_quote
This module allows you to manipulate Docker images, containers & more from
Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/docker` module
brew install docker
npm install -g dockerfile-language-server-nodejs
#+end_src

** editorconfig [1/1]
#+begin_quote
This module integrates [[https://editorconfig.org/][EditorConfig]] into Emacs, allowing users to dictate code
style on a per-project basis with an =.editorconfig= file ([[https://editorconfig-specification.readthedocs.io/][formal
specification]]).
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/editorconfig` module
brew install editorconfig
#+end_src

** ein [1/1]
#+begin_quote
Adds Jupyter notebook integration into emacs.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/ein` module
brew install python
pipx install --include-deps jupyter
#+end_src

** evay [0/0]
** gist [0/0] :ARCHIVE:
** lookup [1/2]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/lookup` module
brew install ripgrep sqlite3
#+end_src

*** HOLD [#C] Add dictionary and thesaurus backends for =SPC s t/T=
I've done everything that the Doom documentation told me to do, but things
aren't working very well. Just try it out for yourself and see. Might want to
open a PR or two.

** lsp [0/1]
*** TODO [#A] Fix the size of the popup buffer invoked by =M-x lsp=
/Note that ~lsp~ is invoked when you enter a buffer, as well/.

When the frame is too small (e.g. its default size), the first few menu items in
the popup window are cut off, and all you see are options to exclude the file
from the LSP workspace. Unless you know about the other available options, LSP
won't work for you. Unfortunately, resizing the frame does not help.

** magit [2/2]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/magit` module
cd ~/stow-dotfiles && make perl
brew install perl git-absorb
cpan install App::Git::Autofixup
#+end_src

*** DONE [#C] Configure list of repositories
#+begin_src emacs-lisp :tangle yes
(setq magit-repository-directories
      '(("~/Documents/src" . 2)
        ("~/Documents/ref" . 1)
        ("~/stow-dotfiles" . 1)))
#+end_src

** make [0/0]
** pass [0/0] :ARCHIVE:
** pdf [1/1]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/pdf` module
brew install pkg-config poppler automake
#+end_src

** prodigy [0/0] :ARCHIVE:
** rgb [0/0] :ARCHIVE:
** taskrunner [0/0] :ARCHIVE:
** terraform [1/1]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/terraform` module
brew install terraform
#+end_src

** tmux [0/0] :ARCHIVE:
** upload [0/0] :ARCHIVE:
* :os
#+begin_quote
Modules to improve integration into your OS, system, or devices.
#+end_quote

** macos [2/2]
*** DONE [#A] Remap keys for macOS
#+begin_src emacs-lisp :tangle yes
(when IS-MAC
  (setq ;; Comfortable keys that work most of the time
        mac-command-modifier 'control
        mac-right-command-modifier 'meta

        ;; Workaround for when system keybindings take precedence
        mac-control-modifier 'control
        mac-right-control-modifier 'meta

        ;; For exotic mappings
        mac-option-modifier 'super
        mac-right-option-modifier 'hyper))
#+end_src

*** DONE [#B] Experiment with Keychain as a member of ~auth-sources~
The following example applies to =forge=, but works the same way with other
Emacs facilities.

#+CAPTION: Command to create Keychain entry
#+begin_src sh :tangle no
security add-internet-password -U \
    -s 'api.github.com' \
    -D 'Internet password' \
    -a 'eeowaa^forge' \
    -r 'htps' \
    -w '********' \
    "$HOME/Library/Keychains/login.keychain-db"
#+end_src

#+RESULTS:

#+CAPTION: Entry as viewed in "Keychain Access" app
| Field    | Value                  |
|----------+------------------------|
| Name     | api.github.com         |
| Type     | Internet password      |
| Account  | eeowaa^forge           |
| Where    | https://api.github.com |
| Password | ********               |

#+CAPTION: Elisp to retrieve the password
#+begin_src emacs-lisp :tangle no
(auth-source-pick-first-password
 :host "api.github.com"
 :user "eeowaa^forge")
#+end_src

See also:
+ ~auth-source-search~ (details the argument spec for ~:host~, ~:user~, etc.)
+ ~auth-sources~ (specifies a list of backing secret stores)

** tty [0/0] :ARCHIVE:
* :lang
#+begin_quote
Modules that bring support for a language or group of languages to Emacs.
#+end_quote

** agda [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the [[http://wiki.portal.chalmers.se/agda/pmwiki.php][agda]] programming language. The Emacs support
exists directly in the agda repository but not in melpa.
#+end_quote

** beancount [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://beancount.github.io/][Beancount]] to Emacs. Beancount, like ledger, lets
you [[https://plaintextaccounting.org/][manage your money in plain text]].
#+end_quote

** cc [1/1]
#+begin_quote
This module adds support for the C-family of languages: C, C++, and Objective-C.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/cc` module
brew install ccls gdb glslang
#+end_src

** clojure [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the Clojure(Script) language.
#+end_quote

** common-lisp [0/0] :ARCHIVE:
** coq [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://coq.inria.fr][coq]] support, powered by [[https://proofgeneral.github.io][Proof General]].
#+end_quote

** crystal [0/0] :ARCHIVE:
#+begin_quote
This modules adds [[https://crystal-lang.org/][crystal]] support.
#+end_quote

** csharp [0/0] :ARCHIVE:
#+begin_quote
This module adds C# support to Emacs. Powered by omnisharp (directly or through
LSP).
#+end_quote

** data [1/1]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/data` module
curl --create-dirs \
    -o ~/.config/emacs/.local/etc/lsp/xmlls/org.eclipse.lemminx-0.13.1-uber.jar \
    https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.13.1/org.eclipse.lemminx-0.13.1-uber.jar
#+end_src

** dart [0/0] :ARCHIVE:
#+begin_quote
[[https://dart.dev/][Dart]] is a client-optimized language by Google for fast apps on any platform.
It is fast and optimized for UI, famous for the [[https://flutter.io/][Flutter]] framework, also
made by Google. Both Flutter and Dart are free and open-source.
#+end_quote

** dhall [0/0] :ARCHIVE:
** elixer [0/0] :ARCHIVE:
#+begin_quote
This module provides support for [[https://elixir-lang.org/][Elixir programming language]] via [[https://github.com/tonini/alchemist.el][alchemist.el]]
or [[https://github.com/elixir-lsp/elixir-ls/][elixir-ls]].
#+end_quote

** elm [0/0] :ARCHIVE:
** emacs-lisp [1/1]
#+begin_quote
This module extends support for Emacs Lisp in Doom Emacs.
#+end_quote

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("Cask\\'" . lisp-data-mode))
#+end_src

** erlang [0/0] :ARCHIVE:
#+begin_quote
This module provides support [[https://www.erlang.org/][Erlang programming language]]. Support for the
[[https://github.com/erlang/sourcer][sourcer]] language server is optional.
#+end_quote

** ess [0/0] :ARCHIVE:
#+begin_quote
This module adds support for various statistics languages, including R, S-Plus,
SAS, Julia and Stata.
#+end_quote

** factor [0/0] :ARCHIVE:
#+begin_quote
This module adds support to the [[https://github.com/factor/factor][factor]] programming language and its associated
_fuel_ emacs plugin.
#+end_quote

** faust [0/0] :ARCHIVE:
#+begin_quote
Add support to Faust language inside emacs.
#+end_quote

** fsharp [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://fsharp.org/][F#]] support.
#+end_quote

** fstar [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://fstar-lang.org/][F*]] support, powered by [[https://github.com/FStarLang/fstar-mode.el][fstar-mode.el]].
#+end_quote

** gdscript [0/0] :ARCHIVE:
#+begin_quote
This module adds support for GDScript, the scripting language of the [[http://godotengine.org/][Godot]] game
engine, to Doom Emacs, powered by [[https://github.com/GDQuest/emacs-gdscript-mode][gdscript-mode]].
#+end_quote

** go [0/1]
#+begin_quote
This module adds [[https://golang.org][Go]] support, with optional (but recommended) LSP support via
[[https://github.com/golang/tools/blob/master/gopls/README.md][gopls]].
#+end_quote

*** STRT [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/go` module
cd ~/stow-dotfiles && make go
brew install go gopls golangci-lint
# FIXME (see https://github.com/rocky/ssa-interp)
# curl -Lo- https://raw.githubusercontent.com/rocky/ssa-interp/HEAD/gub-installer | bash
go get -v -u github.com/motemen/gore/cmd/gore
go get -v -u github.com/stamblerre/gocode
go get -v -u golang.org/x/tools/cmd/godoc
go get -v -u golang.org/x/tools/cmd/goimports
go get -v -u golang.org/x/tools/cmd/gorename
go get -v -u golang.org/x/tools/cmd/guru
go get -v -u github.com/cweill/gotests/...
go get -v -u github.com/fatih/gomodifytags
#+end_src

** haskell [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.haskell.org/][Haskell]] support, powered by either [[https://github.com/jyp/dante][dante]] (the default) or LSP
(haskell-language-server or ghcide).
#+end_quote

** hy [0/0] :ARCHIVE:
** idris [0/0] :ARCHIVE:
#+begin_quote
This module adds rudimentary Idris support.
#+end_quote

** json [1/1]
#+begin_quote
This module provides JSON support.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/json` module
brew install jq
npm install -g vscode-json-languageserver
#+end_src

** java [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.java.com][java]] support to Doom Emacs, including =android-mode= and
=groovy-mode=.
#+end_quote

** javascript [1/3]
:PROPERTIES:
:CATEGORY: doom/ts
:END:
#+begin_quote
This module adds JavaScript and TypeScript support.
#+end_quote

Currently, I am only using TypeScript -- not vanilla JavaScript -- so the
~:CATEGORY:~ property for this subtree is set to ~doom/ts~.

*** STRT [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/javascript` module
npm install -g typescript javascript-typescript-langserver eslint trepan-ni
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.npmignore\\'" . gitignore-mode))
#+end_src

*** HOLD [#B] Set up debugging
+ Try ~dap-mode~ https://www.youtube.com/watch?v=0bilcQVSlbM
+ Holding until I complete the following: [[*Fix DAP mode error message][Fix DAP mode error message]]

** julia [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://julialang.org/][the Julia language]] to Doom Emacs.
#+end_quote

** kotlin [0/0] :ARCHIVE:
#+begin_quote
This module adds Kotlin support to Emacs.
#+end_quote

** latex [1/1]
#+begin_quote
Provide a helping hand when working with LaTeX documents.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/latex` module
brew install mactex texlab wget
#+end_src

** lean [0/0] :ARCHIVE:
** ledger [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://www.ledger-cli.org/][ledger]] files. Ledger is a command line double-entry
accounting system that works with simple text files holding transactions.
#+end_quote

** lua [0/0] :ARCHIVE:
#+begin_quote
Adds Lua support to Doom Emacs
#+end_quote

** markdown [4/5]
:PROPERTIES:
:CATEGORY: doom/markdown
:END:
#+begin_quote
This module provides Markdown support for Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/markdown` module
npm install -g markdownlint marked
#+end_src

*** DONE [#B] Improve Markdown readability
+ https://emacs.stackexchange.com/questions/3753/prettify-symbols-mode-character-replacement-regex

| Before      | After |
|-------------+-------|
| \\.         | .     |
| \\(         | (     |
| \\)         | )     |
| \\-         | -     |
| &copy       | ©    |
| <a.*>.*</a> |       |

#+begin_src emacs-lisp :tangle yes
(add-to-list 'font-lock-extra-managed-props 'display)
(font-lock-add-keywords
 'markdown-mode
 '(("\\(\\\\\\)[[().-]" 1 '(face nil display ""))
   ("&copy;" 0 '(face nil display "©"))
   ("<a name=\".*\"></a>" 0 '(face nil display ""))))
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.mdx\\'" . markdown-mode))
#+end_src

*** DONE [#B] Preview Markdown buffers in an external browser
Regardless of what I've set ~browse-url-browser-function~ to, I would like to
preview Markdown rendering in the system browser.

#+begin_src emacs-lisp :tangle yes
(after! markdown
  (defun my/markdown-preview (f &rest r)
    (let ((browse-url-browser-function #'browse-url-default-browser))
      (apply f r)))
  (advice-add 'markdown-preview :around #'my/markdown-preview))
#+end_src

*** TODO [#C] Replace =font-lock= hiding with native =markdown-mode= hiding
+ Open link: [[file:~/.config/emacs/.local/straight/repos/markdown-mode/markdown-mode.el::defun markdown-toggle-markup-hiding (&optional arg][(defun markdown-toggle-markup-hiding]]
+ Open link: [[file:~/.config/emacs/.local/straight/repos/markdown-mode/markdown-mode.el::;;; Markup Hiding =============================================================][;;; Markup Hiding]]

** nim [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://nim-lang.org][Nim]] support to Emacs.
#+end_quote

** nix [0/0] :ARCHIVE:
#+begin_quote
Adds many tools for [[https://nixos.org/][Nix(OS)]] users in nice package for Doom users.
#+end_quote

** ocaml [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://ocaml.org/][OCaml]] support to Doom Emacs, powered by [[https://github.com/ocaml/tuareg][tuareg-mode]].
#+end_quote

** org [14/30]
:PROPERTIES:
:CATEGORY: doom/org
:COOKIE_DATA: recursive
:END:
#+begin_quote
This module adds org-mode support to Doom Emacs, along with a number of
adjustments, extensions and reasonable defaults to make it more performant and
intuitive out of the box.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/org` module
brew install gnuplot pandoc graphviz pngpaste
mkdir -p ~/org/roam
#+end_src

*** Document Structure [1/3]
**** DONE [#A] Do not indent headlines
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-hide-leading-stars nil
        org-startup-indented nil
        org-adapt-indentation nil))
#+end_src

**** STRT [#A] Insert new headlines just how I like them
This is mostly done, but I do not want there to be a blank line after drawers or
scheduling information:

+ [ ] ~^:END:$~
+ [ ] ~^\\(?:DEADLINE\\|SCHEDULED\\):~

#+begin_src emacs-lisp :tangle yes
(after! org
  (setcdr (assoc 'heading org-blank-before-new-entry) nil)
  (defun my/org-insert-heading-spacing ()
    "Surround an Org heading with appropriate whitespace.

This is the general idea:

,* A
,* B
Entry content

,** B.1
,** B.2
:PROPERTIES:...

,** B.3
,* C (intentional blank line in entry)

,* D
"
    ;; Delete all blank lines following the heading
    (delete-blank-lines)
    ;; Set spacing appropriately before the heading
    (save-excursion
      (forward-line -1)
      ;; What immediately precedes the heading line?
      (cond
       ;; Another heading line (or same heading at beginning of buffer) => do nothing
       ((org-at-heading-p) t)
       ;; Blank line => squeeze consecutive blank lines
       ((looking-at-p "[[:blank:]]*$") (delete-blank-lines))
       ;; Non-blank non-heading line => insert a blank line before the heading
       (t (forward-line 1) (newline)))))
  (defun my/org-insert-heading-visibility ()
    "Redisplay the previous Org heading.

I cannot figure out where the visibility state is saved, so I
just perform a complete cycle of `org-cycle'."
    (save-window-excursion
      (save-excursion
        (org-previous-visible-heading 1)
        ;; XXX Doom-specific
        (when evil-mode (evil-normal-state))
        (call-interactively #'org-cycle)
        (call-interactively #'org-cycle))))
  (defun my/org-insert-heading-evil-state ()
    "End up with the cursor in 'insert mode' at the end of the Org heading"
    ;; XXX Doom-specific
    (when evil-mode (evil-org-append-line 1)))
  (add-hook! org-insert-heading #'(my/org-insert-heading-spacing
                                   my/org-insert-heading-visibility
                                   my/org-insert-heading-evil-state)))
#+end_src

**** TODO [#C] Create headline sorting function
+ Sort by priority, then by by ~TODO~ keyword
+ Reference ~org-sort-entries~

*** Tables [0/0]
*** Hyperlinks [0/2]
**** TODO [#B] Open specific URLs in specific browsers
Currently not tangled, as it breaks certain functionality.

#+begin_src emacs-lisp :tangle no
(after! browse-url
  (setq browse-url-handlers
        '((".*amazon\\.com.*" . #'browse-url-firefox)
          ("awsapps\\.com" . #'browse-url-chrome))))
#+end_src

For example, the following form will error out:

#+begin_src emacs-lisp :tangle no
(browse-url "https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-privatelink-zones/")
#+end_src

#+begin_quote
browse-url: No suitable browser for URL https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-privatelink-zones/
#+end_quote

**** TODO [#C] Create method to store Org links from =eshell= buffers
Just store the current working directory.

*** Todo Items [2/3]
**** DONE [#A] Inherit priority so that subtasks appear under their parents in the agenda
#+begin_src emacs-lisp :tangle yes
(after! org
  (defun my/org-inherited-priority (s)
    (cond
     ;; Priority cookie in this heading
     ((string-match org-priority-regexp s)
      (* 1000 (- org-priority-lowest
                 (org-priority-to-value (match-string 2 s)))))
     ;; No priority cookie, but already at highest level
     ((not (org-up-heading-safe))
      (* 1000 (- org-priority-lowest org-priority-default)))
     ;; Look for the parent's priority
     (t
      (my/org-inherited-priority (org-get-heading)))))
  (setq org-priority-get-priority-function #'my/org-inherited-priority))
#+end_src

**** DONE [#C] Insert notes into ~:LOGBOOK:~ drawer without logging state changes
#+begin_src emacs-lisp :tangle yes
;; REVIEW See if there is a cleaner way to temporarily set `org-log-into-drawer'
(after! org
  (defun my/org-add-note-advice (f &rest r)
    (let ((restore org-log-into-drawer))
      (setq org-log-into-drawer t)
      (apply f r))
      (setq org-log-into-drawer restore))
  (advice-add 'org-add-note :around #'my/org-add-note-advice))
#+end_src

**** TODO [#C] Create integration between embedded ~TODO~ and project =todo.org=
Something like this Atlassian VS Code plugin:
https://support.atlassian.com/bitbucket-cloud/docs/jira-issues-in-vs-code/

+ Embedded ~TODO~ comments:
  + https://github.com/tarsius/hl-todo
  + ~hl-todo-keyword-faces~
  + ~hl-todo-next~, ~hl-todo-previous~, ~hl-todo-occur~
+ Project =todo.org= list:
  + ~org-capture-templates~
  + ~counsel-projectile-org-capture-templates~
  + ~counsel-projectile-org-capture~
+ Integration with Git:
  + https://github.com/alphapapa/magit-todos
  + ~magit-todos-list~

*** Tags [0/0]
*** Properties and Columns [0/1]
**** TODO [#C] Fix emoji display in Org column mode
:PROPERTIES:
:COLUMNS: %TODO %ITEM %attentive(👂) %diligent(🚜) %inventive(🔧) %astute(🎯) %curious(🔭) %nurturing(💯) %uncompromising(🎖) %visionary(🌎) %daring(🏈) %frugal(💵) %trustworthy(🤝) %probing(🔎) %assertive(☝) %productive(📦)
:END:
| Icon | Property       | Amazon Leadership Principle        |
|------+----------------+------------------------------------|
| 👂   | attentive      | Customer Obsession                 |
| 🚜   | diligent       | Ownership                          |
| 🔧   | inventive      | Invent and Simplify                |
| 🎯   | astute         | Are Right, A Lot                   |
| 🔭   | curious        | Learn and Be Curious               |
| 💯   | nurturing      | Hire and Develop the Best          |
| 🎖   | uncompromising | Insist on the Highest Standards    |
| 🌎   | visionary      | Think Big                          |
| 🏈   | daring         | Bias for Action                    |
| 💵   | frugal         | Frugality                          |
| 🤝   | trustworthy    | Earn Trust                         |
| 🔎   | probing        | Dive Deep                          |
| ☝   | assertive      | Have Backbone; Disagree and Commit |
| 📦   | productive     | Deliver Results                    |

For whatever reason, only the emoji for "uncompromising" and "assertive" are
showing in Org column view when invoked by =C-c C-x C-c= (~org-columns~).
Additionally, the cursor jumps one column to the right when moving to the lines
in the table that contain either of those emoji, somewhat suggesting that they
are one character wider than the others. Unfortunately, when replacing those
"two-character-wide" emoji with alternative "one-character-wide" emoji to
achieve consistent "character width", what happens is that no emoji are
displayed at all.

*** Dates and Times [0/0]
*** Refiling and Archiving [0/1]
**** STRT [#C] Display distinguishable name in refile targets
I've accomplished by goal, but I don't like seeing the entire file path.
Instead, I would like to see the file-level Org tag (e.g. "doom" for this file).

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-refile-use-outline-path 'full-file-path))
#+end_src

*** Capture and Attachments [2/2]
**** DONE [#A] Establish agenda file layout
Relevant variables:
+ ~org-directory~
+ ~org-agenda-files~
+ ~org-attach-directory~
+ ~org-mobile-directory~

| Candidates          | Buffer or File             | Headline          | Text              |
|---------------------+----------------------------+-------------------+-------------------|
| Current buffer      |                            | org: =SPC m .=    | global: =SPC s s= |
| Org buffers         | org: =SPC m ,=             | org: =SPC m /=    |                   |
| Agenda files        | org: =SPC u SPC u SPC m ,= | global: =SPC n S= |                   |
| Org directory files | global: =SPC n f=          |                   | global: =SPC n s= |

The following is a prerequisite for my organization:
#+begin_src sh :tangle no
mkdir -p ~/org
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq
      ;; Top-level directory (used by `+default/find-in-notes', etc.)
      org-directory "~/org"

      ;; Directories to search for agenda files
      my/org-directories `("work" "life" ,doom-private-dir)
      org-agenda-files (mapcar (lambda (f)
                                 (if (file-name-absolute-p f) f
                                   (expand-file-name f org-directory)))
                               `("" ,@my/org-directories))

      ;; Only "todo.org" files hold agenda items
      org-agenda-file-regexp "\\`todo.org\\'")
#+end_src

**** DONE [#B] Remove file links from personal org capture templates
#+begin_src emacs-lisp :tangle yes
(after! org
  (setcar (nthcdr 4 (assoc "t" org-capture-templates)) "* TODO %?") ;; And replace "[ ]"
  (setcar (nthcdr 4 (assoc "n" org-capture-templates)) "* %u %?")
  (setcar (nthcdr 4 (assoc "j" org-capture-templates)) "* %U %?"))
#+end_src

*** Agenda Views [2/4]
**** DONE [#A] Widen the agenda prefix and indent subtasks
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-prefix-format
      '((agenda  . " %i  %l%-16:c%?-12t% s")
        (todo    . " %i  %l%-16:c")
        (tags    . " %i  %l%-16:c")))
#+end_src

**** DONE [#B] Do not display file tags in the agenda
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-hide-tags-regexp "\\`work\\|life\\|doom\\|todo\\'")
#+end_src

**** STRT [#B] Set icons for agenda prefix
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-category-icon-alist
      `(("/inbox\\'"           (,(all-the-icons-faicon     "inbox"      nil nil :height 1.00 :face 'all-the-icons-dred)))
        ;; work/*
        ("\\`work/admin\\'"    (,(all-the-icons-faicon     "fax"        nil nil :height 0.85 :face 'all-the-icons-lred)))
        ("\\`work/oncall\\'"   (,(all-the-icons-faicon     "users"      nil nil :height 0.80 :face 'all-the-icons-lyellow)))
        ("\\`work/cots\\'"     (,(all-the-icons-faicon     "server"     nil nil :height 0.85 :face 'all-the-icons-dorange)))
        ("\\`work/metrics\\'"  (,(all-the-icons-faicon     "eye"        nil nil :height 0.85 :face 'all-the-icons-dmaroon)))
        ("\\`work/infra\\'"    (,(all-the-icons-faicon     "cubes"      nil nil :height 0.65 :face 'all-the-icons-lorange)))
        ("\\`work/sdlc\\'"     (,(all-the-icons-faicon     "pencil"     nil nil :height 0.95 :face 'all-the-icons-orange)))
        ;; life/*
        ("\\`life/family\\'"   (,(all-the-icons-faicon     "heart"      nil nil :height 0.85 :face 'all-the-icons-red)))
        ("\\`life/money\\'"    (,(all-the-icons-faicon     "money"      nil nil :height 0.80 :face 'all-the-icons-dgreen)))
        ("\\`life/tech\\'"     (,(all-the-icons-faicon     "laptop"     nil nil :height 0.80 :face 'all-the-icons-dsilver)))
        ;; doom/*
        ("\\`doom/upstream\\'" (,(all-the-icons-alltheicon "git"        nil nil :height 0.85 :face 'all-the-icons-lred)))
        ("\\`doom/config\\'"   (,(all-the-icons-fileicon   "emacs"      nil nil :height 0.85 :face 'all-the-icons-purple)))
        ("\\`doom/org\\'"      (,(all-the-icons-fileicon   "org"        nil nil :height 0.90 :face 'all-the-icons-lgreen)))
        ("\\`doom/markdown\\'" (,(all-the-icons-octicon    "markdown"   nil nil :height 0.85 :face 'all-the-icons-maroon)))
        ("\\`doom/yaml\\'"     (,(all-the-icons-faicon     "cogs"       nil nil :height 0.80 :face 'all-the-icons-lsilver)))
        ("\\`doom/python\\'"   (,(all-the-icons-alltheicon "python"     nil nil :height 0.85 :face 'all-the-icons-dblue)))
        ("\\`doom/ts\\'"       (,(all-the-icons-fileicon   "typescript" nil nil :height 0.85 :face 'all-the-icons-blue)))
        ("\\`doom/term\\'"     (,(all-the-icons-faicon     "terminal"   nil nil :height 0.95 :face 'all-the-icons-dgreen)))
        ("\\`doom/misc\\'"     (,(all-the-icons-fileicon   "config"     nil nil :height 0.85 :face 'all-the-icons-lblue)))))
#+end_src

**** TODO [#C] Display weekly/daily agenda view properly
+ https://www.reddit.com/r/orgmode/comments/6ybjjw/aligned_agenda_view_anyway_to_make_this_more/
+ IIRC, this is called the "fancy diary"

*** Markup for Rich Contents [1/3]
**** DONE [#C] Maintain proper spacing of footnotes
I had to override the ~org-footnote-sort~ function to *not* insert a leading
~\n~ before new footnote definitions.

#+begin_src emacs-lisp :tangle yes
(after! org
  (defun my/org-footnote-sort ()
    "Rearrange footnote definitions in the current buffer.
Sort footnote definitions so they match order of footnote
references.  Also relocate definitions at the end of their
relative section or within a single footnote section, according
to `org-footnote-section'.  Inline definitions are ignored."
    (let ((references (org-footnote--collect-references)))
      (org-preserve-local-variables
       (let ((definitions (org-footnote--collect-definitions 'delete)))
         (org-with-wide-buffer
          (org-footnote--clear-footnote-section)
          ;; Insert footnote definitions at the appropriate location,
          ;; separated by a blank line.  Each definition is inserted
          ;; only once throughout the buffer.
          (let (inserted)
            (dolist (cell references)
              (let ((label (car cell))
                    (nested (not (nth 2 cell)))
                    (inline (nth 3 cell)))
                (unless (or (member label inserted) inline)
                  (push label inserted)
                  (unless (or org-footnote-section nested)
                    ;; If `org-footnote-section' is non-nil, or
                    ;; reference is nested, point is already at the
                    ;; correct position.  Otherwise, move at the
                    ;; appropriate location within the section
                    ;; containing the reference.
                    (goto-char (nth 1 cell))
                    (org-footnote--goto-local-insertion-point))
                  (insert (or (cdr (assoc label definitions))
                              (format "[fn:%s] DEFINITION NOT FOUND." label))
                          "\n"))))
            ;; Insert un-referenced footnote definitions at the end.
            (pcase-dolist (`(,label . ,definition) definitions)
              (unless (member label inserted)
                (insert definition "\n")))))))))
  (advice-add 'org-footnote-sort :override #'my/org-footnote-sort))
#+end_src

**** HOLD [#C] Allow 5 lines of emphasized text
This appears to cause freezes. For now, I'll get by without.

#+begin_src emacs-lisp :tangle no
(after! org
  (setcar (nthcdr 4 org-emphasis-regexp-components) 4))
#+end_src

**** TODO [#C] Ignore surrounding tildes for interactive help functions
Doom's org markup convention is to surround elisp symbols with tildes. However,
this makes it difficult to use commands such as ~counsel-describe-variable~
(=SPC h v=), ~counsel-describe-function~ (=SPC h f=), and ~find-function~
(custom-mapped to =C-h C-f=) for symbols under point.

The current workaround is to select the "object" under point using =v i e= and
then use the corresponding help command. This works well enough, but is an
annoying extra step.

*** Exporting [0/0]
*** Publishing [0/0]
*** Working with Source Code [2/2]
**** DONE [#A] Indent source blocks
+ https://emacs.stackexchange.com/a/9483/21977

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0))
#+end_src

**** DONE [#B] Show edit buffer in the current window
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-src-window-setup 'current-window)
  (setq +popup--display-buffer-alist
        (delq (assoc "^\\*Org Src" +popup--display-buffer-alist)
              +popup--display-buffer-alist))
  (when (bound-and-true-p +popup-mode)
    (setq display-buffer-alist +popup--display-buffer-alist)))
#+end_src

*** Miscellaneous [0/1]
**** TODO [#C] Use Org speed keys
Just apply your old configuration.

*** Contrib [2/3]
**** DONE [#C] Add ~ditaa~ JAR path
You need ~ditaa~ installed for this to work:
#+begin_src sh :tangle no
brew install ditaa
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-ditaa-jar-path
      (cond (IS-MAC
             (file-expand-wildcards "/usr/local/Cellar/ditaa/*/libexec/ditaa-*-standalone.jar"))))
#+end_src

**** TODO [#C] Configure screenshot attachment
By default, =+dragndrop= configures =org-download= to store image links as
attachments rather than hyperlinks. Even after searching on the web, I do not
understand what concrete advantages attachments have over hyperlinks besides
offering more management tools. I would rather be consistent and stick with
hyperlinks for now.

#+begin_src emacs-lisp :tangle yes
(setq org-download-method 'directory
      org-download-image-dir "images")
#+end_src

Note that the following keybindings are very helpful:
+ =SPC m a c= (~org-download-screenshot~) takes a new screenshot and attaches it
+ =SPC m a p= (~org-download-clipboard~) attaches an image from the clipboard

**** DONE [#C] Add ~ditaa~ JAR path
You need ~ditaa~ installed for this to work:
#+begin_src sh :tangle no
brew install ditaa
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-ditaa-jar-path
      (cond (IS-MAC
             (file-expand-wildcards "/usr/local/Cellar/ditaa/*/libexec/ditaa-*-standalone.jar"))))
#+end_src

*** Pomodoro [1/3]
**** DONE [#A] Always load =org-pomodoro= :hack:
Would be better to lazy-load this.

#+begin_src emacs-lisp :tangle yes
(require 'org-pomodoro)
#+end_src

**** STRT [#B] Change the chime for =org-pomodoro=
It is obnoxiously loud and shrill. For now, I'm OK with just decreasing the
volume. To do this, the various ~org-pomodoro-*-sound-args~ variables should be
set to whatever command-line options(s) should be passed to
~org-pomodoro-audio-player~ (=/usr/bin/afplay= on macOS).

#+begin_src emacs-lisp :tangle yes
(when (equal org-pomodoro-audio-player "/usr/bin/afplay")
  (let ((args '("-v" "0.125")))
    (setq org-pomodoro-start-sound-args args
          org-pomodoro-finished-sound-args args
          org-pomodoro-overtime-sound-args args
          org-pomodoro-ticking-sound-args args
          org-pomodoro-killed-sound-args args
          org-pomodoro-short-break-sound-args args
          org-pomodoro-long-break-sound-args args)))
#+end_src

**** STRT [#B] Add keybindings for ~org-pomodoro~ and ~org-pomodoro-extend-last-clock~
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
      :localleader
      (:when (featurep! :lang org +pomodoro)
       (:prefix ("c" . "clock")
        "p" #'org-pomodoro
        "P" #'org-pomodoro-extend-last-clock)))
#+end_src

** php [0/0] :ARCHIVE:
#+begin_quote
This module adds support for PHP 5.3+ (including PHP7).
#+end_quote

** plantuml [0/0] :ARCHIVE:
** purescript [0/0] :ARCHIVE:
** python [4/5]
:PROPERTIES:
:CATEGORY: doom/python
:END:
#+begin_quote
Adds Python support to Doom Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/python` module
brew install python
pipx install pylint
pipx install flake8
pipx install pytest
pipx install nose
pipx install pyflakes
pipx install isort
pipx install --include-deps jupyter
npm install -g pyright
#+end_src

*** DONE [#A] Develop and run a simple "Hello World" program
More than a simple "Hello World":
+ [[file:~/src/life/secret-santa/][Secret Santa project]]
+ [[file:~/Documents/org/life/notes.org::*Developing with interpreted languages][Notes for developing with interpreted languages]]

*** DONE [#B] Set up fill column for PEP 8 compliance
#+begin_src emacs-lisp :tangle yes
(add-hook! python-mode
  (setq fill-column 79)
  (display-fill-column-indicator-mode))
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("pylint" . conf-mode))
#+end_src

*** HOLD [#C] Set up debugging
+ Holding until I complete the following: [[*Fix DAP mode error message][Fix DAP mode error message]]

** qt [0/0] :ARCHIVE:
#+begin_quote
This module provides language functionality for [[https://qt.io][Qt]] specific files.
#+end_quote

** racket [0/0] :ARCHIVE:
#+begin_quote
This module provides integration for [[https://github.com/greghendershott/racket-mode][racket-mode]].
#+end_quote

** raku [0/0] :ARCHIVE:
#+begin_quote
This module adds a major mode and flycheck for Raku.
#+end_quote

** rest [0/0]
#+begin_quote
This module adds [[https://en.wikipedia.org/wiki/Representational_state_transfer][REST]] support.
#+end_quote

** rst [0/0]
** ruby [0/0] :ARCHIVE:
#+begin_quote
This module add Ruby and optional Ruby on Rails support to Emacs.
#+end_quote

** rust [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the Rust language and integration for its tools,
e.g. ~cargo~.
#+end_quote

** scala [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.scala-lang.org][scala]] and [[https://www.scala-sbt.org/][sbt]] support to Doom Emacs.
#+end_quote

** sceme [0/0] :ARCHIVE:
#+begin_quote
This module provides an environment for hacking and having fun in scheme. It is
powered by [[https://www.nongnu.org/geiser/geiser_1.html#introduction][geiser]].
#+end_quote

** sh [2/2]
#+begin_quote
This module adds support for shell scripting languages.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/sh` module
brew install bash zsh fish powershell bashdb zshdb shellcheck
npm install -g bash-language-server
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(dolist (re '("/.config/\\(shell\\|bash\\)/.+"
              "\\.cygport\\'"))
  (add-to-list 'auto-mode-alist
               `(,re . shell-script-mode)))
#+end_src

** sml [0/0] :ARCHIVE:
#+begin_quote
This module has no description yet.
#+end_quote

** solidity [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://github.com/ethereum/solidity][Solidity]] support through [[https://github.com/ethereum/emacs-solidity][solidity-mode]]
#+end_quote

** swift [0/0] :ARCHIVE:
** terra [0/0] :ARCHIVE:
** web [1/1]
*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/web` module
brew install tidy-html5
npm install -g js-beautify stylelint
#+end_src

** yaml [6/7]
:PROPERTIES:
:CATEGORY: doom/yaml
:END:
#+begin_quote
This module provides support for the [[https://yaml.org/][YAML file format]].
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/yaml` module
npm install -g yaml-language-server
#+end_src

*** DONE [#A] Set the YAML LSP server to RedHat's implementation
+ https://developers.redhat.com/blog/2017/10/18/yaml-language-server-extension-vs-code/

Every time I try to use LSP with ~yamlls~, this is what I get:
: Server yamlls:4133 status:starting exited with status exit. Do you want to restart it? (y or n)

Got it working. See the ~PREREQ~ lines for the =yaml= module in
=$DOOMDIR/init.el=. Could use some cleanup.

*** DONE [#A] Download the schema definitions if we don't have them already
I /think/ this is working. However, I have a note from my "illiterate" config
saying that the implementation of ~lsp-yaml-download-schema-store-db~ is buggy.

#+begin_src emacs-lisp :tangle yes
(after! lsp-yaml
  (let ((f lsp-yaml-schema-store-local-db))
    (unless (file-exists-p f)
      (mkdir (file-name-directory f) t)
      (lsp-yaml-download-schema-store-db))))
#+end_src

*** DONE [#B] Use CloudFormation YAML schema
I use YAML almost entirely for CloudFormation, so I like to use CloudFormation
YAML schema by default. This involves setting ~lsp-yaml-schemas~ appropriately,
but unfortunately the documentation in that regard is quite lacking. I managed
to get it right mostly by running =M-x lsp-yaml-select-buffer-schema= and then
selecting the correct schema ("AWS CloudFormation") through interactive
completion.

#+begin_src emacs-lisp :tangle yes
(setq lsp-yaml-schemas
      '((https://raw\.githubusercontent\.com/awslabs/goformation/v4\.15\.0/schema/cloudformation\.schema\.json
         . ["*.yaml" "*.yml"])))
#+end_src

Other references:
+ https://github.com/redhat-developer/yaml-language-server#using-yamlschemas-settings
+ Help for ~lsp-yaml-schemas~
+ File referenced by ~lsp-yaml-schema-store-local-db~

*** DONE [#B] Disable LSP syntax checking
Honestly, I don't really need syntax checking from RedHat's YAML language server
when ~cfn-lint~ does a better job. In fact, it appears as though there are false
alarms when using LSP syntax checking (and that's not even counting custom
tags).

#+begin_src emacs-lisp :tangle yes
(setq-hook! 'yaml-mode-hook lsp-diagnostic-package :none)
#+end_src

References:
+ https://github.com/emacs-lsp/lsp-mode/issues/1810
+ [[file:~/.config/emacs/modules/lang/yaml/config.el]]

*** DONE [#A] Integrate ~cfn-lint~ with Flycheck
Again, since I'm only really using YAML for CloudFormation (at the moment), I
feel OK about automatically integrating ~cfn-lint~ into Flycheck for all YAML
files. This fills in the diagnostics gap left by RedHat's YAML language
server implementation and corresponding Emacs mode.

#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (flycheck-define-checker cfn-lint
    "A CloudFormation linter using cfn-lint."
    :command ("cfn-lint" "-f" "parseable" source)
    :error-patterns ((warning line-start (file-name) ":" line ":" column
                              ":" (one-or-more digit) ":" (one-or-more digit) ":"
                              (id "W" (one-or-more digit)) ":" (message) line-end)
                     (error line-start (file-name) ":" line ":" column
                            ":" (one-or-more digit) ":" (one-or-more digit) ":"
                            (id "E" (one-or-more digit)) ":" (message) line-end))
    :modes (yaml-mode))
    (add-to-list 'flycheck-checkers 'cfn-lint))
#+end_src

A better way to do this would probably be through a project mode. (Refer to
~+ansible-yaml-mode~ and ~def-project-mode!~ for more info.) However, when I
tried doing this, I had some errors so decided to back out for now.

Reference:
+ https://awk.space/blog/cfn-lint/

*** HOLD [#C] Add custom CloudFormation tags :TESTME:
This is the sort of thing that should probably be set per schema, but again,
since I pretty much only use YAML for CloudFormation, defining custom tags
globally should be OK. Unfortunately, I can't figure out how to get this to
work. The following subtrees explain what I tried doing. Make sure to view the
*Notes* subtree!

**** List of strings
#+begin_src emacs-lisp :tangle no
(setq lsp-yaml-custom-tags
      '("!Equals sequence"
        "!FindInMap sequence"
        "!GetAtt"
        "!GetAZs"
        "!ImportValue"
        "!Join sequence"
        "!Ref"
        "!Select sequence"
        "!Split sequence"
        "!Sub"))
#+end_src
This causes the following error after opening a YAML file:
: Error processing message (wrong-type-argument symbolp "!Equals sequence").

**** Serialized JSON string
#+begin_src emacs-lisp :tangle no
(setq lsp-yaml-custom-tags
      (json-serialize
       ["!Equals sequence"
        "!FindInMap sequence"
        "!GetAtt"
        "!GetAZs"
        "!ImportValue"
        "!Join sequence"
        "!Ref"
        "!Select sequence"
        "!Split sequence"
        "!Sub"]))
#+end_src
Unfortunately, invalid tags do not appear as Flycheck errors, and the following
error occurs when attempting to complete anything in the YAML buffer with
=C-SPC= (~+company/complete~) in Evil insert state:

: Company: An error occurred in auto-begin
: Company: backend company-capf error "Request textDocument/completion failed with message: customTags.filter is not a function" with args (candidates )

**** Notes
Looks like this is a problem stemming from RedHat's YAML LSP server
implementation, and I might be able to get around it by using a
CloudFormation-specific YAML LSP server (at least until I get around to using
Ansible more). Unfortunately, it looks like there is no such integration with
Emacs, but I've gathered some links on how I might be able to perform the
integration myself.

Reference:
+ https://stackoverflow.com/questions/53470329/aws-sam-yaml-template-unknown-tag-ref
+ https://emacs-lsp.github.io/lsp-mode/page/adding-new-language/
+ https://github.com/aws-cloudformation/aws-cfn-lint-visual-studio-code/blob/master/package.json

** zig [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://ziglang.org/][Zig]] support, with optional (but recommended) LSP support via
[[https://github.com/zigtools/zls][zls]].
#+end_quote

* :email
** mu4e [0/1]
#+begin_quote

This module makes Emacs an email client, using ~mu4e~.
#+end_quote

*** TODO [#B] Set up mu4e with work email
This should probably be done in a separate gitignored file (=custom.el=) for
security's sake.

** notmuch [0/0] :ARCHIVE:
#+begin_quote
This module turns Emacs into an email client using ~notmuch~.
#+end_quote

** wanderlust [0/0] :ARCHIVE:
* :app
#+begin_quote
Application modules are complex and opinionated modules that transform Emacs
toward a specific purpose. They may have additional dependencies and *should be
loaded last*, before =:config= modules.
#+end_quote

** calendar [0/0] :ARCHIVE:
#+begin_quote
This module adds a calendar view for Emacs, with org and google calendar sync
support.
#+end_quote

** emms [0/0] :ARCHIVE:
#+begin_quote
This module enables Emacs to be used as a music player. It uses [[https://www.musicpd.org/][mpd]] as a backend
server and [[https://musicpd.org/clients/mpc/][mpc]] to update your music database.
#+end_quote

** everywhere [0/0] :ARCHIVE:
#+begin_quote
This module adds system-wide popup Emacs windows for quick edits.
#+end_quote

** irc [3/5]
#+begin_quote
This module turns Emacs into an IRC client, capable of OS notifications.
#+end_quote

*** DONE [#A] Install prerequisites
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `app/irc` module
brew install gnutls
#+end_src

*** DONE [#A] Configure =circe= for Libera.Chat
This should probably be done in a separate gitignored file (=custom.el=) for
security's sake.

** rss [0/1]
*** DONE [#B] Find some interesting channels
+ Emacs
  - ~#emacs~
  - ~#org-mode~
  - ~#org-roam~
  - ~#systemcrafters~
  - ~#systemcrafters-help~
+ Linux
  - ~#gnu~
  - ~#linux~
  - ~#fedora~
  - ~#systemd~
  - ~#rpm-ecosystem~
+ Programming
  - ~##programming~
  - ~##typescript~
  - ~#python~
  - ~#bash~
  - ~#git~
+ Infrastructure
  - ~##infra-talk~
  - ~##aws~
  - ~#ansible~
  - ~#docker~
  - ~#networking~

*** TODO [#B] Find an easier way to search for channels
This is my current method of searching:

1. Manually enter the following query in a Circe Server buffer:
   : /msg alis LIST *searchterm*

2. Switch over to the newly-created ~alis@irc.libera.chat~ buffer to view
   results. From there, I can enter simple queries like this:
   : LIST *searchterm*

3. Use =SPC , alis RET= to return to that buffer when I want to perform another
   search. Back and forth...

I would much prefer a single =circe= command to do this rather than that whole
song and dance. See also: https://libera.chat/guides/findingchannels

*** TODO [#C] Figure out how to display inline images
#+begin_quote
Read RSS feeds in the comfort of DOOM (Emacs)
#+end_quote

*** STRT [#A] Automatically update feed when opening =elfeed=
#+BEGIN_SRC emacs-lisp :tangle yes
(after! elfeed
  (add-hook! 'elfeed-search-mode-hook #'elfeed-update))
#+END_SRC

** twitter [0/0] :ARCHIVE:
#+begin_quote
Enjoy twitter from emacs.
#+end_quote

* :config
#+begin_quote
Modules that configure Emacs one way or another, or focus on making it easier
for you to customize it yourself. It is best to load these last.
#+end_quote

** literate [1/4]
#+begin_quote
This module enables support for a literate config.
#+end_quote

*** DONE [#A] Disable tangle upon save
It just takes too long. 🙁

#+begin_src emacs-lisp :tangle yes
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

*** TODO [#B] Tangle to =packages.el=
I would like to make =packages.el= literate instead of "illiterate". 😉

*** TODO [#C] Link tangled blocks back to source
Refer to your old config.

*** HOLD [#C] Split up my literate config into separate files
+ [[file:~/.config/emacs/modules/config/literate/README.org::*Modularizing your literate config with ~#+INCLUDE~ directives][Modularizing your literate config with ~#+INCLUDE~ directives]]

Doing so might make tangling faster, but currently I don't have any problems
with performance. If and when I start to notice a problem, I'll revisit this
item.

** default [6/9]
#+begin_quote
This module provides a set of reasonable defaults.
#+end_quote

*** DONE [#A] Disable smartparens in the minibuffer, including the ~evil-ex~ prompt
According to the documentation, each mode listed in ~sp-ignore-modes-list~ will
have smartparens disabled when ~smartparens-global-mode~ is active. However,
this does not appear to be functioning properly, at least for
~minibuffer-inactive-mode~, so I get around this by overriding all the pair
insertion rules for that specific mode.

#+begin_src emacs-lisp :tangle yes
(after! smartparens
  (let* ((default-pairs (cdr (assoc t sp-pairs)))
         (default-openers (mapcar (lambda (pair) (plist-get pair :open))
                                  default-pairs)))
    (dolist (opener default-openers)
      (sp-local-pair 'minibuffer-inactive-mode opener nil :actions nil))))
#+end_src

*** DONE [#A] Adjust ~which-key~ timing
The default delay of 1 second is too long for my taste.

#+begin_src emacs-lisp :tangle yes
(setq which-key-idle-delay 0.5
      which-key-idle-secondary-delay 0.1)
#+end_src

*** DONE [#A] Improve builtin help
In order to increase discoverability of keybindings, I created a function for
describing where all invocations of a key sequence is.

#+begin_src emacs-lisp :tangle yes
(defun my/alternate-keys (key &optional insert)
  "Print message listing equivalent alternate key sequences for KEY.
KEY is a pair (SEQ . RAW-SEQ) of key sequences, where
RAW-SEQ is the untranslated form of the key sequence SEQ.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.
While reading KEY interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them."
  (interactive
   ;; Ignore mouse movement events because it's too easy to miss the
   ;; message while moving the mouse.
   (list (car (help--read-key-sequence 'no-mouse-movement)) current-prefix-arg))
  (where-is (cadr (help--analyze-key (car key) (cdr key))) insert))

(define-key! help-map
  "C-f" #'find-function      ;; replaces `view-emacs-FAQ' b/c I rarely use it
  "C-l" #'find-library       ;; replaces `describe-language-environment'
  "C-v" #'find-variable
  "C-w" #'my/alternate-keys) ;; replaces `describe-no-warranty' b/c I never use it
#+end_src

*** DONE [#B] Do not display line numbers in text mode
#+begin_src emacs-lisp :tangle yes
(remove-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

*** DONE [#B] Normalize the behavior of toggling line numbers
~doom/toggle-line-numbers~ is inconsistent with how it cycles through line
numbers, depending on whether the function has been called in the current buffer
yet. I believe this is due to how ~doom--line-number-style~ is assigned ~t~ by
default, yet gets set to ~display-line-numbers-type~ upon the first call of
~doom/toggle-line-numbers~.

I work around this issue by defining my own line-number-toggling function and
aliasing ~doom/toggle-line-numbers~ to it.

#+begin_src emacs-lisp :tangle yes
(defun my/toggle-line-numbers ()
  "Toggle line numbers.

Cycles through regular, relative and no line numbers. If you're
using Emacs 26+, and `visual-line-mode' is on, this skips relative
and uses visual instead."
  (interactive)
  (cond
   ((not display-line-numbers)
    (setq display-line-numbers t)
    (message "Switched to normal line numbers"))
   ((memq display-line-numbers '(visual relative))
    (setq display-line-numbers nil)
    (message "Switched to disabled line numbers"))
   (visual-line-mode
    (setq display-line-numbers 'visual)
    (message "Switched to visual line numbers"))
   (t
    (setq display-line-numbers 'relative)
    (message "Switched to relative line numbers"))))

(define-key! doom-leader-toggle-map
  ;; replaces `doom/toggle-line-numbers'
  "l" #'my/toggle-line-numbers)
#+end_src

*** DONE [#B] Define additional Doom search functions
#+begin_src emacs-lisp :tangle yes
(defun my/doom-help-search-source (&optional initial-input)
  "Perform a text search across all files in `doom-emacs-dir'."
  (interactive)
  (+ivy-file-search
    :query initial-input
    :in doom-emacs-dir
    :prompt (format "Search source for: ")))

(defun my/doom-help-search-modules (&optional initial-input)
  "Perform a text search across all files in `doom-modules-dir'."
  (interactive)
  (+ivy-file-search
    :query initial-input
    :in doom-modules-dir
    :prompt "Search modules for: "))

(define-key! help-map
  "de" #'my/doom-help-search-source
  "dM" #'my/doom-help-search-modules)
#+end_src

*** STRT [#A] Do not auto-insert pairs of quotes
More than half the time, I do not want that behavior.

#+begin_src emacs-lisp :tangle no
(sp-pair "\"" nil :actions :rem)
(sp-pair "'"  nil :actions :rem)
(sp-pair "`"  nil :actions :rem)
#+end_src

*** HOLD [#B] Prevent error related to ~'~ pairs
:LOGBOOK:
- Note taken on [2021-06-25 Fri 13:07] \\
  Cannot reproduce.
:END:
Occasionally this comes up (not sure exactly how to reproduce):
#+begin_example
error in process sentinel: doom--handle-load-error: Error in a Doom module: "modules/config/default/config.el", (error "Pair ' was never defined, please specify closing delimiter in instead of passing ‘nil’")
error in process sentinel: Error in a Doom module: "modules/config/default/config.el", (error "Pair ' was never defined, please specify closing delimiter in instead of passing ‘nil’")
#+end_example

*** STRT [#B] Add additional toggle keybindings
#+begin_src emacs-lisp :tangle yes
;; Function to toggle 1 or 2 spaces at the end of sentences
(defun my/toggle-sentence-end-double-space ()
  (interactive)
  (if (not sentence-end-double-space)
      (progn
        (setq-local sentence-end-double-space t)
        (message "Sentences end with 2 spaces"))
    (setq-local sentence-end-double-space nil)
    (message "Sentences end with 1 space")))

;; REVIEW See if there is a better way to do this (e.g. with `map!' or a custom macro)
(define-key! doom-leader-toggle-map
  "a" #'auto-fill-mode
  "B" #'display-battery-mode
  "c" #'display-fill-column-indicator-mode
  "C" #'column-highlight-mode
  "h" #'use-hard-newlines
  "L" #'hl-line-mode
  "o" #'overwrite-mode
  "p" #'page-break-lines-mode
  "t" #'toggle-truncate-lines
  "|" #'visual-fill-column-mode
  "." #'my/toggle-sentence-end-double-space
  "SPC" #'whitespace-mode)
(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`%s t a\\'" prefix-re)) nil . "Auto fill")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t B\\'" prefix-re)) nil . "Battery indicator")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t c\\'" prefix-re)) nil . "Fill column indicator")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t C\\'" prefix-re)) nil . "Column highlight")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t h\\'" prefix-re)) nil . "Hard newlines")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t L\\'" prefix-re)) nil . "Line highlight")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t o\\'" prefix-re)) nil . "Overwrite")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t p\\'" prefix-re)) nil . "Page break lines")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t t\\'" prefix-re)) nil . "Truncate lines")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t |\\'" prefix-re)) nil . "Visual fill column")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t \\.\\'" prefix-re)) nil . "Sentence spacing")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`%s t SPC\\'" prefix-re)) nil . "Whitespace mode")
                which-key-replacement-alist)))
#+end_src

* Miscellany
:PROPERTIES:
:CATEGORY: doom/misc
:END:
** emacs
*** DONE [#A] Enable all disabled commands
#+begin_src emacs-lisp :tangle yes
(setq disabled-command-function nil)
#+end_src

*** DONE [#A] Configure native compilation
#+begin_src emacs-lisp :tangle yes
(when (and (featurep 'nativecomp)
           (native-comp-available-p))
  (setq comp-speed 2
        package-native-compile t))
#+end_src

The conditional was taken from ~comp-ensure-native-compiler~, which was /not/
used for two reasons:

1. The =comp= package defines ~comp-ensure-native-compiler~, but I don't know
   when the =comp= package is loaded. However, ~featurep~ and
   ~native-comp-available-p~ are both C constructs.
2. Rather than return ~t~ when native compilation is built-in and available,
   ~comp-ensure-native-compiler~ always returns ~nil~ and just spits an error
   in the negative case.

*** DONE [#C] Don't prompt about killing running processing when quitting
#+begin_src emacs-lisp :tangle yes
(setq confirm-kill-processes nil)
#+end_src

*** TODO [#B] Always trust file-location and directory-local variables
At least for all files in allowed paths (e.g. my source code).

*** TODO [#B] Figure out the autosave and backup situation for Doom Emacs
Compare with my old config and try to match it.

*** TODO [#C] Suppress warning for ~Package cl is deprecated~
https://github.com/hlissner/doom-emacs/issues/3372

** editor
*** DONE [#A] Configure line-feed behavior
#+begin_src emacs-lisp :tangle yes
;; Display ^L characters as horizontal lines
(use-package! page-break-lines
  :config (global-page-break-lines-mode))

;; Have C-l send the current line to the top of the window
(setq recenter-positions '(top bottom middle))

;; Perform a line feed after jumping to a ^L character
(defun my/recenter-top (&rest r) (recenter 0))
(advice-add 'forward-page :after #'my/recenter-top)
#+end_src

*** STRT [#B] Truncate lines by default
This doesn't appear to be working...

#+begin_src emacs-lisp :tangle yes
(setq-default truncate-lines t)
#+end_src

*** DONE [#C] Allow easy input of accented and special characters via =C-\=
#+begin_src emacs-lisp :tangle yes
(setq default-input-method "latin-postfix")
#+end_src

** ui
*** DONE [#B] Dedicate windows
#+begin_src emacs-lisp :tangle yes
(defun my/toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another
buffer in current window."
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "%s: Can't touch this!"
     "%s is up for grabs.")
   (current-buffer)))

(define-key! evil-window-map
  ;; replaces `+workspace/close-window-or-workspace'
  "d" #'my/toggle-window-dedicated)
#+end_src

*** DONE [#C] Keep icons small by default
#+begin_src emacs-lisp :tangle yes
(setq all-the-icons-scale-factor 1.0)
#+end_src

*** DONE [#C] Don't suggest abbreviations for long command names
#+begin_src emacs-lisp :tangle yes
(setq extended-command-suggest-shorter nil)
#+end_src

** config
*** STRT [#B] Remove =straight= package repos from =projectile=
Unfortunately, the =~/.config/emacs/.local/straight/repos/*= are creeping back
in, so this isn't finished yet.

#+begin_src emacs-lisp :tangle yes
;; REVIEW See if there is a cleaner way to flatten the `mapcan' list result
(after! projectile
  (eval
   `(pushnew!
     projectile-globally-ignored-directories
     ,@(mapcan
        (lambda (f)
          (when (file-directory-p f)
            (list (abbreviate-file-name f))))
        (directory-files (format "%s/.local/straight/repos" doom-emacs-dir)
                                   t "\\`[^.]")))))
#+end_src

*** TODO [#C] Figure out how to use ~projectile-edit-dir-locals~ (=SPC p e=)
https://www.emacswiki.org/emacs/SkeletonMode

*** TODO [#C] Replace =C-?= with backspace
We already have =C-r=, so might as well replace this mostly-useless keybinding.

*** DONE [#A] Load custom config if present
=~/.config/doom/custom.el= should look something like this:

#+begin_src emacs-lisp :tangle no
;;; Manual

;; Identifying information
(setq user-full-name "John Doe"
      user-mail-address "johndoe@example.com")

;; Geographic location
(setq calendar-latitude 35.0933
      calendar-longitude -98.2632
      calendar-location-name "Nowhere, OK")

;; RSS feeds
(setq elfeed-feeds
      '("https://example.com/rss.xml"))

;; Spotify (see https://developer.spotify.com/my-applications)
;; Could also use `auth-source' library to retrieve the credentials
(setq counsel-spotify-client-id "00000000000000000000000000000000"
      counsel-spotify-client-secret "00000000000000000000000000000000")

;; IRC
(set-irc-server! "irc.libera.chat"
  `(:tls t
    :port 6697
    :nick "johndoe"
    :sasl-password (auth-source-pick-first-password
                    :host "libera.chat"
                    :user "johndoe")
    :channels ("#emacs"
               "#")))

;;; Customize
#+end_src

#+begin_src emacs-lisp :tangle yes
(load! "custom" doom-private-dir t)
#+end_src
