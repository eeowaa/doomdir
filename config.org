#+TITLE: Doom Emacs Literate Config
#+STARTUP:      overview
#+FILETAGS:     :doom:
#+EXCLUDE_TAGS: SCAFFOLDING ARCHIVE noexport
* Headers :SCAFFOLDING:hack:
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)
#+end_src

#+begin_src emacs-lisp :tangle early-init.el
;; HACK With Doom Emacs moving away from `use-package', the `use-package-hook!'
;; macro is now defined in $EMACSDIR/modules/config/use-package/init.el.
;; Unfortunately, this isn't early enough in the startup sequence for the
;; `use-package-hook!' to be used as intended (in $DOOMDIR/init.el), so I
;; redefine it at the start of $DOOMDIR/early-init.el.
(defmacro use-package-hook! (package when &rest body)
  "Reconfigures a package's `use-package!' block.

This macro must be used *before* PACKAGE's `use-package!' block. Often, this
means using it from your DOOMDIR/init.el.

Under the hood, this uses use-package's `use-package-inject-hooks'.

PACKAGE is a symbol; the package's name.
WHEN should be one of the following:
  :pre-init :post-init :pre-config :post-config

WARNINGS:
- The use of this macro is more often than not a code smell. Use it as last
  resort. There is almost always a better alternative.
- If you are using this solely for :post-config, stop! `after!' is much better.
- If :pre-init or :pre-config hooks return nil, the original `use-package!''s
  :init/:config block (respectively) is overwritten, so remember to have them
  return non-nil (or exploit that to overwrite Doom's config)."
  (declare (indent defun))
  (unless (memq when '(:pre-init :post-init :pre-config :post-config))
    (error "'%s' isn't a valid hook for use-package-hook!" when))
  `(progn
     (setq use-package-inject-hooks t)
     (add-hook ',(intern (format "use-package--%s--%s-hook"
                                 package
                                 (substring (symbol-name when) 1)))
               (lambda () ,@body)
               'append)))
#+end_src

#+begin_src emacs-lisp :tangle cli.el
;;; DOOMDIR/cli.el -*- lexical-binding: t; -*-

(defcli-group! "Demos"
  :docs "Demonstrations of basic Doom CLI functionality"

  (defcli! echo-hello ()
    "Say \"hello world\" by calling out to echo."
    ;; FIXME This now produces an error trace
    (throw 'exit (list "echo" "hello world")))

  (defcli! print-hello ()
    "Say \"hello world\" by evaluating print!."
    (print! "hello world")))

(defcli-group! "Personal"
  :docs "My own custom Doom CLI commands"

  (defcli! checkout-main ()
    "Checkout main branch for each repo managed by straight."
    ;; FIXME This (probably) now produces an error trace
    (throw 'exit `(,(concat
                     (file-name-as-directory
                      (expand-file-name "bin" doom-user-dir))
                     "doom-checkout-main")))))
#+end_src

* Miscellany
** Use Emacs version 28.2 [2/2]
*** OKAY macOS
#+begin_src sh :tangle install/macos.sh
#!/bin/sh

cat >&2 <<EOF
WARNING: If installed by a package manager, Emacs might not be pinned at a
specific version (Doom has no knowledge of whether this is the case). System
package updates may upgrade Emacs, resulting in:

  1. Potential package breakages
  2. Potential configuration breakages
  3. The need to run \`doom build'

,*** Use caution when performing system updates! ***
EOF
#+end_src

*** DONE Fedora
Reference: https://unix.stackexchange.com/a/657797

#+begin_src sh :tangle install/fedora.sh
#!/bin/sh

# Lock Emacs at version 28.2 using DNF
target_version=28.2
sudo dnf -y install 'dnf-command(versionlock)'
sudo ed /etc/dnf/plugins/versionlock.list <<EOF
/^emacs-1:/d
\$a
emacs-1:$target_version-*
.
wq
EOF
[ "X$target_version" = "X$actual_version" ] || cat >&2 <<EOF
WARNING: Incorrect Emacs version (using $actual_version, want $target_version)
EOF
#+end_src

** Install prerequisites [2/2]
:PROPERTIES:
:header-args: :noweb yes
:END:
#+name: github_binary_release
#+begin_src sh :exports none
github_binary_release() {
    local func='github_binary_release'
    local repo= asset= prefix= root= binary=
    while [ $# -gt 0 ]
    do
        case $1 in
        --repo)
            # A "<user>/<repo>" string to identify a GitHub repo
            repo=$2 ;;
        --asset)
            # An anchored regular expression used by `jq` for a named tarball
            asset=$2 ;;
        --prefix)
            # Directory to pass to `tar -C`
            prefix=$2 ;;
        --path)
            # Directory path within the tarball to the data root
            # NOTE: This variable cannot be named `path` due to conflict with ZSH
            root=$2 ;;
        --binary)
            # Path relative to the data root to the executable file
            binary=$2 ;;
        esac
        shift; shift
    done
    for arg in "$repo" "$asset" "$prefix" "$root" "$binary"
    do
        [ "X$arg" = X ] && {
            echo >&2 "ERROR: $func: missing argument"
            return 1
        }
    done
    local url=`
        curl -s https://api.github.com/repos/$repo/releases/latest | jq -r \
        '.assets[] | select(.name | test("^'"$asset"'$")) | .browser_download_url'
    `
    [ "X$url" = X ] && {
        echo >&2 "ERROR: $func: could not find URL"
        return 1
    }
    local canonical_path=`readlink -m "$prefix/$root"`
    [ -e "$canonical_path" ] && {
        printf "\
$func: found existing: $canonical_path
$func: (recursively) delete? [y/N]: "
        read delete
        case $delete in
        [yY]*)
            rm -rf "$canonical_path" ;;
        ,*)  echo >&2 "ERROR: $func: refusing to download"
            return 1 ;;
        esac
    }
    mkdir -p "$prefix" "$HOME/.local/bin"
    curl -Lo- "$url" | tar -C "$prefix" -xzf -
    [ -x "$canonical_path/$binary" ] || {
        echo >&2 "ERROR: $func: not an executable file: $canonical_path/$binary"
        return 1
    }
    ln -sf "$canonical_path/$binary" "$HOME/.local/bin"
}
#+end_src

*** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install Homebrew to install system packages
curl -Lo- https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash

# Install NVM to install Node.js packages
curl -Lo- https://raw.githubusercontent.com/nvm-sh/nvm/HEAD/install.sh \
    | env PROFILE=/dev/null bash

# Function to install a binary asset from the latest release of a GitHub repo
brew install jq
<<github_binary_release>>
#+end_src

*** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Obtain Emacs source code corresponding to installed RPM
(
    # Create ~/rpmbuild directory tree
    sudo dnf -y install rpmdevtools
    rpmdev-setuptree

    # Download Emacs source RPM into ~/rpmbuild/SRPMS
    cd "`rpm --eval '%{_srcrpmdir}'`"
    sourcerpm=`rpm -q --qf '%{sourcerpm}' emacs`
    [ -f "$sourcerpm" ] || dnf download emacs --source

    # Install Mock to silence rpmbuild warnings (though we'll use rpmbuild directly)
    # <https://unix.stackexchange.com/questions/459384/how-to-eliminate-the-warnings-mockbuild-does-not-exist>
    sudo dnf -y install mock
    grep -q '^mockbuild:' /etc/passwd || sudo useradd -r mock
    sudo usermod -G mock mockbuild
    sudo usermod -aG mock `whoami`

    # Unpack sources and apply patches
    sudo dnf -y install rpm-build
    rpmbuild -rp "$sourcerpm"

    # Install build dependencies
    sudo dnf -y builddep --srpm "$sourcerpm"

    # Configure sources to match the installed Emacs package
    version=`rpm -q --qf '%{version}' emacs`
    srcdir=`rpm --eval '%{_builddir}'`/emacs-$version
    flags=`command emacs -Q --batch --eval "\
    (let ((text-quoting-style 'straight))
      (message system-configuration-options))" 2>&1`
    cd "$srcdir"
    eval "./configure $flags"

    # NOTE Unfortunately the spec file does not have a %conf stage. It just has
    # one big %build stage that unconditionally configures and compiles multiple
    # builds of Emacs corresponding to different emacs-* packages. The above
    # script block just configures a single build of Emacs, specifically the one
    # in use, and does not compile anything.

    # Symlink Emacs source tree to platform-independent source directory
    mkdir -p ~/.local/src/emacs && cd ~/.local/src/emacs
    ln -sf "$srcdir" .
)

# Install openssh-askpass to install Elisp packages
sudo dnf -y install openssh-askpass

# Install NVM to install Node.js packages
curl -Lo- https://raw.githubusercontent.com/nvm-sh/nvm/HEAD/install.sh \
    | env PROFILE=/dev/null bash

# Install pipx to install Python packages
sudo dnf -y install pipx

# Function to install a binary asset from the latest release of a GitHub repo
sudo dnf -y install jq
<<github_binary_release>>
#+end_src

** Elisp setup [4/4]
*** DONE [#A] Add =$DOOMDIR/lisp= to ~load-path~
References:
+ [[id:fb9fd833-7379-41f0-9cfe-d86baef3095e][Using/loading local packages]]
+ [[id:2cef25eb-e326-439e-ab3e-82eb65f074db][=autoload/*.el= OR =autoload.el=]]
+ [[info:elisp#Autoload][elisp#Autoload]]

#+begin_quote
[Add] the package's location to Emacs' ~load-path~ (...) if you don't need/care
for autoload cookies or byte-compilation.
#+end_quote

#+begin_src emacs-lisp :tangle yes
(add-load-path! (concat doom-user-dir "lisp"))
#+end_src

*** DONE [#A] Load libraries used by my config
#+begin_src emacs-lisp :tangle yes
(require 'eeowaa-lib)
(require 'xdg)
#+end_src

*** DONE [#A] Load my own local packages
#+begin_src emacs-lisp :tangle yes
(require 'cli-help)
(require 'eeowaa-refresh)

;; NOTE: These are providing nothing of value right now
;; (require 'eeowaa-debug)
;; (require 'eeowaa-project)

(when initial-window-system
  (require 'transient-childframe)
  (when (modulep! :tools magit)
    (after! magit
      ;; Revert Doom's configuration
      (setq transient-display-buffer-action
            (tc-transient-childframe--display-buffer-action)))))
#+end_src

* :input
** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :input
#+end_src

** Miscellany [1/1]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#C] Allow easy input of accented and special characters via =C-\= :tweak:
#+begin_src emacs-lisp :tangle yes
(setq default-input-method "latin-postfix")
#+end_src

** chinese [0/0] :ARCHIVE:
#+begin_quote
This module adds support for traditional Chinese script by introducing two input
methods: Pinyin and Wubi.
#+end_quote

** japanese [0/0] :ARCHIVE:
#+begin_quote
This module adds support for Japanese script.
#+end_quote

** layout [0/0] :ARCHIVE:
#+begin_quote
This module provides barebones support for using Doom with non-qwerty layouts.
#+end_quote

* :completion
#+begin_quote
Modules that provide new interfaces or frameworks for completion, including code
completion.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :completion
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** company [6/10]
#+begin_quote
This module provides code completion, powered by [[https://github.com/company-mode/company-mode][company-mode]]. It is required
for code completion in many of Doom's :lang modules.
#+end_quote

*** DONE [#A] Do not use =company-box= in TTY Emacs :bug:
Tangle to =early-init.el=:
#+begin_src emacs-lisp :tangle early-init.el
(unless initial-window-system
  (use-package-hook! company-box :pre-config nil))
#+end_src

Tangle to =config.el=:
#+begin_src emacs-lisp :tangle yes
(unless initial-window-system
  (remove-hook 'company-mode 'company-box-mode))
#+end_src

*** DONE [#A] Enable echo frontend when disabling ~company-box-mode~ :hack:bug:
With =+childframe=, Doom unconditionally removes
~company-echo-metadata-frontend~ from ~company-frontends~. This is better
implemented as a hook, so that ~company-box-mode~ can be disabled at runtime and
we can still see documentation.

#+begin_src emacs-lisp :tangle yes
(after! company-box
  (cl-pushnew 'company-echo-metadata-frontend company-frontends)
  (add-hook! company-box-mode
    (defun my/company-box-toggles-h ()
      (if company-box-mode
          (delq! 'company-echo-metadata-frontend company-frontends)
        (cl-pushnew 'company-echo-metadata-frontend company-frontends)))))
#+end_src

*** DONE [#A] Ensure that =tab-bar-mode= is disabled in =company-box= frames :bug:
To replicate the bug:

1. Start Emacs with ~tab-bar-mode~ enabled and ~tab-bar-show~ set to ~t~.
2. Invoke completion to create the =company-box= child frame, as well as
   potentially the =company-box-doc= child frame.
3. Exit completion to hide the child frames.
4. Disable ~tab-bar-mode~ and re-enable it.
5. Invoke completion again to display the child frame(s).

*The child frames will be displaying the tab bar.*

The fix is to create the =company-box= child frames using the
~tab-bar-lines-keep-state~ parameter, which is consulted by the ~tab-bar-mode~
activation function. Frames with this parameter will not have their
~tab-bar-lines~ frame parameter updated. Since =company-box= frames are created
with ~tab-bar-lines~ set to 0, this is exactly what we want.

#+begin_src emacs-lisp :tangle yes
(after! company-box
  (add-to-list 'company-box-frame-parameters '(tab-bar-lines-keep-state . t)))
#+end_src

If this ever comes back for some reason, a quick workaround (at least in Doom
Emacs) is to delete the =company-box= child frames so that they will get created
again with ~tab-bar-lines~ set to 0:

#+begin_src emacs-lisp :tangle no
(delete-frame (frame-local-getq company-box-frame))
(delete-frame (frame-local-getq company-box-doc-frame))
#+end_src

*** DONE [#B] Never start completion automatically (require =C-SPC=) :tweak:
#+begin_src emacs-lisp :tangle yes
(setq company-idle-delay nil)
#+end_src

This was born from a desire to prevent autocompletion of ordinary words in Org
buffers, but I decided that I don't really need autocompletion anywhere. The
following are the notes I took when pursuing my original plan:

#+begin_quote
=M-x company-capf= gives ~company-ispell~ as one completion backend in Org
buffers. I guess I'd like to have spelling completion as an option that I could
invoke using =C-SPC= (~+company/complete~), but not something that just pops up
on its own.
#+end_quote

*** DONE [#B] Lower the wait time before displaying documentation :tweak:
With my current workstation setup, a 0.3-second delay feels great.

- It is fast enough that I am not consciously waiting for a documentation popup,
  even when I am scrolling through completion candidates (one by one) to see
  which ones have documentation.

- It is slow enough that when I hold down =C-j= or =C-k= to scroll quickly,
  documentation popups do not produce a flickering effect (popups appearing and
  immediately disappearing when passing by the completion candidate), even at
  the start of when there is a slight delay before repeated keyboard input.

#+begin_src emacs-lisp :tangle yes
(setq company-box-doc-delay 0.3) ;; This feels a bit smoother than no delay
#+end_src

*** DONE [#B] Redisplay visible =company-box-doc= frame when =company-box= frame moves :bug:
This updates the documentation frame position both when scrolling with the mouse
or when running =C-l= in a REPL.

#+begin_src emacs-lisp :tangle yes
(defadvice! my/move-company-box-doc-frame-a (company-box-frame)
  :after #'company-box--update-frame-position
  (when-let ((parent-frame (frame-parent company-box-frame))
             (doc-frame (frame-local-getq company-box-doc-frame parent-frame))
             (_ (frame-visible-p doc-frame)))
    (company-box-doc--set-frame-position doc-frame)))
#+end_src

*** STRT [#C] Quit =company-box= when switching evil states :bug:
:LOGBOOK:
- Note taken on [2023-02-01 Wed 19:58] \\
  This stopped working all of a sudden. Might want to look into
  ~doom-escape-hook~, too.
:END:
Doom has the following configuration for =company=:

#+begin_src emacs-lisp :tangle no
(unless (modulep! +childframe)
  ;; Don't persist company popups when switching back to normal mode.
  ;; `company-box' aborts on mode switch so it doesn't need this.
  (add-hook! 'evil-normal-state-entry-hook
    (defun +company-abort-h ()
      ;; HACK `company-abort' doesn't no-op if company isn't active; causing
      ;;      unwanted side-effects, like the suppression of messages in the
      ;;      echo-area.
      ;; REVIEW Revisit this to refactor; shouldn't be necessary!
      (when company-candidates
        (company-abort)))))
#+end_src

Turns out, we need this for =company-box=, too, so let's add that:

#+begin_src emacs-lisp :tangle yes
(when (modulep! company +childframe)
  (after! company
    (add-hook! 'evil-normal-state-entry-hook
      (defun +company-abort-h ()
        (when company-candidates
          (company-abort))))))
#+end_src

*NOTE*: Could the issue possibly be related to the fact that
~company-box--make-frame~ sets ~after-make-frame-functions~ to ~nil~, removing
~evil-init-esc~? Let's see if the following works:

#+begin_src emacs-lisp :tangle no
(defadvice! my/company-box--make-frame-evil-a (fn &rest args)
  :around #'display-buffer-in-child-frame
  (let ((after-make-frame-functions '(evil-init-esc)))
    (apply fn args)))
#+end_src

Unfortunately, it doesn't seem to make a difference, even after deleting the
=company-box= child frame via ~(delete-frame (company-box--get-frame))~ and
trying again. However, I did notice something interesting: this problem only
appears in some modes, such as ~emacs-lisp-mode~.

*** STRT [#A] Ensure that =company-box-doc= popup frames and their content are fully visible :bug:
There were two issues that I was experiencing:

1. Lines of content in documentation frames did not wrap, so documentation was
   often truncated.
2. Documentation frames would appear on the right side of the completion
   candidates even when there was more room on the left side.

The version of =company-box= used by Doom Emacs is 2 years old, and there have
been recent developments that have fixed both of these issues. I need to unpin
the package for now to get the following updates:

1. A new ~company-box-doc-no-wrap~ option, set to ~nil~ by default (fixes #1).
2. An updated ~company-box-doc--set-frame-position~ function (fixes #2).

#+begin_src emacs-lisp :tangle packages.el
(unpin! (:completion company))
#+end_src

*There is still one more issue*. Documentation frames always appear below point,
even when point is at the bottom of the frame. See the following functions:

- ~company-box--compute-frame-position~
- ~company-box--update-frame-position~

*** TODO [#A] Prevent backtrace windows from opening in =company-box= child frames :bug:
Occasionally, ~company-complete-common~ (=C-SPC=) will produce error messages
like this (originally produced in a buffer with =lsp= enabled):

#+begin_quote
Company: An error occurred in auto-begin
Company: frontend company-box-frontend error "Company: backend (:separate company-capf company-yasnippet) error "Wrong type argument: integer-or-marker-p, nil" with args (match ...)" on command show
#+end_quote

Unfortunately, ~toggle-debug-on-error~ causes the debugger window to open in the
child frame, which is not made visible.

*** TODO [#A] Display doc buffer without =company-box= :feat:
=C-h= is supposed to open a documentation buffer, but that doesn't work for me.
Check ~company-active-map~, ~company-show-doc-buffer~, ~company-doc-buffer~,
~company--electric-do~, and ~company-mode-hook~ (~evil-normalize-keys~).

** helm [0/0] :ARCHIVE:
#+begin_quote
This module provides Helm integration for a variety of Emacs commands, as well as
a unified interface for project search and replace, powered by ripgrep.
#+end_quote

** ido [0/0] :ARCHIVE:
** ivy [2/2] :ARCHIVE:
#+begin_quote
This module provides Ivy integration for a variety of Emacs commands, as well as
a unified interface for project search and replace, powered by [[https://github.com/BurntSushi/ripgrep/][ripgrep]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `completion/ivy` module
brew install ripgrep
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `completion/ivy` module
sudo dnf -y install ripgrep
#+end_src

*** DONE [#A] Make it easier to jump to headlines across Org buffers
#+begin_src emacs-lisp :tangle yes
(setq counsel-org-goto-all-outline-path-prefix 'buffer-name)
#+end_src

** vertico [3/4]
#+begin_quote
This module enhances the Emacs search and completion experience, and also
provides a united interface for project search and replace, powered by [[https://github.com/BurntSushi/ripgrep/][ripgrep]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `completion/vertico` module
brew install ripgrep
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `completion/vertico` module
sudo dnf -y install ripgrep
#+end_src

*** DONE [#B] Find a reference for the symbols in the completing-read buffer :doc:
These symbols are described in the docstring for the function
~marginalia--symbol-class~.

*** OKAY [#A] Prevent Emacs from freezing during ~consult-org-heading~ :bug:
Lately, Emacs will occasionally freeze when searching for headlines in this
buffer using =SPC m .=. I wonder if the recent addition of a ~jupyter-bash~
source block is somehow causing this.

*UPDATE*: The problem is with previewing the buffer position. The following
advice removes the preview, which I am more than OK with to get the base
functionality back:

#+begin_src emacs-lisp :tangle yes
(defadvice! my/consult-org-heading-hide-preview-a (fn &rest args)
  :around #'consult-org-heading
  (let (consult-preview-key)
    (apply fn args)))
#+end_src

References:
- https://github.com/doomemacs/doomemacs/issues/6478
- https://github.com/minad/consult/issues/563
- https://github.com/minad/consult/issues/726

*** TODO [#B] Fix bug with cursor color getting stuck when previewing themes :bug:
When previewing themes with =consult=, sometimes the cursor color gets stuck
(changing themes does not change the cursor color). When this happens, some
themes become ugly or even unusable.

References:
- [[*Tweak the style of the tab bar][Tweak the style of the tab bar]]
- ~consult-theme~ and ~load-theme~ functions
- ~cursor-color~ frame parameter

* :ui
#+begin_quote
Aesthetic modules that affect the Emacs interface or user experience.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :ui
#+end_src

<<<<<<< HEAD
** Miscellany [16/19]
=======
** Miscellany [12/13]
>>>>>>> parent of e628233 (Remove :ui doom module + use ef-themes exclusively)
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Install packages
#+begin_src emacs-lisp :tangle packages.el
(package! col-highlight)
(package! page-break-lines)

;; Collection of themes by prot
(package! ef-themes)

;; More coloration in *info* buffers
(package! info-colors)

;; Vim-like diff
(package! vdiff)
(package! vdiff-magit)
#+end_src

*** DONE [#B] Create and bind window dedication functions :feat:
#+begin_src emacs-lisp :tangle yes
(defun my/dedicate-window-temporarily ()
  "Dedicate the selected window until `display-buffer' is called again."
  (interactive)
  (if-let ((window (selected-window))
           (dedicated (window-dedicated-p window)))
      (message "Window is already dedicated with flag `%s'" dedicated)
    (set-window-dedicated-p window 'until-next-display-buffer)
    (eval (macroexpand-1
           `(add-transient-hook! #'display-buffer :after
              (when (eq (window-dedicated-p ,window) 'until-next-display-buffer)
                (set-window-dedicated-p ,window nil)))))
    (message "Window is dedicated until the next `display-buffer'")))

(defun my/toggle-window-dedicated ()
  "Toggle the current window's `window-dedicated-p' flag.
If the flag is already set, it is set to `nil', otherwise it is
set to `t'. Use with caution in side windows and other windows
with special dedication semantics."
  (interactive)
  (if (set-window-dedicated-p nil (not (window-dedicated-p)))
      (prog1 t (message "Window is strongly dedicated"))
    (prog1 nil (message "Window is no longer dedicated"))))

(define-key! evil-window-map
  ;; replaces `+workspace/close-window-or-workspace'
  "d" #'my/dedicate-window-temporarily
  "D" #'my/toggle-window-dedicated)
#+end_src

*** DONE [#C] Keep icons small by default :tweak:
#+begin_src emacs-lisp :tangle yes
(setq all-the-icons-scale-factor 1.0)
#+end_src

*** DONE [#C] Don't suggest abbreviations for long command names :tweak:
#+begin_src emacs-lisp :tangle yes
(setq extended-command-suggest-shorter nil)
#+end_src

*** DONE [#C] Set the frame title :tweak:
#+begin_src emacs-lisp :tangle yes
;; Mostly stolen from tecosaur's config
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (and (buffer-modified-p) (vimish-tab-force-updating-p))
                         " ◉ %s"
                       "  ●  %s") project-name))))))
#+end_src

*** DONE [#C] Start Emacs with a maximized frame :tweak:
#+begin_src emacs-lisp :tangle yes
(setf (alist-get 'fullscreen initial-frame-alist) 'maximized)
#+end_src

*** DONE [#C] Configure =col-highlight= :tweak:module:
#+begin_src emacs-lisp :tangle yes
(after! col-highlight
  (require 'hl-line)
  (eeowaa-use-face col-highlight hl-line))
#+end_src

*** DONE [#C] Configure =info-colors= :tweak:module:
Taken from tecosaur's configuration.

#+begin_src emacs-lisp :tangle yes
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src

*** DONE [#C] Highlight trailing whitespace where appropriate :tweak:
#+begin_src emacs-lisp :tangle yes
(after! whitespace
  (require 'flycheck)
  (eeowaa-use-face whitespace-trailing flycheck-error))

(defvar my/show-trailing-whitespace t)
(defvar my/trailing-whitespace-mode-alist
  '((rfc-mode . nil)
    (x509-asn1-mode . nil)

    ;; Trailing tabs are fine
    (tsv-mode . "\\( +\\)$")

    ;; Two trailing spaces are fine, but no other kind of trailing whitespace
    (markdown-mode . "\\S-\\( \\| \\{3,\\}\\|\\s-*\t\\s-*\\)$")))

(defun my/show-trailing-whitespace-maybe-h ()
  (let* ((element (cl-some (lambda (e)
                             (when (derived-mode-p (car-safe e)) e))
                           my/trailing-whitespace-mode-alist))
         (value (if (consp element)
                    (cdr element)
                  my/show-trailing-whitespace)))
    (when value
      (when (stringp value)
        (setq-local whitespace-trailing-regexp value))
      (cl-pushnew 'trailing whitespace-style)
      (whitespace-turn-on))))

(add-hook 'whitespace-mode-hook
          #'my/show-trailing-whitespace-maybe-h)
#+end_src

*** DONE [#C] Prevent translation of quote characters into curved quotes :tweak:
The curved quotes do not copy/paste well and are not representative of the
original text, even though they might look a little better. Let's disable them:

#+begin_src emacs-lisp :tangle yes
(setq text-quoting-style 'grave)
#+end_src

*** DONE [#C] Display raw bytes in hexadecimal instead of octal
#+begin_src emacs-lisp :tangle yes
(setq display-raw-bytes-as-hex t)
#+end_src

*** DONE [#C] Display line continuation characters in TTY Emacs
#+begin_src emacs-lisp :tangle yes
(unless initial-window-system
  (setq-default wrap-prefix "↪ "))
#+end_src

*** STRT [#B] Configure =vdiff= :feat:module:
See also: [[file:~/.config/emacs/.local/straight/repos/evil-collection/modes/vdiff/evil-collection-vdiff.el][evil-collection-vdiff]]

#+begin_src emacs-lisp :tangle yes
;; Automatically highlight differences in hunks, down to the symbol.
;;
;; FIXME Highlighting for an added line spills over to the first character of
;; the other buffer.
;;
(setq vdiff-auto-refine t
      vdiff-default-refinement-syntax-code "w_")

(after! vdiff
  ;; Do not highlight lines in `vdiff-mode'.
  (add-hook! 'vdiff-mode-hook :append (hl-line-mode -1))

  ;; Use `C-l' to immediately update the diff (otherwise, just wait
  ;; `vdiff--after-change-refresh-delay' seconds).
  (setq-hook! 'vdiff-mode-hook
    revert-buffer-function (lambda (&rest _) (vdiff-refresh))
    eeowaa-refresh-force t)

  ;; Bind `vdiff-mode-prefix-map' to a convenient key.
  ;;
  ;; FIXME Use one of Doom's idiomatic key binding mechanisms for better
  ;; integration with leader keys (e.g. M-SPC in insert state) and which-key.
  ;;
  (evil-define-key 'normal vdiff-mode-map (kbd "SPC v") vdiff-mode-prefix-map)
  (evil-define-key 'normal vdiff-3way-mode-map (kbd "SPC v") vdiff-mode-prefix-map))

;; TODO Bind `vdiff-magit' command to a transient key in magit. For the time
;; being, just use `M-x vdiff-magit RET' to open the transient.
(after! magit
  (require 'vdiff-magit))

;; TODO Integrate vdiff folding with `:editor fold'.

;; TODO Integrate vdiff window configuration with `:ui workspaces' (reference
;; how Doom configures `ediff' for this).

;; TODO Configure `vdiff-3way-mode', `vdiff-magit-resolve', and
;; `vdiff-magit-compare' to work similarly to my git-vimdiff shell script.
#+end_src

** buffer-group [4/5] :eeowaa:
#+begin_quote
Doom's way of handling windows (through =:ui popup=) is too magical for my
liking and forces a specific way of doing things. I've never been able to get
things working the way I'd like. Thus, I've created a custom module based on
grouping buffers by name and mode, and then applying display rules to those
buffer groups.
#+end_quote

*** COMMENT Reference
+ info:elisp#Windows
+ [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Mastering Emacs blog]]
+ [[https://e17i.github.io/articles-emacs-display-1/][e17i blog]]
+ [[https://github.com/e17i/emacs-config/][e17i config]]

**** ~display-buffer-alist~ conditions
The key of each entry in ~display-buffer-alist~ is a condition that matches a
buffer. The condition is either a regular expression matching a buffer name, or
a predicate function taking two arguments: a buffer name and an action. The
documentation doesn't do a great job of explaining how the action argument
works, so I read the source code to find out.

If ~display-buffer~ was called with an ~ACTION~ argument, it gets passed through
to ~display-buffer-alist~ predicates; otherwise, nil gets passed. Recall that
the ~ACTION~ argument of ~display-buffer~ has a lower precedence than the
~ACTION~ of a matching ~display-buffer-alist~ entry; however, this may not
always be desirable. By examining the ~ACTION~ argument of ~display-buffer~, a
~display-buffer-alist~ predicate may decide to return nil when it would have
otherwise returned non-nil.

Ultimately, this gives authors of ~display-buffer-alist~ predicates a handy tool
for cooperating with packages that have special window management requirements.
A package may call ~display-buffer~ with an ~ACTION~ argument containing special
functions and/or alist entries. A predicate can check for the presence of these
cues and handle them accordingly.

**** ~display-buffer~ action functions
- Window content
  + display-buffer-reuse-window
  + display-buffer-reuse-mode-window

- Direction
  + display-buffer-below-selected
  + display-buffer-in-direction

- Position
  + display-buffer-at-bottom
  + display-buffer-in-side-window

- Existence
  + display-buffer-pop-up-window
  + display-buffer-use-some-window
  + display-buffer-no-window

- Temporality
  + display-buffer-same-window
  + display-buffer-in-previous-window
  + display-buffer-use-least-recent-window

- Atomic window
  + display-buffer-in-atom-window

- Tab
  + display-buffer-in-tab
  + display-buffer-in-new-tab

- Frame
  + display-buffer-pop-up-frame
  + display-buffer-in-child-frame
  + display-buffer-other-frame
  + display-buffer-use-some-frame

**** EBNF grammar
#+begin_src ebnf
;; Display buffer alist
DISPLAY_BUFFER_ALIST       = open {DISPLAY_BUFFER_ALIST_ENTRY || {space}} close .
DISPLAY_BUFFER_ALIST_ENTRY = open CONDITION dot ACTION close .

;; Display buffer condition
CONDITION      = REGEXP | PREDICATE .
REGEXP         = string .
PREDICATE      = symbol .
PREDICATE_ARGS = open BUFFER_NAME space+ ACTION close .
BUFFER_NAME    = string .

;; Display buffer action
ACTION         = open FUNCTIONS dot ALIST close .
FUNCTIONS      = FUNCTION | open {FUNCTION || space+} close .
FUNCTION       = symbol .                            ;; "action function"
FUNCTION_ARGS  = open BUFFER space+ ALIST .
BUFFER         = bufferobj .
ALIST          = open {ALIST_ENTRY || {space}} ")" . ;; "action alist"
ALIST_ENTRY    = open KEY dot VALUE close .
KEY = "inhibit-same-window" | "inhibit-switch-frame" | "reusable-frames"
    | "pop-up-frame-parameters" | "window-height" | "window-width"
    | "preserve-size" | "window-parameters" | "allow-no-window"
    | "body-function" | symbol . ;; by no means an exhaustive list
VALUE = sexp .

;; Literal constructs for lists and cons cells
open  = "(" {space} .
dot   = space+ "." space+ .
close = {space} ")" .

;; Special constructs
space     = ?elisp whitespace character? .
symbol    = ?elisp symbol? .
sexp      = ?elisp s-expression? .
string    = ?elisp string? .
bufferobj = ?elisp buffer object? .
#+end_src

*** DONE [#A] Use full frame height for left and right side windows
#+begin_src emacs-lisp :tangle yes
(setq window-sides-vertical t)
#+end_src

*** DONE [#A] Make ~switch-to-buffer~ respect ~display-buffer-alist~
https://www.masteringemacs.org/article/demystifying-emacs-window-manager

#+begin_src emacs-lisp :tangle yes
(setq switch-to-buffer-obey-display-actions t)
#+end_src

*** DONE [#A] Open buffers in the current window by default
This is cool, but it screws up some nice things that Doom does for Magit
(although eventually, I'd like to fine-tune Magit, as well):

#+begin_src emacs-lisp :tangle no
;; NOTE: Must be the last rule on the list
(add-to-list 'display-buffer-alist '("^[^ ]" display-buffer-same-window) t)
#+end_src

Instead of that, let's try something a bit milder and see how it goes:

#+begin_src emacs-lisp :tangle yes
(setq display-buffer-base-action '((display-buffer-same-window) . nil))
#+end_src

*** DONE [#B] Keep window dividers aligned :tweak:
Sometimes, spliting a window will result in jagged window placement, just a few
pixels off. This can cause issues with selecting windows when point is near a
jagged border. Doom disabled this feature to prevent crashes... let's hope that
it doesn't cause any crashes for us.

#+begin_src emacs-lisp :tangle yes
(setq window-resize-pixelwise t)
#+end_src

So far, this doesn't really seem to help much. *UPDATE*: The missing piece was
advising ~balance-windows~ to respect side windows.

*** STRT [#B] Replace key bindings for =:ui popup= :tweak:
#+begin_src emacs-lisp :tangle yes
(map! "C-`"   #'window-toggle-side-windows)
   ;; "C-~"   #'+popup/raise
   ;; "C-x p" #'+popup/other
#+end_src

** deft [0/0] :ARCHIVE:
#+begin_quote
[[https://jblevins.org/projects/deft/][Deft]] is a major mode for browsing and filtering notes written in plain text
formats, such as org-mode, markdown, and LaTeX.
#+end_quote

** doom [5/6]
#+begin_quote
This module gives Doom its signature look: powered by the =doom-one= theme
(inspired by Atom's One Dark theme) and =solaire-mode=.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `ui/doom` module
brew install font-terminus

# TODO: Comic Mono
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `ui/doom` module
sudo dnf -y install terminus-fonts

## Comic Mono
## <https://dtinth.github.io/comic-mono-font>
## <https://docs.fedoraproject.org/en-US/quick-docs/fonts/#unpackaged>
npm install -g comic-mono
mkdir -p "$XDG_DATA_HOME/fonts"
ln -s "`npm root -g`/comic-mono" "$XDG_DATA_HOME/fonts"

## Iosevka Comfy
if [ -e "$XDG_DATA_HOME/fonts/iosevka-comfy/.git" ]
then
    git -C "$XDG_DATA_HOME/fonts/iosevka-comfy" pull
else
    git clone --depth 1 \
        'https://git.sr.ht/~protesilaos/iosevka-comfy' \
        "$XDG_DATA_HOME/fonts/iosevka-comfy"
fi

## Update fonts
fc-cache -v
#+end_src

*** DONE [#A] Never hide the modeline :tweak:bug:
Without a modeline, the only way to see a clear distinction between the bottom
of a window without a modeline and the top of another window is by using certain
themes in GUI Emacs.

#+begin_src emacs-lisp :tangle yes
;; `always' is just a no-op that returns `t'
(defadvice! my/never-hide-modeline-a (&rest _)
  "Never hide the modeline"
  :around 'hide-mode-line-mode
  #'always)

(after! doom-themes-ext-treemacs
  (defadvice! my/show-treemacs-modeline-a (&rest _)
    "Show the treemacs modeline"
    :around 'doom-themes-hide-modeline
    #'always))

(remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)
#+end_src

**** COMMENT Other ways to disable modeline hiding
In the end, I prefer the heavy-handed approach and like to see modelines beneath
all windows. The consistently clear distinction between windows is worth the
exchange of screen real estate.

#+CAPTION: Disable modeline hiding in all popup buffers
#+begin_src emacs-lisp :tangle no
(remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)
#+end_src

#+CAPTION: Disable modeline hiding by default in popup buffers
#+begin_src emacs-lisp :tangle no
(plist-put +popup-defaults :modeline t)
#+end_src

#+CAPTION: Disable modeline hiding in specific modes
#+begin_src emacs-lisp :tangle no
;; Not an exhuastive list of hooks
(remove-hook! '(shell-mode-hook
                term-mode-hook
                vterm-mode-hook
                eshell-mode-hook)
              #'hide-mode-line-mode)
#+end_src

*** DONE [#C] Tweak the style of the tab bar :tweak:
The following advice needs to be defined before we set the initial theme in
order for it to take effect.

#+begin_src emacs-lisp :tangle yes
(defadvice! my/tab-bar-theme-a (theme &rest _)
  "Tweak the style of the tab bar."
  :after '(load-theme consult-theme)
  (if (string-match-p "\\`ef-" (symbol-name theme))
      (ef-themes-with-colors
        (custom-set-faces
         `(tab-bar ((,c :background ,bg-inactive :foreground ,fg-intense)))))
    (eeowaa-use-face tab-bar mode-line-inactive)))
#+end_src

*** DONE [#C] Set the theme :tweak:
There are literally only two custom themes (~doom-badger~ and ~doom-rouge~) that
satisfy the following requirements /without modification/ when running in a
256-color terminal:

1. Files and directories have different colors in Treemacs
2. Buffers and modelines have noticeably different background colors even in
   unselected windows
3. The background color of the current selection in the completion framework is
   never the same as the foreground color of any part of the selection

For a 256-color terminal, ~doom-badger~ is OK, but I prefer ~doom-henna~.
Unfortunately, it does not satisfy the 3rd requirement, so I made a patched copy
of the theme called ~eeowaa-henna~ that fixes the problem. Note that I created a
new theme instead of customizing ~doom-henna~ because I prefer ~doom-henna~ over
~eeowaa-henna~ in GUI Emacs and like using it sometimes. *UPDATE*: The
=ef-themes= package provides more themes that satisfy all three requirements in
a 256-color terminal; I have migrated to ~ef-tritanopia-dark~ for now.

As for GUI Emacs, I love ~doom-outrun-electric~ for its clear separation between
windows and for its cool color palette. However, the background color of the
selected item in Treemacs is nearly the same as the regular background color (a
problem that [[https://www.reddit.com/r/DoomEmacs/comments/pfp39u/customizing_doomtheme/][others have experienced]]), so it is hard to tell what is currently
selected. To fix the problem, I customized the theme to use the same background
color as the face used for the current selection in the completion framework.
Note that this fix also modifies the background color of highlighted lines in
other windows that use =solaire-mode=. *UPDATE*: The =ef-themes= packages
provides very nice-looking themes in a graphical environment, and are better
than most Doom themes for displaying the =tab-line= and =tab-bar=; I have
migrated to ~ef-bio~ for now.

#+begin_src emacs-lisp :tangle yes
(setq doom-theme
      (if initial-window-system
          'ef-bio
        'ef-tritanopia-dark))

(after! (:and solaire-mode (:or vertico ivy))
  (let ((face (cond
               ((facep 'vertico-current) 'vertico-current)
               ((facep 'ivy-current-match) 'ivy-current-match)
               (t (error "Could not determine face")))))
    (custom-theme-set-faces! 'doom-outrun-electric
      `(solaire-hl-line-face :background
                             ,(face-attribute face :background)))))
#+end_src

Some other themes that I enjoy in GUI Emacs include:
- ~doom-tokyo-night~ (good dark theme that is easy on the eyes and brain)
- ~doom-gruvbox-light~ (good light theme for working in direct sunlight)
- ~doom-tomorrow-day~ (good light theme to go with Comic Mono font)
- ~doom-plain~ and ~doom-plain-dark~ (good monochrome themes to focus on text)

*** DONE [#C] Set the font :tweak:
At least on Linux, you can list available fonts like this:

#+begin_src sh :tangle no :results verbatim
fc-list | sed 's/[^:].*: //' | sort -u     # all fonts
fc-list :spacing=mono family style | sort  # just monospace
#+end_src

Some of my favorite free and open-source fonts include:
- ~Iosevka Comfy~ (good spacing)
- ~Source Code Pro~ (well-rounded)
- ~Terminus~ (crisp)
- ~Comic Mono~ (fun)

#+begin_src emacs-lisp :tangle yes
;; Define fonts that I like
(setq my/fonts '(("Iosevka Comfy Fixed" ;; Remove " Fixed" if you want ligatures
                  :variable-pitch "Iosevka Comfy Duo"
                  :serif "Iosevka Comfy Motion Fixed"
                  :default-size 22)
                 ("Source Code Pro"
                  :default-size 22)
                 ("Terminus"
                  :default-size 30)
                 ("Comic Mono"
                  :variable-pitch "Comic Neue"
                  :default-size 24)))

;; Define a fuction to change the fonts
(defun my/select-font (font &optional size)
  "Change the current fonts to a collection in `my/fonts'.
If SIZE is omitted, the default will be used.
When called interactively, reload the fonts in the current session."
  (interactive (list (completing-read "Font family: "
                                      (mapcar #'car my/fonts) nil t)
                     nil))
  (let* ((f (lambda (x y) (and x y (font-spec :family x :size y))))
         (p (or (alist-get font my/fonts nil nil #'string=)
                (error "\"%s\" not found in `my/fonts'" font)))
         (variable-pitch-font (plist-get p :variable-pitch))
         (serif-font (plist-get p :serif))
         (default-size (plist-get p :default-size)))
    (unless size
      (setq size (if (interactive-p)
                     (eeowaa-read-positive-int "Font size: " default-size)
                   default-size)))
    (setq doom-font                (funcall f font size)
          doom-variable-pitch-font (funcall f variable-pitch-font size)
          doom-serif-font          (funcall f serif-font size)))
  (and (interactive-p) (doom/reload-font)))

;; Set the font
(my/select-font "Iosevka Comfy Fixed")
#+end_src

*** TODO [#C] Set the Unicode font :tweak:
The annoyance I would like to get rid of is that some Unicode glyphs (e.g. the
copyright symbol ©) are not fixed width. Doom provides ~doom-unicode-font~ to
set the Unicode font. Use the following as a reference:
https://stackoverflow.com/questions/1938639/monospace-unicode-font

** doom-dashboard [0/0] :ARCHIVE:
#+begin_quote
This module adds a minimalistic, Atom-inspired dashboard to Emacs.
#+end_quote

** doom-quit [0/0] :ARCHIVE:
#+begin_quote
A silly module that prompts you with messages when you try to quit, like DOOM
did. Some quotes are from Doom's quit-message list. Others are random, nerdy
references that no decent human being has any business recognising.
#+end_quote

** emoji [2/2]
#+begin_quote
Displays and inserts emojis (ASCII, Github style, unicode).
#+end_quote

*** DONE [#A] Do not prompt to download emojis :bug:
The prompt to download emojis happens during Doom startup and puts it in an
unactionable, unrecoverable state. Obviously, I'd prefer to avoid that! Instead,
I would like to simply download emojis if they are missing from the expected
location.

#+begin_src emacs-lisp :tangle yes
(setq emojify-download-emojis-p t)
#+end_src

*** DONE [#C] Enable emojis (just for =SPC i e=) :doc:
This is done in =doom/init.el=.

** hl-todo [1/1]
#+begin_quote
This module adds syntax highlighting for TODO/FIXME/NOTE tags in programming
major-modes.
#+end_quote

*** DONE [#B] Add a few different tags to highlight in programming major-modes :tweak:
#+begin_src emacs-lisp :tangle yes
(after! hl-todo
  (setq hl-todo-keyword-faces
        (append '(("TESTME" font-lock-constant-face bold)
                  ("PREREQ" font-lock-doc-face bold)
                  ("DEBUG" font-lock-preprocessor-face bold))
                hl-todo-keyword-faces)))
#+end_src

** hydra [5/7]
#+begin_quote
This module adds hydra to Doom Emacs, as well as a few custom built hydras to
start with.
#+end_quote

*** COMMENT Documentation
+ [[doom-modules:ui/hydra/README.org][ui/pdf module documentation]]
+ [[doom:.local/straight/repos/hydra/README.md][hydra package README]]

*** OKAY [#A] Write macros to help create hydras :feat:
Room for improvement:

1. Use ~(["key"] cmd "hint")~ instead of ~(my/hydra-key "key" cmd "hint")~ in
   ~my/defhydra~ (look for a vector as the first argument in each head). This is
   just nice shorthand. It will also allow me to get rid of ~my/hydra-key~
   altogether.

2. Show values instead of just propertizing the hint. This is because not every
   value being set is a boolean.

3. Support full hydra head syntax in ~my/hydra-key~ (or the resulting code after
   implementing the first improvement in this list).

#+begin_src emacs-lisp :tangle yes
(defmacro my/defhydra (name body &optional docstring &rest heads)
  "Define a hydra, expanding `my/hydra-key' forms in HEADS.
See the help text for `defhydra' for a description of arguments."
  (declare (indent defun) (doc-string 3))
  (let ((heads (mapcar (lambda (head)
                         (if (eq (car head) 'my/hydra-key)
                             (macroexpand head)
                           head))
                       heads)))
    `(defhydra ,name ,body ,docstring ,@heads)))

(defmacro my/hydra-key (key cmd hint &optional predicate)
  "Add a key to a hydra defined by `my/defhydra'.
Press KEY to eval CMD described by HINT.

If PREDICATE is `nil', do not propertize the text.

If PREDICATE is `t', then propertize the text according to the
variable whose symbol name equals that of CMD. (This is often
useful when CMD is a function that toggles a minor mode.)

If PREDICATE is any other non-`nil' value, then propertize the
text according to that value at runtime.

In order to propertize text, the DOCSTRING argument in the
`my/defhydra' should contain a \"_KEY_: ?LABEL?\" string
corresponding those arguments of this macro. For example:

  (my/defhydra hydra-minor-modes (:hint nil)
    \"_v_: ?v?, _r_: ?r?\"
    (my/hydra-key \"v\" view-mode \"View\" t)
    (my/hydra-key \"r\"
                  (read-only-mode 'toggle)
                  \"Read-Only\"
                  buffer-read-only)"
  (if (null predicate)
      `(,key ,cmd ,hint)
    `(,key ,cmd (propertize ,hint
                            'face
                            (if ,(if (eq t predicate)
                                     cmd
                                   predicate)
                                'bold
                              'italic)))))
#+end_src

*** DONE [#A] Add a hydra for projectile run commands :feat:
#+begin_src emacs-lisp :tangle yes
(after! projectile
  (global-set-key (kbd "C-c r") 'hydra-run/body)
  (defhydra hydra-run (:color blue :hint none)
    "
confi_g_ure -> ?g?
_c_ompile ---> ?c?
_t_est ------> ?t?
_r_un -------> ?r?
_i_nstall ---> ?i?
_p_ackage ---> ?p?
"
    ("g" (let ((compilation-read-command)) (funcall #'projectile-configure-project nil))
     (format "%s" projectile-project-configure-cmd))
    ("c" (let ((compilation-read-command)) (funcall #'projectile-compile-project nil))
     (format "%s" projectile-project-compilation-cmd))
    ("t" (let ((compilation-read-command)) (funcall #'projectile-test-project nil))
     (format "%s" projectile-project-test-cmd))
    ("r" (let ((compilation-read-command)) (funcall #'projectile-run-project nil))
     (format "%s" projectile-project-run-cmd))
    ("i" (let ((compilation-read-command)) (funcall #'projectile-install-project nil))
     (format "%s" projectile-project-install-cmd))
    ("p" (let ((compilation-read-command)) (funcall #'projectile-package-project nil))
     (format "%s" projectile-project-package-cmd))))
#+end_src

*** DONE [#C] Add a hydra for games :feat:module:
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c g") 'hydra-game/body)
(defhydra hydra-game (:color blue :hint nil)
  "
^Arcade^      ^Puzzle^        ^Board^          ^Text^        ^Self-Playing^
^-^-----------^-^--------------------------------------------^-^-----------
_t_: Tetris   _5_: 5x5        _g_: Gomoku      _a_: Dunnet   _l_: Life
_s_: Snake    _b_: Blackbox   _i_: Solitaire   _d_: Doctor   _h_: Hanoi
_p_: Pong     _m_: Mpuz       ^ ^              ^ ^           _z_: Zone
^ ^           _o_: Bubbles
"
  ;; Arcade
  ("t" tetris)
  ("s" snake)
  ("p" pong)

  ;; Puzzle
  ("5" 5x5)
  ("b" blackbox)
  ("m" mpuz)
  ("o" bubbles)

  ;; Board
  ("i" solitaire)
  ("g" gomoku)

  ;; Text
  ("a" dunnet)
  ("d" doctor)

  ;; Self-Playing
  ("l" life)
  ("h" hanoi)
  ("z" zone)

  ;; Other
  ("q" nil))
#+end_src

*** DONE [#C] Add a hydra for counsel-spotify :feat:module:
#+begin_src emacs-lisp :tangle yes
(when (locate-library "counsel-spotify")
  (global-set-key (kbd "C-c s") 'hydra-spotify/body)
  (defhydra hydra-spotify (:color blue :hint nil)
    "
^Playback control^   ^Collection^     ^Song^           ^Open Spotify^
^---^----------------^-^--------------^-^-------------------------------
_SPC_: Play/Pause    _l_: Playlist    _s_: By name     _o_: Application
  _n_: Next          _a_: Artist      _A_: By artist   _w_: Web player
  _p_: Previous      _r_: Record      _R_: By record   _i_: Integrations
"
    ;; Playback Control
    ("SPC" counsel-spotify-toggle-play-pause :color red)
    ("n" counsel-spotify-next :color red)
    ("p" counsel-spotify-previous :color red)

    ;; Collection
    ("l" counsel-spotify-search-playlist)
    ("a" counsel-spotify-search-artist)
    ("r" counsel-spotify-search-album)

    ;; Song
    ("s" counsel-spotify-search-track)
    ("A" counsel-spotify-search-tracks-by-artist)
    ("R" counsel-spotify-search-tracks-by-album)

    ;; Open Spotify
    ("o" (cond
            (IS-MAC (call-process "open" nil nil nil "-a" "spotify"))
            (IS-LINUX (call-process "xdg-open" nil nil nil "spotify"))
            (t (user-error! "Unsupported operating system"))))
    ("w" (browse-url "https://open.spotify.com"))
    ("i" (browse-url "https://developer.spotify.com/my-applications"))

    ;; Other
    ("q" nil)))
#+end_src

*** DONE [#C] Add a hydra for timeclock :feat:module:
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c c") 'hydra-timeclock/body)
(defhydra hydra-timeclock (:color blue)
  "Timeclock"
  ("i" timeclock-in "In")
  ("o" timeclock-out "Out")
  ("c" timeclock-change "Change")
  ("e" timeclock-visit-timelog "Edit")
  ("g" timeclock-reread-log "Reload")
  ("s" timeclock-status-string "Status")
  ("r" my/timeclock-report "Report")
  ("q" nil "Quit"))
#+end_src

*** STRT [#A] Add a hydra for debugging elisp :feat:
- [X] Setting and unsetting entrypoints
- [ ] Interface to =debug= (reference ~debugger-mode-map~)
- [ ] Interface to =edebug= (reference ~edebug-mode-map~)
- [ ] Trace function calls
  + ~trace-function~
  + ~trace-function-background~
  + ~untrace-function~
- [ ] Trace variable modifications
  + ~add-variable-watcher~ with ~message~
  + ~get-variable-watchers~
  + ~remove-variable-watcher~

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c d") 'hydra-debug/body)
(defhydra hydra-debug ()
  "Debug"
  ("d" hydra-debug-debugger/body "Debugger" :exit t)
  ("b" hydra-debug-breakpoints/body "Breakpoints" :exit t)
  ("w" hydra-debug-watchpoints/body "Watchpoints" :exit t)
  ("t" hydra-debug-traps/body "Traps" :exit t)
  ("SPC" ignore nil :color red))
#+end_src

**** STRT Debugger
The only problem is that the commands for stepping cause the hydra window to
disappear. I tried the following potential workarounds to no avail:

1. Use ~message~ or ~posframe~ instead of ~lv~ for ~hydra-hint-display-type~
2. Add ~hydra-debug-debugger/body~ to ~debugger-mode-hook~

For now, I have specified ~:exit t~ for those heads, to prevent confusion. Each
time you step, you must open the hydra again via =C-c d d=. That said, each of
the binds in this hydra correspond to bindings in ~debugger-mode-map~, so if you
have memorized the hydra binds, then you can still use them without the hydra.

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-debug-debugger (:color pink)
  ;; Stepping
  ("d" debugger-step-through "step in" :exit t :column "run")
  ("J" debugger-jump "step out" :exit t)
  ("c" debugger-continue "continue" :exit t)

  ;; Breakpoints
  ("gb" debugger-frame "set" :column "break")
  ("u" debugger-frame-clear "unset")
  ("gl" debugger-list-functions "list")

  ;; Evaluation
  ("E" debugger-eval-expression "print" :column "sexp")
  ("R" debugger-record-expression "record")
  ("RET" backtrace-help-follow-symbol "follow")

  ;; Visibility
  ("zo" backtrace-multi-line "open" :column "fold")
  ("zc" backtrace-single-line "close")
  ("." backtrace-expand-ellipses "expand")

  ;; Toggles
  ("p" backtrace-toggle-locals "locals" :column "toggle")
  (":" backtrace-toggle-print-gensym "uninterned")
  ("#" backtrace-toggle-print-circle "circular")

  ;; Exiting
  ("q" debugger-quit "toplevel nonstop" :column "exit")
  ("r" debugger-return-value "return with value")
  ("SPC" hydra-debug/body "Menu" :exit t)
  ("C-g" ignore nil :exit t))

; Unassigned:
;   backtrace-forward-frame
;   backtrace-backward-frame
#+end_src

**** TODO Edebug
References:
+ https://github.com/rgrinberg/edebug-hydra/blob/master/edebug-hydra.el
+ edebug-mode-map:
  #+begin_example
  =                           edebug-temp-display-freq-count
  ?                           edebug-help
  B                           edebug-next-breakpoint
  C                           edebug-Continue-fast-mode
  C-M-i                       completion-at-point
  C-M-q                       indent-pp-sexp
  C-M-q                       indent-sexp
  C-M-q                       prog-indent-sexp
  C-M-x                       eval-defun
  C-c C-c                     edebug-go-mode
  C-c C-d                     edebug-unset-breakpoint
  C-c C-l                     edebug-where
  C-c C-n                     edebug-next-mode
  C-c C-s                     edebug-step-mode
  C-c C-t                     #<anonymous-function>
  C-x C-a C-c                 edebug-go-mode
  C-x C-a C-l                 edebug-where
  C-x C-a C-n                 edebug-next-mode
  C-x C-a C-s                 edebug-step-mode
  C-x C-a RET                 edebug-set-initial-mode
  C-x C-e                     edebug-eval-last-sexp
  C-x SPC                     edebug-set-breakpoint
  D                           edebug-toggle-disable-breakpoint
  DEL                         backward-delete-char-untabify
  E                           edebug-visit-eval-list
  G                           nil
  I                           edebug-instrument-callee
  P                           edebug-view-outside
  Q                           edebug-top-level-nonstop
  S                           edebug-stop
  SPC                         edebug-step-mode
  T                           edebug-Trace-fast-mode
  U                           edebug-unset-breakpoints
  W                           edebug-toggle-save-windows
  X                           edebug-set-global-break-condition
  a                           abort-recursive-edit
  b                           edebug-set-breakpoint
  c                           edebug-continue-mode
  d                           edebug-pop-to-backtrace
  e                           edebug-eval-expression
  f                           edebug-forward-sexp
  g                           nil
  h                           nil
  i                           edebug-step-in
  n                           edebug-next-mode
  o                           edebug-step-out
  p                           edebug-bounce-point
  q                           top-level
  r                           edebug-previous-result
  t                           edebug-trace-mode
  u                           edebug-unset-breakpoint
  v                           edebug-view-outside
  w                           edebug-where
  x                           edebug-set-conditional-breakpoint
  #+end_example

**** DONE Breakpoints
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-debug-breakpoints ()
  "Breakpoints"
  ("b" debug-on-entry "Set")
  ("u" cancel-debug-on-entry "Unset")
  ("l" (message "%s" (debug--function-list)) "List")
  ("SPC" hydra-debug/body "Menu" :exit t))
#+end_src

**** DONE Watchpoints
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-debug-watchpoints ()
  "Watchpoints"
  ("s" debug-on-variable-change "Set")
  ("u" cancel-debug-on-variable-change "Unset")
  ("l" (message "%s" (debug--variable-list)) "List")
  ("SPC" hydra-debug/body "Menu" :exit t))
#+end_src

**** DONE Traps
Note that ~debug-on-next-call~ is impossible to set within the hydra without
immediately triggering the debugger.

#+begin_src emacs-lisp :tangle yes
(my/defhydra hydra-debug-traps ()
  "Traps"
  (my/hydra-key
   "e" toggle-debug-on-error "Error" debug-on-error)
  (my/hydra-key
   "q" toggle-debug-on-quit "Quit (C-g)" debug-on-quit)
  (my/hydra-key
   "u" (lambda (event)
         (interactive `(,(intern (completing-read "Signal: " '(sigusr1 sigusr2 nil)))))
         (setq debug-on-event event))
   "User event" debug-on-event)
  (my/hydra-key
   "s" (lambda ()
         (interactive)
         (setq debug-on-signal (not debug-on-signal))
         (message "Debug on Signal %s globally"
                  (if debug-on-signal "enabled" "disabled")))
   "Signal" debug-on-signal)
  (my/hydra-key
   "m" (lambda (regexp)
         (interactive `(,(read-regexp "Message regexp: ")))
         (setq debug-on-message regexp))
   "Message" (not (or (null debug-on-message) (string-empty-p debug-on-message))))
  ("SPC" hydra-debug/body "Menu" :exit t))
#+end_src

*** STRT [#B] Add a hydra for table.el :feat:
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c t") 'hydra-table/body)
(defhydra hydra-table ()
  "table.el"
  ("n" hydra-table-navigate/body "Navigate" :exit t)
  ("i" hydra-table-insert/body "Insert" :exit t)
  ("d" hydra-table-delete/body "Delete" :exit t)
  ("s" hydra-table-span-or-split/body "Span or Split" :exit t)
  ("r" hydra-table-resize/body "Resize" :exit t)
  ("j" hydra-table-justify/body "Justify" :exit t)
  ("e" hydra-table-export/body "Export" :exit t)
  ("SPC" ignore nil :color red))
#+end_src

**** TODO Capture and Release
**** TODO Recognize and Unrecognize
**** STRT Navigate
I want "fbnp" or "hjkl" navigation between cells, but table.el does
not provide such functions, so I'll need to implement them myself
using regexps.  Looking at the table.el source code might provide some
inspiration (look for [[help:table-forward-cell][table-forward-cell]] and [[help:table-backward-cell][table-backward-cell]]
implementations).

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-navigate ()
  "Navigation"
  ("1" (progn (table-goto-top-left-corner)
              (forward-char) (forward-line)))
  ("2" (progn (table-goto-top-right-corner)
              (backward-char) (forward-line)))
  ("3" (progn (table-goto-bottom-left-corner)
              (forward-char) (forward-line -1)))
  ("4" (progn (table-goto-bottom-right-corner)
              (backward-char) (forward-line -1)))
  ("f" table-forward-cell)
  ("b" table-backward-cell)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Insert
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-insert ()
  "Insert"
  ("t" table-insert "table")
  ("r" table-insert-row "row")
  ("c" table-insert-column "column")
  ("s" table-insert-sequence "sequence")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Delete
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-delete ()
  "Delete"
  ("r" table-delete-row "row")
  ("c" table-delete-column "column")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Span or Split
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-span-or-split ()
  "Span or Split"
  ("h" (table-span-cell 'left))
  ("j" (table-span-cell 'below))
  ("k" (table-span-cell 'above))
  ("l" (table-span-cell 'right))
  ("|" table-split-cell-horizontally)
  ("-" table-split-cell-vertically)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Resize
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-resize ()
  "Resize"
  ("}" table-heighten-cell "heighten")
  ("{" table-shorten-cell "shorten")
  (">" table-widen-cell "widen")
  ("<" table-narrow-cell "narrow")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Justify
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify ()
  "Justify"
  ("a" hydra-table-justify-cell/body "Cell" :exit t)
  ("r" hydra-table-justify-row/body "Row" :exit t)
  ("c" hydra-table-justify-column/body "Column" :exit t)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

***** ~a~: Cell
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify-cell ()
  "Justify Cell"
  ("h" (table-justify-cell 'left))
  ("j" (table-justify-cell 'bottom))
  ("k" (table-justify-cell 'top))
  ("l" (table-justify-cell 'right))
  ("c" (table-justify-cell 'center) "center")
  ("m" (table-justify-cell 'middle) "middle")
  ("n" (table-justify-cell 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

***** ~r~: Row
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify-row ()
  "Justify Row"
  ("h" (table-justify-row 'left))
  ("j" (table-justify-row 'bottom))
  ("k" (table-justify-row 'top))
  ("l" (table-justify-row 'right))
  ("c" (table-justify-row 'center) "center")
  ("m" (table-justify-row 'middle) "middle")
  ("n" (table-justify-row 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

***** ~c~: Column
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify-column ()
  "Justify Column"
  ("h" (table-justify-column 'left))
  ("j" (table-justify-column 'bottom))
  ("k" (table-justify-column 'top))
  ("l" (table-justify-column 'right))
  ("c" (table-justify-column 'center) "center")
  ("m" (table-justify-column 'middle) "middle")
  ("n" (table-justify-column 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** STRT Export
I just need to test this functionality.

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-export ()
  "Export to"
  ("h" (table-generate-source 'html) "HTML")
  ("l" (table-generate-source 'latex) "LaTeX")
  ("c" (table-generate-source 'cals) "CALS")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

** ilist [3/3] :eeowaa:
**** DONE [#A] Window configuration :tweak:
#+begin_src emacs-lisp :tangle yes
(setq imenu-list-mode-line-format "  Ilist"
      imenu-list-position 'right
      imenu-list-size 35) ;; same as treemacs
#+end_src

**** DONE [#C] Configure revert-buffer :tweak:module:
#+begin_src emacs-lisp :tangle yes
(after! imenu-list
  (setq-hook! 'imenu-list-major-mode-hook
    revert-buffer-function #'imenu-list-refresh))
#+end_src

**** DONE [#C] Scale down font in imenu-list-major-mode
#+begin_src emacs-lisp :tangle yes
(setq my/imenu-list-text-scale -1)
(after! imenu-list
  (defun my/imenu-list-text-scale-h ()
    (text-scale-increase my/imenu-list-text-scale))
  (add-hook 'imenu-list-major-mode-hook #'my/imenu-list-text-scale-h))
#+end_src

** indent-guides [0/0] :ARCHIVE:
** ligatures [1/1]
#+begin_quote
This module enables ligatures and arbitrary symbol substitutions with
~mac-auto-operator-composition-mode~ (on supported macOS systems) or composition
tables (harfbuzz on Emacs 28), falling back on ~prettify-symbols-mode~
otherwise.
#+end_quote

*** DONE [#C] Only enable ligatures in Org mode (for now)
#+begin_src emacs-lisp :tangle yes
(setq +ligatures-in-modes '(org-mode)
      +ligatures-extras-in-modes '(org-mode))
#+end_src

** minimap [0/0]
#+begin_quote
This module adds a minimap to the right side of Emacs, similar to the feature
found in many other editors.
#+end_quote

** modeline [3/3]
#+begin_quote
This module provides an Atom-inspired, minimalistic modeline for Doom Emacs,
powered by [[https://github.com/seagle0128/doom-modeline][the doom-modeline package]] (where you can find screenshots).
#+end_quote

*** DONE [#B] Do not display buffer modification info for non-file buffers :tweak:
#+begin_src emacs-lisp :tangle yes
(if initial-window-system
    ;; Just display an icon for file-visiting buffers
    (setq doom-modeline-highlight-modified-buffer-name nil)

  ;; Highlight the names of file-visiting buffers
  (setq doom-modeline-highlight-modified-buffer-name t)
  (defadvice! my/doom-modeline-ignore-modification-a (fn &rest args)
    :around '(doom-modeline-segment--buffer-info
              doom-modeline-segment--buffer-info-simple)
    (letf! (defadvice my/doom-modeline-buffer-modification-a (&rest _)
             :after-while #'buffer-modified-p
             buffer-file-name)
      (apply fn args))))
#+end_src

*** DONE [#C] Unpin package :tweak:
Unpinning =doom-modeline= gives us a more even and consisent modeline height
between windows, among other things:

#+begin_src emacs-lisp :tangle packages.el
(unpin! doom-modeline)
#+end_src

However, =nerd-icons= is now required. Doom does not handle this very graceful
and it may cause yet-to-be-discovered issues. For now, I will just install the
icons if they are missing:

#+begin_src emacs-lisp :tangle yes
;; NOTE `font-dest' is ripped straight from `nerd-icons-install-fonts'
(require 'nerd-icons)
(let ((font-dest (cond
                  ((member system-type '(gnu gnu/linux gnu/kfreebsd))
                   (concat (or (getenv "XDG_DATA_HOME")
                               (concat (getenv "HOME") "/.local/share"))
                           "/fonts/"
                           nerd-icons-fonts-subdirectory))
                  ((eq system-type 'darwin)
                   (concat (getenv "HOME")
                           "/Library/Fonts/"
                           nerd-icons-fonts-subdirectory)))))
  (unless (cl-every (lambda (font-name)
                      (file-exists-p (concat font-dest font-name)))
                    nerd-icons-font-names)
    (nerd-icons-install-fonts t)))
#+end_src

*** DONE [#C] Use 1-based column numbering in modeline :tweak:
#+begin_src emacs-lisp :tangle yes
(setq column-number-indicator-zero-based nil)
#+end_src

** nav-flash [0/0] :ARCHIVE:
#+begin_quote
This module flashes the line around the cursor after any significant motion, to
make it easy to follow after big operations.
#+end_quote

** neotree [0/0] :ARCHIVE:
#+begin_quote
This module brings a side panel for browsing project files, inspired by vim's
NERDTree.
#+end_quote

** ophints [1/1]
#+begin_quote
This module provides op-hints (operation hinting), i.e. visual feedback for
certain operations. It highlights regions of text that the last operation (like
yank) acted on.
#+end_quote

*** OKAY [#C] Flash after specific jump operations :feat:
*UPDATE*: The =:ui nav-flash= module implements this in a more general-purpose
fashion. It might be good to use that module instead. It might also solve a
limitation in my current solution: the flash does not occur when jumping to a
hidden buffer position (such as in a folded Org subtree).

#+begin_src emacs-lisp :tangle yes
(after! evil-goggles

  (defcustom my/evil-goggles-enable-jump t
    "If non-nil, enable jump support."
    :type 'boolean :group 'evil-goggles)

  (defface my/evil-goggles-jump-face '((t (:inherit evil-goggles-default-face)))
    "Face for jump action"
    :group 'evil-goggles-faces)

  (defun my/evil-goggles--jump-advice (&rest _)
    "Advice for commands that move point across lines."
    (let ((beg (line-beginning-position))
          (end (1+ (line-end-position))))
      (evil-goggles--show-async-hint beg end)))

  ;; `my/evil-goggles--jump-advice' is useful in many different contexts:
  ;; not just as advice, and not just within `evil-goggles'. Defining an alias
  ;; helps to generalize the function.
  (defalias 'my/flash-line #'my/evil-goggles--jump-advice "Flash the current line.")

  ;; Adding entries for `better-jumper-jump-{forward,backward}' and/or
  ;; `evil-jump-{forward,backward}' to `evil-goggles--commands' does not work
  ;; as expected (the line does not flash after a jump). However, a hook works.
  (after! better-jumper
    (add-to-list 'better-jumper-post-jump-hook #'my/flash-line))

  (dolist (command '(evil-scroll-line-to-center))
    (cl-pushnew `(,command
                  :face my/evil-goggles-jump-face
                  :switch my/evil-goggles-enable-jump
                  :advice my/evil-goggles--jump-advice)
                evil-goggles--commands)))
#+end_src

** popup [4/6] :ARCHIVE:
#+begin_quote
This module provides a customizable popup window management system.
#+end_quote

*** DONE [#A] Only stack =which-key= popups :hack:
Implementation options:

1. Ignore ~:vslot~ in ~set-popup-rule!~ and ~set-popup-rules!~, preventing
   ~vslot~ from getting set in ~display-buffer-alist~.
2. When reading from ~display-buffer-alist~, ignore ~vslot~ associations.
3. Redefine each popup rule that sets ~:vslot~.

For now, I think I prefer *option 1*. Doom configures =which-key= by setting
~which-key-custom-show-popup-function~ to a lambda function that calls
~+popup-display-buffer-stacked-side-window-fn~ with a ~vslot~ parameter (this
happens in =~/.config/emacs/modules/ui/popup/+hacks.el=). Therefore, advising
~+popup-make-rule~ will have no effect on =which-key=. By tangling to
=early-init.el= instead of =config.el=, the popup rules that Doom
unconditionally sets during startup (see table below) are overridden, as well:

#+begin_src emacs-lisp :tangle early-init.el
(defadvice! my/ignore-vslot-a (args)
  "Set :vslot to nil in popup rule."
  :filter-args #'+popup-make-rule
  (let ((predicate (car args))
        (plist (cadr args)))
    (cons predicate (list (plist-put plist :vslot nil)))))
#+end_src

#+caption: Doom's builtin popup rules
| pattern                         | vslot |
|---------------------------------+-------|
| ~"^\\*Process List\\*"~         |   101 |
| ~"^\\*Memory-Profiler-Report "~ |   100 |
| ~"^\\*CPU-Profiler-Report "~    |   100 |
| ~"^\\*Backtrace"~               |    99 |
| ~"^\\*Warnings"~                |    99 |

*** DONE [#B] Add a terminal-friendly keybinding for ~+popup/raise~
I've defined a global keybinding for this:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Raise popup"
      "^" #'+popup/raise)
#+end_src

Ideally, I'd just modify the ~popup-mode~ keymap, but the following doesn't seem
to work:
#+begin_src emacs-lisp :tangle no
(map! :map +popup-buffer-mode-map
      "SPC ^" #'+popup/raise)
#+end_src

*** DONE [#B] Enable line wrapping in buffers before shrinking their popup
#+begin_src emacs-lisp :tangle yes
(defadvice! my/+popup-shrink-to-fit-a (&optional window)
  "Ensure line wrapping is enabled in `window' before shrinking."
  :before '+popup-shrink-to-fit
  (with-current-buffer (window-buffer (or window (selected-window)))
    (toggle-truncate-lines -1)))
#+end_src

*** DONE [#B] Add popup rule for terminals :feat:
#+begin_src emacs-lisp :tangle yes
(set-popup-rule! "^\\*doom:\\(?:v?term\\|e?shell\\)-popup"
  :size 0.35 :select t :modeline nil :quit nil :ttl nil)
#+end_src

*** STRT [#B] Add popup rule for Ilist :feat:
- [X] Display a similar modeline to that of Treemacs
- [ ] Use the same popup window as Treemacs (only display one at a time)
  - I would rather not take up too much screen real estate
  - I normally only need to see one of those at a time (because I'm either
    focused on file operations or on operations within a single file)
  - *UPDATE*: Treemacs windows are *not* popups; they are simply side windows.

#+begin_src emacs-lisp :tangle yes
(setq imenu-list-mode-line-format "  Ilist")
(after! imenu-list
  (set-popup-rule! "^\\*Ilist\\*"
    :side 'right :size 35 :quit 'current))
#+end_src

*** STRT [#B] Make left and right popups use full vertical space :bug:
According to the elisp manual, it seems that I only need to set the
~window-sides-vertical~ option to ~t~ using the Customize interface to get the
behavior that I am looking for.

#+begin_src emacs-lisp :tangle yes
(setq window-sides-vertical t)
#+end_src

Unfortunately, Doom Emacs does not respect this variable and things don't work
as expected. However, with =:ui popup= disabled:

- Bottom popups appear across the entire bottom when ~window-sides-vertical~ is ~nil~
- Bottom popups do *not* cut into left or right popups when ~window-sides-vertical~ is ~t~

You can verify the above by running the following elisp code:
#+begin_src emacs-lisp :tangle no
(display-buffer-in-side-window (current-buffer) '(:side bottom))
#+end_src

The problem appears to be in Doom's ~+popup-display-buffer-stacked-side-window-fn~:

#+begin_quote
A `display-buffer' action that serves as an alternative to
`display-buffer-in-side-window', but allows for stacking popups with the `vslot'
alist entry.

Accepts the same arguments as `display-buffer-in-side-window'. You must set
`window--sides-inhibit-check' to non-nil for this work properly.
#+end_quote

** tabs [6/8] :eeowaa:
#+begin_quote
+This module adds an Atom-esque tab bar to the Emacs UI.+
Custom implementation of =:ui tabs=.
#+end_quote

*** DONE [#A] Bind keys
=:editor evil= binds =gt= to ~+tabs:next-or-goto~ and =gT= to
~+tabs:previous-or-goto~. Both of those commands are defined by the standard
=:ui tabs= module, but not by my custom implementation of =:ui tabs=.

The reason why I would rather not define such commands in my custom module is
because I have two separate abstractions for tabs: "workspace tabs" and "window
tabs". Command names like ~+tabs:next-or-goto~ and ~+tabs:previous-or-goto~ do
not indicate which tabs abstration is being operated on.

#+begin_src emacs-lisp :tangle yes
(map! :nv "gt" #'+tabs:next-window-tab
      :nv "gT" #'+tabs:prev-window-tab
      (:after evil-collection-magit
       (:map magit-status-mode-map
        :nv "gt" #'+tabs:next-window-tab
        :nv "gT" #'+tabs:prev-window-tab)
       (:map magit-log-mode-map
        :nv "gt" #'+tabs:next-window-tab
        :nv "gT" #'+tabs:prev-window-tab)
       (:map magit-revision-mode-map
        :nv "gt" #'+tabs:next-window-tab
        :nv "gT" #'+tabs:prev-window-tab)))

;; NOTE Bindings for `info-mode' are set by `evil-collection-info-setup', which
;; is not called directly in `evil-collection-info'. Apparently this sort of
;; configuration is special, as evidenced by the `info' entry in the
;; `evil-collection-config' custom option. Advice provides an easy workaround:
(defadvice! my/window-tab-info-bindings-a (&rest _)
  :after #'evil-collection-info-setup
  (evil-collection-define-key 'normal 'Info-mode-map
    "gt" #'+tabs:next-window-tab
    "gT" #'+tabs:prev-window-tab))

(define-key! evil-window-map
  "C" #'+tabs/close-window
  "gf" #'+tabs:new-ffap-window-tab
  "gF" #'+tabs:new-ffap-with-line-window-tab
  "gd" #'+tabs:new-lookup-definition-window-tab)

;; NOTE This overrides `+workspace/new'
(map! :n "C-t" #'+tabs:new-duplicate-window-tab)
#+end_src

*** DONE [#A] Bind =evil-ex= commands
Doom lazy loads =evil-ex= commands via the following code in the ~:config~
section of the ~use-package! evil~ form in =:editor evil= configuration:

#+begin_src emacs-lisp :tangle no
(delq! 'evil-ex features)
(add-transient-hook! 'evil-ex (provide 'evil-ex))
(after! evil-ex (load! "+commands"))
#+end_src

Unfortunately, =+commands.el= does not contain a ~provide~ statement, and
=:editor evil= is configured after =:ui tabs= in the ~doom!~ block, so without
modifying =:editor evil= itself, it is hard to override Doom's default =evil-ex=
commands in a custom =:ui tabs= module definition.

However, user configuration gets loaded last, so I should be able to override
definitions here:

#+begin_src emacs-lisp :tangle yes
(after! evil-ex
  (evil-ex-define-cmd "tabnew"         #'+tabs:new-blank-window-tab)
  (evil-ex-define-cmd "tabe[dit]"      #'+tabs:new-window-tab)
  (evil-ex-define-cmd "tabf[ind]"      #'+tabs:new-project-window-tab)
  (evil-ex-define-cmd "tabd[uplicate]" #'+tabs:new-duplicate-window-tab)
  (evil-ex-define-cmd "tabc[lose]"     #'+tabs:close-window-tab)
  (evil-ex-define-cmd "tabo[nly]"      #'+tabs:close-other-window-tabs)
  (evil-ex-define-cmd "tabn[ext]"      #'+tabs:next-window-tab)
  (evil-ex-define-cmd "tabN[ext]"      #'+tabs:prev-window-tab)
  (evil-ex-define-cmd "tabp[rev]"      #'+tabs:prev-window-tab)
  (evil-ex-define-cmd "tabr[ewind]"    #'+tabs:first-window-tab)
  (evil-ex-define-cmd "tabfir[st]"     #'+tabs:first-window-tab)
  (evil-ex-define-cmd "tabl[ast]"      #'+tabs:last-window-tab)
  (evil-ex-define-cmd "tabm[ove]"      #'+tabs:move-window-tab))
#+end_src

*** DONE [#C] Remove spaces between tabs
#+begin_src emacs-lisp :tangle yes
(setq tab-bar-separator ""
      tab-line-separator "")
#+end_src

*** DONE [#C] Use the default faces for the tab bar
I have two main gripes with ~+tabs-workspace-tab-face-fn~:

- Unselected tabs (displayed with ~+workspace-tab-face~) are resized with
  ~text-scale-increase~ and ~text-scale-decrease~. Obviously the size should
  remain constant.
- The default =tab-bar= faces are consistent with =tab-line= faces, and I like
  the consistency.

Both of these gripes can (and probably should) be resolved in the =:ui tabs=
module, but for now I will just make a private customization.

*UPDATE*: This same kind of problem appears in Treemacs with the
~doom-themes-treemacs-enable-variable-pitch~ option enabled, so maybe the
problem has to do with variable pitch font.

#+begin_src emacs-lisp :tangle yes
(after! tab-bar
  (setq tab-bar-tab-face-function #'tab-bar-tab-face-default))
#+end_src

*** DONE [#C] Open up =gt= for ~+tabs:next-window-tab~
#+begin_src emacs-lisp :tangle yes
(defadvice! my/ergonomic-eww-bindings-a (&rest _)
  :after #'evil-collection-eww-setup
  (evil-collection-define-key 'normal 'eww-mode-map
    ;; open this up for `vimish-tab'
    (kbd "gt") nil))
#+end_src

*** OKAY [#C] Configure ~display-time-mode~ for tab bar
There is probably more I can do (such as colorizing individual components), but
this is OK for now.

#+begin_src emacs-lisp :tangle yes
(setq display-time-day-and-date t ;; show the DoW and date in addition to the time
      display-time-load-average-threshold 0) ;; always display the load average
#+end_src

*** STRT [#B] Do not display tabs in side windows
Side windows, especially those displayed on the top and bottom, are working with
limited screen real estate. To save space, I'd like to hide the tab line.

The following code excludes ~tab-line-mode~ from buffer groups configured to
display in side windows:

*UPDATE*: This doesn't catch buffer groups whose definitions are deferred. For
example, the ~ilist~ buffer group doesn't get defined until after ~imenu-list~
loads, so tabs will appear in the ~ilist~ buffer until you manually run the
~dolist~ form below, kill the ~*Ilist*~ buffer, and open it again.

#+begin_src emacs-lisp :tangle yes
(after! vimish-tab
  (dolist (entry display-buffer-alist)
    (when-let ((condition (car entry))
               (fn-name (and (symbolp condition) (symbol-name condition)))
               (_ (string-match "\\`buffer-group-member-p--\\(.+\\)\\'" fn-name))
               (group (intern (match-string 1 fn-name)))
               (action (and (listp (cdr entry)) (cdr entry)))
               (alist (cdr action)))
      (when (memq 'side (mapcar #'car alist))
        (mapc (lambda (mode) (cl-pushnew mode vimish-tab-exclude-names))
              (buffer-group-plist-get group :names))
        (mapc (lambda (mode) (cl-pushnew mode vimish-tab-exclude-modes))
              (buffer-group-plist-get group :modes)))))
  ;; Treemacs buffers are treated specially
  (cl-pushnew 'treemacs-mode vimish-tab-exclude-modes))
#+end_src

*** HOLD [#C] Configure mail indicator
Wait until you have a Maildir set up, then look at configuration options for
~display-time-mode~.

** treemacs [13/18]
#+begin_quote
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a file and project explorer similar to NeoTree or vim’s NerdTree,
but largely inspired by the Project Explorer in Eclipse. It shows the file
system outlines of your projects in a simple tree layout allowing quick
navigation and exploration, while also possessing basic file management
utilities.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `ui/treemacs` module
brew install python3
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `ui/treemacs` module
sudo dnf -y install python3
#+end_src

*** DONE [#A] Unpin treemacs packages :bug:
It seems like half of the problems I encounter with =treemacs= and
=treemacs-lsp= are already solved upstream, so I'm going to roll the dice and
unpin those packages:

#+begin_src emacs-lisp :tangle packages.el
(unpin! (:ui treemacs))
#+end_src

*** DONE [#A] Allow resizable fonts :tweak:bug:
Right now, =C--= (~text-scale-decrease~) and =C-== (~text-scale-increase~) are
unmapped, but I can still use =C-x C--= or =C-x C-== to invoke
~text-scale-adjust~. However, before incorporating the following code snippet,
only the icons got resized, not the text itself:

#+begin_src emacs-lisp :tangle yes
(setq doom-themes-treemacs-enable-variable-pitch nil)
#+end_src

The culprit seems to have been that ~doom-themes-treemacs-enable-variable-pitch~
was enabled, so the file/directory labels were using the face specified by
~doom-themes-treemacs-variable-pitch-face~, which is currently ~variable-pitch~
(see =SPC h F variable-pitch RET= to get information on the face). Basically,
the face did not get resized.

The only downside is that Treemacs only uses fixed-width fonts now, which makes
certain things harder to read. Overall, however, I think it looks better.

See also:
+ [[help:doom-variable-pitch-font][doom-variable-pitch-font]]
+ [[doom:.local/straight/repos/themes/extensions/doom-themes-ext-treemacs.el][doom-themes-ext-treemacs.el]]
+ =M-x customize-group doom-themes-treemacs RET=

*** DONE [#A] Remove "Invalid face reference" errors :bug:
This comes from incorrect parsing of ~git status --porcelain~, which only
happens when ~treemacs-git-mode~ is operating in ~simple~ mode. By setting the
Doom-specific ~+treemacs-git-mode~ variable to ~extended~, we use a ~python3~
script instead of ~git~ to determine the git status of each file in a project.
(Alternatively, we could disable ~treemacs-git-mode~ altogether.)

#+begin_src emacs-lisp :tangle yes
(setq +treemacs-git-mode 'extended)
#+end_src

*** DONE [#B] Fix ace-window keybindings :hack:
This slows down startup a bit, but whatever (I'm not obsessed with startup):
#+begin_src emacs-lisp :tangle yes
(require 'ace-window)
#+end_src

Reference: https://github.com/hlissner/doom-emacs/issues/4555

*** DONE [#B] Do not collapse path strings :tweak:
#+begin_src emacs-lisp :tangle yes
(after! treemacs
  (setq treemacs-collapse-dirs 0))
#+end_src

*** DONE [#B] Do not read from popup frames :tweak:
Certain operations in Treemacs (e.g. renaming files) will pop up a child frame
in GUI Emacs to read a string. This frame is very small and has no borders, so
if the frame loses focus, it can look like Emacs is frozen (the child frame does
not close when it loses focus). There are two ways to fix this:

1. Configure the child frame to close when it loses focus
2. Always read from the minibuffer

I will go with option 2 for the following reasons:

- Consistent UI
- Easier to implement
- More flexible editing in the minibuffer vs. in the child frame

#+begin_src emacs-lisp :tangle yes
(setq treemacs-read-string-input 'from-minibuffer)
#+end_src

*** OKAY [#B] Display "+" and "-" icons in tty emacs :bug:
:LOGBOOK:
- Note taken on [2023-05-17 Wed 18:08] \\
  This is working for me today.
- Note taken on [2022-11-23 Wed 11:27] \\
  This is an open issue with Doom Emacs. It is not so much of a nuisance that I
  want to fix it myself, so for now, I'll just wait for a fix.
:END:
https://github.com/hlissner/emacs-doom-themes/issues/489

Work has been done towards this in [[*Align all Treemacs icons][another task]] (I incidentally discovered a way
to fix this while solving another problem). It might also be a decent idea to
use the default Treemacs theme in TTY Emacs (the default theme might have better
fallbacks).

Better yet, =doom-themes-ext-treemacs= could be patched to use the fallback TUI
icons from the default theme.

*** DONE [#C] Add keybindings to visit adjacent files :feat:
#+begin_src emacs-lisp :tangle yes
(after! treemacs-evil
  (defun my/treemacs-visit-next ()
    "Open the next node in another window."
    (interactive)
    (treemacs-next-line 1)
    (save-selected-window
      (treemacs-visit-node-no-split 1)))
  (defun my/treemacs-visit-previous ()
    "Open the previous node in another window."
    (interactive)
    (treemacs-previous-line 1)
    (save-selected-window
      (treemacs-visit-node-no-split 1)))
  (define-key! evil-treemacs-state-map
    "J" #'my/treemacs-visit-next
    "K" #'my/treemacs-visit-previous))
#+end_src

*** DONE [#C] Allow selection of treemacs window via =ace-window= :tweak:
https://github.com/doomemacs/doomemacs/issues/1177#issuecomment-464936107
#+begin_src emacs-lisp :tangle yes
(after! (:and treemacs ace-window)
  (setq aw-ignored-buffers (delq 'treemacs-mode aw-ignored-buffers)))
#+end_src

*** DONE [#C] Show the cursor in treemacs windows :tweak:
Once you've gotten used to the cursor being hidden in the Treemacs file explorer
window, seeing the cursor there can be visually jarring. However, consider the
following benefits of enabling the cursor in Treemacs:

1. *Easier to determine the selected window*. This is especially important when
   debugging with =dap-mode=, since it uses Treemacs to display data windows.
2. *Consistent UI between windows*. Just as enabling the mode-line in all
   windows helps reduce cognitive overhead, so can enabling the cursor.
3. *Consistent UI between graphical and TTY Emacs*. These days, I mostly use
   graphical Emacs, but it used to be the other way around and could be again.

#+begin_src emacs-lisp :tangle yes
(setq treemacs-show-cursor t)

;; No need for the fringe indicator with `hl-line' mode and visible cursor
(after! doom-themes-ext-treemacs
  (with-eval-after-load 'treemacs
    (setq treemacs-fringe-indicator-mode nil)))

;; Use a solid box cursor instead of an underline
(setq-hook! 'treemacs-mode-hook
  evil-treemacs-state-cursor 'box)
#+end_src

*** DONE [#C] Display truncation characters in the fringe :tweak:
Fringes are not displayed in Treemacs. When the right fringe is not displayed,
truncated lines end in ~$~. When running =C-l=, I can restore the fringes in
Treemacs and truncated lines are indicated by an arrow in the right fringe.
See also: [[info:emacs#Line Truncation][emacs#Line Truncation]]

Basically, I want to display the right fringe in Treemacs. The left fringe is
less important (only needed when scrolled to the right in order to show left
truncation characters, or when ~treemacs-fringe-indicator-mode~ is enabled). I
don't need ~treemacs-fringe-indicator-mode~ because ~hl-line-mode~ and
~treemacs-show-cursor~ already provide good visual indicators.

#+begin_src emacs-lisp :tangle yes
(after! doom-themes-ext-treemacs
  (with-eval-after-load 'treemacs
    (remove-hook 'treemacs-mode-hook #'doom-themes-hide-fringes-maybe)
    (advice-remove #'treemacs-select-window #'doom-themes-hide-fringes-maybe)))
#+end_src

*** DONE [#C] Set the text scale to -1 :tweak:
#+begin_src emacs-lisp :tangle yes
(setq treemacs-text-scale -1)
#+end_src

*** LOOP [#C] Configure revert-buffer :tweak:module:
Until I have a permanent fix for Treemacs icons, I want to call
~my/treemacs-modify-icons~ when refreshing the buffer.

#+begin_src emacs-lisp :tangle yes
(after! treemacs
  (defun my/treemacs-revert-buffer-function (&rest _)
    (my/treemacs-modify-icons)
    (treemacs-refresh))
  (setq-hook! 'treemacs-mode-hook
    revert-buffer-function #'my/treemacs-revert-buffer-function))
#+end_src

*** STRT [#B] Align all Treemacs icons :bug:
Some files, like =config.org_archive=, do not have icons configured in
=doom-themes-ext-treemacs=. This has been a recurring problem for me, despite
the gradual improvements upstream.

I still have more work to do, but for now, I have a decent manual workaround
(performed once per Emacs session). See the ~FIXME~ comment lines in the
following code block for more information.

The workaround is as follows:
1. =M-: my/treemacs-modify-icons RET= (from outside the Treemacs window)
2. =Q= (from the Treemacs window)
3. =SPC o p=

*UPDATE*: The ~FIXME~ items in the following code block are likely caused by
Doom theme extensions for Treemacs.

*UPDATE*: [[https://github.com/Alexander-Miller/treemacs/commit/f68a846f3ed593fa9ed081c45f0af9b1c67753a1][This Treemacs commit]] introduced directory-specific icons. Until Doom
Themes overrides the directory icons of the ~Default~ Treemacs theme, I am
disabling them, as they clash terribly with the ~doom-one~ Treemacs theme. (I'm
not sure how, but the ~doom-one~ Treemacs theme inherits the ~Default~ Treemacs
theme despite not being derived from that theme.)

#+begin_src emacs-lisp :tangle yes
;; REVIEW Consider detecting troublesome icons and automatically falling back to
;; the default icon for text files.
(defvar my/treemacs-icon-extension-alist
  '(("org" . ("org_archive"))
    ("sh" . ("bat"))
    ("txt" . ("Pipfile"))
    ("json" ;; "configuration" icon
     . ("project"
        "Pipfile.lock"
        "Cargo.lock"
        "Cargo.toml"))
    ("xlsx" . ("ods"))

    ;; TODO Match on file "vcs/dir-.+-closed\\.svg"
    ("dir-closed"
     . ("src-closed"
        "test-closed"
        "bin-closed"
        "build-closed"
        "git-closed"
        "github-closed"
        "public-closed"
        "private-closed"
        "temp-closed" "tmp-closed"
        "readme-closed" "docs-closed"
        "screenshots-closed" "icons-closed"))

    ;; TODO Match on file "vcs/dir-.+-open\\.svg"
    ("dir-open"
     . ("src-open"
        "test-open"
        "bin-open"
        "build-open"
        "git-open"
        "github-open"
        "public-open"
        "private-open"
        "temp-open" "tmp-open"
        "readme-open" "docs-open"
        "screenshots-open" "icons-open")))
  "Alist of file extension mappings for Treemacs icons.

The `car' of each element is a file extension with a desirable
Treemacs icon; the `cdr' is a list of file extensions that should
use that same icon.

If the `car' is a string, it is treated case-insensitively, as
Treemacs defines string extensions as lowercase. See the
`treemacs-icons' package for more info; for a quick reference,
see how `treemacs-create-theme' is used to define the \"Default\"
Treemacs theme.")

(defvar my/treemacs-fallback-icon-alist
  '((dir-closed . " +\t")
    (dir-open . " -\t")
    (root-closed . " +\t")
    (root-open . " -\t"))
  "Alist of file extension mappings for Treemacs TUI icons.

The `car' of each element is a file extension or a symbol
representing a special Treemacs entry (see documentation for the
EXTENSIONS argument of `treemacs-create-icon' for more info).

The `cdr' of each element is a string to use in place of an icon
in TTY Emacs (or whenever Treemacs cannot render icons).")

(defvar my/treemacs-fallback-icon-default "  \t"
  "Default fallback string for TUI icons.

This string is used as the TUI icon for all Treemacs entries not
matched in `my/treemacs-icon-fallback-alist'.")

(defun my/treemacs-fallback-icon (extension)
  "Return the fallback icon corresponding to EXTENSION."
  (when (stringp extension)
    (setq extension (downcase extension)))
  (or (alist-get extension my/treemacs-fallback-icon-alist)
      my/treemacs-fallback-icon-default))

(after! treemacs
  (defun my/treemacs-modify-icons (&optional theme)
    "Modify the icons for the Treemacs THEME (default current).
The following variables are consulted when modifying the theme:

  `my/treemacs-icon-extension-alist'
  `my/treemacs-fallback-icon-alist'
  `my/treemacs-fallback-icon-default'

Call this function after `treemacs-create-theme' is called to
ensure your customizations take hold."
    (unless (treemacs-theme-p theme)
      (setq theme (if (stringp theme)
                      (treemacs--find-theme theme)
                    treemacs--current-theme)))
    (let ((gui-icons (treemacs-theme->gui-icons theme))
          (tui-icons (treemacs-theme->tui-icons theme)))

      ;; Modify GUI icons
      (dolist (entry my/treemacs-icon-extension-alist)
        (let* ((key (car entry))
               (gui-icon (treemacs-get-icon-value (if (stringp key) (downcase key) key)))
               (extension-list (cdr entry)))
          (dolist (ext extension-list)
            (ht-set! gui-icons (if (stringp ext) (downcase ext) ext) gui-icon))))

      ;; Modify TUI icons
      (treemacs--maphash tui-icons (extension _)
        (ht-set! tui-icons extension (my/treemacs-fallback-icon extension)))))

  ;; FIXME: This advice either causes errors or fails to run
  (undefadvice! my/treemacs-modify-icons-a (theme &rest _)
    :after #'treemacs-create-theme
    :before #'treemacs-load-theme
    (my/treemacs-modify-icons theme))

  ;; FIXME: This doesn't work, either (this is easy to see when
  ;; `doom-themes-treemacs-theme' is set to `doom-color', or when running in TTY
  ;; Emacs). The only workaround I've found is to run `my/treemacs-modify-icons'
  ;; manually after opening Treemacs, closing the Treemacs window via
  ;; `treemacs-kill-buffer', and then opening Treemacs again.
  (add-hook! 'doom-load-theme-hook :append #'my/treemacs-modify-icons)

  ;; FIXME This function does not work when the Treemacs window is selected.
  ;; Also, the Treemacs window is always selected after this function runs, and
  ;; I'd rather keep the current window selected.
  (defun my/treemacs-select-theme ()
    "Select and load a new Treemacs theme.
Closes and re-opens Treemacs to apply the new theme."
    (interactive)
    (call-interactively #'treemacs-load-theme)
    (unless (eq (treemacs-current-visibility) 'none)
      (treemacs-select-window)
      (treemacs-kill-buffer)
      (treemacs)))

  (defun my/treemacs-current-theme ()
    "Return the name of the current Treemacs theme."
    (treemacs-theme->name treemacs--current-theme)))
#+end_src

*** STRT [#C] Use the same icons in treemacs as in dired :tweak:
I think there are at least two ways to achieve this:

1. Set ~doom-themes-treemacs-theme~ to ~doom-colors~, which uses
   =all-the-icons=, just like =dired= has been configured to use.
2. Enable ~treemacs-icons-dired-mode~ to use =treemacs= icons in =dired=.

Attempting the first option:

#+begin_src emacs-lisp :tangle no
;; I think I actually prefer the `doom-atom' theme -- it's less distracting
(setq doom-themes-treemacs-theme "doom-colors")
#+end_src

*UPDATE*: This does bring the Treemacs icon set closer to the Dired icon set,
but there are still some differences:

1. Most icons are the same, but some are different.
2. Treemacs uses slightly smaller icons (see ~all-the-icons-scale-factor~).
3. Treemacs uses different fallback icons (e.g. for =config.org_archive=).

That third difference is the most annoying in Treemacs.

*** TODO [#A] Fix treemacs workspace integration :bug:
This longstanding bug *impacts me worse than any other issue in my Emacs
installation*, because it is the only bug that meets all of the following
negative criteria:

1. I regularly encounter the bug during normal Emacs usage.
2. The bug breaks core functionality essential to my workflow.
3. Restarting Emacs is the only way I know how to fix the bug.
4. I don't know of any workarounds.

*UPDATE*: The ~treemacs--consolidate-projects~ function appears to be a valid
workaround, at least when a new Treemacs window completely fails to open. On
that note, when Treemacs fails to open, it often means that the ~treemacs-mode~
function exited non-locally before running ~treemacs--setup-mode-line~, so
~treemacs--setup-mode-line~ should be run in that case, as well.

#+begin_src emacs-lisp :tangle yes
(defun my/treemacs-workaround-fix ()
  "Run this command if Treemacs fails to open"
  (interactive)
  (cl-assert (eq major-mode 'treemacs-mode))

  ;; Workaround for utter brokenness
  (treemacs--consolidate-projects)

  ;; This is to facillitate a workaround for ugly icons
  (setq revert-buffer-function #'my/treemacs-revert-buffer-function)

  ;; Display the modeline in the expected format
  (treemacs--setup-mode-line)

  ;; Expand the root node at the top of the Treemacs buffer
  (goto-char 0)
  (treemacs-do-for-button-state
   :on-root-node-closed (treemacs--expand-root-node btn)
   :on-root-node-open (ignore btn)))
#+end_src

**** Symptoms
+ Cannot remove projects from Treemacs via =C-c C-p d=
  (~treemacs-remove-project-from-workspace~). For example:

  #+begin_example
  Remove project ox-ipynb from the current workspace? (y or n) y
  treemacs-remove-project-from-workspace: Wrong type argument: arrayp, nil
  #+end_example

+ Opening Treemacs via =SPC o p= (~+treemacs-toggle~) does not add the project
  to the Treemacs side window of the current workspace. For example, from
  =TODO.md= in the =~/Documents/src/life/bash-runbooks= workspace, the
  ~"bash-runbooks"~ project is added to the Treemacs side window of another
  workspace entirely.

+ Occasionally, the following string will be written to ~*Messages*~ buffer:

  #+begin_example
  Error running timer ‘treemacs--process-file-events’: (wrong-type-argument arrayp nil)
  #+end_example

**** Diagnostics
+ The symptoms seem to appear after opening a file outside of the project
  corresponding to the current workspace, but that might not be the one and only
  cause, if it even is a cause. =SPC p F= (~doom/find-file-in-other-project~)
  is one way to attempt to reproduce the issue.

+ The ~treemacs-current-workspace~ function always returns the same data,
  regardless of the workspace:

  #+begin_src lisp-data
  (treemacs-current-workspace) ;; =>
  #s(treemacs-workspace "Perspective doom"
                        (#s(treemacs-project "treemacs" "/home/eeowaa/.config/emacs/.local/straight/repos/treemacs" local-readable nil)
                         #s(treemacs-project "bash-runbooks" "/home/eeowaa/Documents/src/life/bash-runbooks" local-readable nil)))
  #+end_src

+ The ~+workspace-current-name~ function always returns the correct name. All it
  does is call ~(safe-persp-name (+workspace-current))~, which is just
  ~(safe-persp-name (get-current-persp))~.

+ The ~projectile-switch-project~ function (=SPC p p=) might -- but not
  necessarily -- add a Treemacs projects to the current "stuck" workspace:

  #+begin_src lisp-data
  (treemacs-current-workspace) ;; =>
  #s(treemacs-workspace "Perspective doom"
                        (#s(treemacs-project "treemacs" "/home/eeowaa/.config/emacs/.local/straight/repos/treemacs" local-readable nil)
                         #s(treemacs-project "bash-runbooks" "/home/eeowaa/Documents/src/life/bash-runbooks" local-readable nil)
                         #s(treemacs-project "doom" "/home/eeowaa/Documents/src/life/stow-dotfiles/doom/.config/doom" local-readable nil)))
  #+end_src

+ After upgrading Doom Emacs to commit ~07fca78~ (with =treemacs= unpinned), I
  frequenty encounter a problem that prevents me from opening Treemacs, but
  *never* in the first Doom workspace that I explicitly open. Sometime later,
  after editing a while, I open a new workspace with =SPC p p=
  (~projectile-switch-project~), try to open Treemacs with =SPC o p=
  (~+treemacs/toggle~), and get the following error:

  #+begin_example
  Debugger entered--Lisp error: (wrong-type-argument hash-table-p nil)
    (treemacs-project->position #s(treemacs-project :name "<name>" :path "<path>" :path-status local-readable :is-disabled? nil))
    (treemacs-find-file-node "<file>" #s(treemacs-project :name "<name>" :path "<path>" :path-status local-readable :is-disabled? nil))
    (treemacs--follow)
    (treemacs-select-window)
    (treemacs-add-and-display-current-project)
    (if (doom-project-p) (treemacs-add-and-display-current-project) (treemacs))
    (let nil (if (doom-project-p) (treemacs-add-and-display-current-project) (treemacs)))
    (if (eq val 'visible) (let nil (delete-window (treemacs-get-local-window))) (let nil (if (doom-project-p) (treemacs-add-and-display-current-project) (treemacs))))
    (let* ((val (cond ((treemacs-get-local-window) 'visible) ((treemacs-get-local-buffer) 'exists) (t 'none)))) (if (eq val 'visible) (let nil (delete-window (treemacs-get-local-window))) (let nil (if (doom-project-p) (treemacs-add-and-display-current-project) (treemacs)))))
    (+treemacs/toggle)
    (funcall-interactively +treemacs/toggle)
    (command-execute +treemacs/toggle)
  #+end_example

  The hash table referred to by ~(wrong-type-argument hash-table-p nil)~ is
  ~treemacs-dom~, a buffer-local variable in each Treemacs window. For some
  reason, it does not get set properly. Running ~treemacs--consolidate-projects~
  fixes the problem, however.

**** Ideas
+ Did the ~treemacs-workspace~ definition (~cl-struct~ and/or ~eieio~ class?)
  change the data type of the project list? It seems that arrays are expected,
  but lists are used. Maybe =treemacs-projectile= and/or Doom are out of sync
  with =treemacs=. Look for the following keywords in the =treemacs= package:
  - ~defclass~
  - ~cl-defstruct~
  - ~cl-defmethod~
  - ~gv-define-setter~

+ =treemacs-scope.el= (a part of =treemacs=) seems relevant:
  - ~treemacs-current-scope-type~
  - ~treemacs-persp-scope~ in =treemacs-persp.el=

+ What about the =treemacs-projectile= package?
  ~treemacs--projectile-current-user-project-function~ is added to
  ~treemacs--find-user-project-functions~. These functions are called by
  ~treemacs--find-current-user-project~, which is used by both =treemacs= and
  =treemacs-persp=.

*** TODO [#B] Allow switching git worktrees :feat:
My convention is to put alternate worktrees under =.git/worktree-paths=, which
is not allowed by Treemacs:

#+begin_quote
[Treemacs] Project '<name>' is included in '<default worktree path>'. Projects may not overlap.
#+end_quote

Of course, I could put worktrees somewhere else (I could do something similar to
=pipx= and how it stores virtualenvs in =~/.local/pipx/venvs=), but doing so
would break =direnv=, which I heavily rely upon.

Preferably, I would just automatically switch the project root in =treemacs=
when switching worktrees using =magit=. Perhaps there is a hook that I could
run, or advice if necessary.

For the time being, I will just expose the =.git= directory in Treemacs so that
I can at least manually navigate to the worktrees.

#+begin_src emacs-lisp :tangle yes
(setq treemacs-hide-dot-git-directory nil)
#+end_src

** unicode [0/0] :ARCHIVE:
#+begin_quote
This module extends Doom's ability to display non-English unicode. It is
primarily useful for non-English Emacs users, for whom Doom's built-in unicode
support in insufficient.
#+end_quote

** vc-gutter [3/4]
*** DONE [#B] Enable =vc-gutter= in terminal Emacs :feat:
TUI Emacs does not have a fringe; however, it does have a margin. Look to Doom
module documentation for =:ui vc-gutter= and =:os tty= for details.

#+begin_src emacs-lisp :tangle yes
(after! diff-hl
  (unless (window-system) (diff-hl-margin-mode)))
#+end_src

*** OKAY [#B] Enable toggling of VCS diff in the fringe :bug:
Unfortunately, when the =vc-gutter= module is enabled, I have found no way to
persistently disable =git-gutter= in a buffer.

*UPDATE*: With the =+diff-hl= module flag (to use =diff-hl= instead of
=git-gutter=), I have found that =M-x diff-hl-mode= does what I want. I just
added a toggle keybinding for this.

*** DONE [#C] Do not display =vc-gutter= in COMMIT_EDITMSG buffers :feat:
This is mainly a nuisance in terminal Emacs, where an empty margin is created.

Observations:
- These buffers are named "COMMIT_EDITMSG" and visit the corresponding file in
  the =.git/= directory.
- The ~use-package!~ declaration for ~diff-hl~ adds ~diff-hl-mode~ to
  ~find-file-hook~, which is why =diff-hl= gets activated in these buffers.
- There is no option provided by =diff-hl= that allows one to disable =diff-hl=
  in specific buffers, except for ~global-diff-hl~ mode, which is not used by
  the =:ui vc-gutter= module.
- Hooks for ~git-commit-mode~ should get run after ~find-file~ hooks, so by
  disabling =diff-hl= in a new ~git-commit-mode~ hook, we should be able to
  achieve what we want.
- Unfortunately, the assumptions in the previous observation do not produce the
  desired outcome.

#+begin_src emacs-lisp :tangle no
(when (modulep! :ui vc-gutter +diff-hl)
  (add-hook! git-commit-mode
    (diff-hl-mode -1)))
#+end_src

*UPDATE*: If ~git-commit-mode~ was a major mode, I could have just modified the
value of ~diff-hl-global-modes~. Unfortunately, it is a minor mode, so I need to
hack around it:

#+begin_src emacs-lisp :tangle yes
(defvar my/diff-hl-minor-modes '(not git-commit-mode smerge-mode)
  "List of minor modes to prevent `diff-hl-mode' from activating.
Similar to `diff-hl-global-modes', except for minor modes and
works even when `global-diff-hl-mode' is disabled.")

(defadvice! my/diff-hl-minor-modes-a (&optional arg)
  :before-while #'diff-hl-mode
  (cond
   ;; Do not prevent turning off `diff-hl-mode'
   ((or (and (eq arg 'toggle) diff-hl-mode)
        (and (numberp arg) (< arg 1))) t)

   ;; Decide whether we should turn it on based on active minor modes
   ((eq my/diff-hl-minor-modes t) t)
   ((eq (car-safe my/diff-hl-minor-modes) 'not)
    (not (seq-intersection local-minor-modes (cdr my/diff-hl-minor-modes))))
   (t (seq-intersection local-minor-modes my/diff-hl-minor-modes))))
#+end_src

*** STRT [#C] Keep fringe bitmaps looking good when changing themes :bug:
So far, only the Doom themes have /really/ good-looking fringe bitmaps for
=diff-hl=. I have attempted to extend Doom's customizations to Prot's theme
packages, but only for the dark themes (I find the narrow single-color fringe
hard to see in the light themes, so the wonkiness actually helps). Also,
=diff-hl-dired= remains untouched.

#+begin_src emacs-lisp :tangle yes
(when (and (modulep! :ui vc-gutter +pretty)
           (modulep! :ui vc-gutter +diff-hl)
           initial-window-system)

  (add-hook! 'diff-hl-mode-hook
    (defadvice! my/diff-hl-fringe-a (theme &rest _)
      :after '(load-theme consult-theme)
      (+vc-gutter-fix-diff-hl-faces-h)))

  (after! ef-themes
    (dolist (theme ef-themes-dark-themes)
      (eval (macroexpand-1
             `(custom-theme-set-faces! ',theme
                `(diff-hl-insert :foreground ,(ef-themes-get-color-value 'bg-added-refine nil ',theme))
                `(diff-hl-change :foreground ,(ef-themes-get-color-value 'bg-changed-refine nil ',theme))
                `(diff-hl-delete :foreground ,(ef-themes-get-color-value 'bg-removed-refine nil ',theme)))))))

  (with-eval-after-load 'modus-themes
    (custom-theme-set-faces! 'modus-vivendi
      `(diff-hl-insert :foreground ,(alist-get 'green-fringe-bg modus-themes-vivendi-colors))
      `(diff-hl-change :foreground ,(alist-get 'yellow-fringe-bg modus-themes-vivendi-colors))
      `(diff-hl-delete :foreground ,(alist-get 'red-fringe-bg modus-themes-vivendi-colors)))))
#+end_src

*UPDATE*: I have removed the ~+pretty~ flag from the =:ui vc-gutter= module,
because I find the half-width =diff-hl= fringes to /only/ look really nice in
Doom themes. I could dig a bit deeper and only enable half-width fringes for
Doom themes, but that's not something I'm currently interested in doing.

** vi-tilde-fringe [0/2]
#+begin_quote
Displays a tilde(~) in the left fringe to indicate an empty line, similar to Vi.
#+end_quote

*** STRT [#C] Replace =vi-tilde-fringe= with builtin functionality :tweak:
Emacs has a nicer-looking bitmap for lines after the end of a file than what
=vi-tilde-fringe= provides. Let's use the default functionality:

#+begin_src emacs-lisp :tangle yes
(setq-hook! '(prog-mode-hook text-mode-hook conf-mode-hook)
  indicate-empty-lines t)
#+end_src

FWIW, the fringe bitmap is named ~empty-line~ (as can be seen in
~fringe-bitmaps~), is defined as ~empty_line_bits~ in =fringe.c=, and is
assigned to ~standard_bitmaps~ in =fringe.c=.

*** STRT [#B] Create a =vi-tilde-margin= package :feat:module:
To my knowledge, TTY Emacs does not ship with an easy way to indicate the end of
buffer content. Let's see if I can fix that.

*UPDATE*: Turns out, this might not be possible without some serious hackery.
The problem is that margin content corresponds to buffer content, so how can we
display something in the margin past the end of the buffer?

References:
- [[info:elisp#Display Margins][elisp#Display Margins]]
- [[info:elisp#Text Properties][elisp#Text Properties]]
- [[info:elisp#Display Property][elisp#Display Property]]
- [[info:elisp#Overlay Properties][elisp#Overlay Properties]]
- ~linum-update-window~
- ~diff-hl-highlight-on-margin~

#+begin_src emacs-lisp :tangle no
(defgroup vi-tilde-margin nil
  "Vi tilde margin customizations."
  :group 'emulations
  :prefix 'vi-tilde-margin-)

(defface vi-tilde-margin-face '((t (:inherit 'default)))
  "Color for vi tilde displayed in the margin when line is empty."
  :group 'vi-tilde-margin)

(defcustom vi-tilde-margin-string "~"
  "String drawn in the margin."
  :group 'vi-tilde-margin
  :type 'string)

(defcustom vi-tilde-excluded-modes nil
  "Major modes where `global-vi-tilde-margin-mode' won't affect."
  :group 'vi-tilde-margin
  :type '(list symbol))

(defvar-local vi-tilde-margin--old-width nil)
(define-minor-mode vi-tilde-margin-mode
  "Minor mode to display tildes in the margin past EOB."
  :lighter " ~"
  :group 'emulations
  (if vi-tilde-margin-mode
      (progn
        (setq vi-tilde-margin--old-width left-margin-width)
        (when (< left-margin-width 1)
          (setq left-margin-width 1)
          (set-window-buffer nil (current-buffer))))
    (unless (= left-margin-width vi-tilde-margin--old-width)
      (setq left-margin-width vi-tilde-margin--old-width)
      (set-window-buffer nil (current-buffer)))))

(defun vi-tilde-margin-mode--turn-on ()
  (unless (or (minibufferp)
              (memq major-mode vi-tilde-excluded-modes))
    (vi-tilde-margin-mode +1)))

(define-globalized-minor-mode global-vi-tilde-margin-mode vi-tilde-margin-mode
  vi-tilde-margin-mode--turn-on
  :group 'vi-tilde-margin)
#+end_src

** window-select [5/6]
#+begin_quote
This module provides several methods for selecting windows without the use of
the mouse or spatial navigation (e.g. =C-w {h,j,k,l}=).
#+end_quote

*** DONE [#B] Allow =ace-window= to operate across frames in graphical Emacs :tweak:
By default, =ace-window= operates across all frames, but Doom's =window-select=
module configures =ace-window= to only operate within the current frame.

When using GUI Emacs, sometimes I like to work across multiple visible frames
(this is especially nice with a multi-monitor setup), so I'd like =ace-window=
to work across those visible frames. This makes far less sense for when I am
using TTY Emacs, because if I am using multiple frames, they are typically
spread out between multiple =tmux= windows in a single terminal or terminal
emulator.

#+begin_src emacs-lisp :tangle yes
(after! ace-window
  (when initial-window-system
    (setq aw-scope 'visible)))
#+end_src

Note that the ~visible~ choice for ~aw-scope~ cannot be relied upon to restrict
window selection to visible TTY frames, because the mechanism relies on the
builtin function ~frame-visible-p~, which according to its docstring:

#+begin_quote
If FRAME is a text terminal frame, this always returns t.
Such frames are always considered visible, whether or not they are
currently being displayed on the terminal.
#+end_quote

*** DONE [#B] Do not dim the buffer content during selection :tweak:
#+begin_src emacs-lisp :tangle yes
(setq aw-background nil)
#+end_src

*** OKAY [#B] Show =ace-window= selection indicators in ~*info*~ buffers :bug:
:LOGBOOK:
- Note taken on [2023-01-22 Sun 16:55] \\
  This does not seem to be a problem for me anymore.
:END:
Displaying the indicator in the bottom-left instead of the top-left means that
the overlay displayed by ~*info*~ buffers does not hide the =ace-window=
indicator.

#+begin_src emacs-lisp :tangle no
(setq aw-char-position 'left)
#+end_src

*** OKAY [#B] Make the selection character more visible :tweak:
:LOGBOOK:
- Note taken on [2023-01-22 Sun 16:57] \\
  Right now, I'm happy with the default selection character face.
:END:
#+begin_src emacs-lisp :tangle no
(custom-set-faces!
  '(aw-leading-char-face
    :foreground "white" :background "red"
    :weight bold :height 2.5 :box (:line-width 10 :color "red")))
#+end_src

*** DONE [#C] Make the selection character the default size in modus themes :tweak:
The modus themes (~modus-vivendi~ and ~modus-operandi~) make the selection
character slightly larger than the default face, which makes the window content
shift slightly downward, which is quite annoying.

#+begin_src emacs-lisp :tangle no
(defadvice! my/aw-face-height-a (theme &rest _)
  :after '(load-theme consult-theme)
  (when (string-match-p "\\`modus-" (symbol-name theme))
    (set-face-attribute 'aw-leading-char-face nil
                        :height (face-attribute 'default :height))))
#+end_src

*** TODO [#B] Display window numbers in the mode line :feat:
Take a look at ~doom-modeline-segment--window-number~ (currently unused in my
config), which uses =ace-window= to display line numbers in the mode line. I
could either make this permanent, or just temporarily display window numbers
when I activate window selection functions.

** workspaces [4/4]
#+begin_quote
This module adds support for workspaces, powered by persp_mode, as well as a API
for manipulating them.
#+end_quote

*** COMMENT Vim documentation
#+begin_quote
REORDERING TAB PAGES:

:tabm[ove] [N]                                          :tabm :tabmove
:[N]tabm[ove]
                Move the current tab page to after tab page N.  Use zero to
                the move, thus if the second tab is the current one,
                :tabmove 1 and :tabmove 2  have no effect.
                Without N the tab page is made the last one.
                    :.tabmove   " do nothing
                    :-tabmove   " move the tab page to the left
                    :+tabmove   " move the tab page to the right
                    :0tabmove   " move the tab page to the beginning of the tab
                                " list
                    :tabmove 0  " as above
                    :tabmove    " move the tab page to the last
                    :$tabmove   " as above
                    :tabmove $  " as above
                    :tabmove #  " move the tab page after the last accessed
                                " tab page

:tabm[ove] +[N]
:tabm[ove] -[N]
                Move the current tab page N places to the right (with +) or to
                the left (with -).
                    :tabmove -  " move the tab page to the left
                    :tabmove -1 " as above
                    :tabmove +  " move the tab page to the right
                    :tabmove +1 " as above


Note that although it is possible to move a tab behind the N-th one by using
:Ntabmove. And move it by N places by using :+Ntabmove. For clarification what
+N means in this context see [range].
#+end_quote

*** DONE [#A] Bind ~+workspace/swap-left~ and ~+workspace/swap-right~ to keys :feat:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:when (modulep! :ui workspaces)
       (:prefix-map ("TAB" . "workspace")
        :desc "Move left"  "H" #'+workspace/swap-left
        :desc "Move right" "L" #'+workspace/swap-right)))
#+end_src

*** DONE [#B] Give ~persp-keymap-prefix~ binding to =projectile= :tweak:
By default, =C-c p= is used as the prefix for ~persp-mode-map~, but I would
prefer to save that prefix for =projectile= commands. I will do what Doom does
for standard Emacs bindings (snippet from =+emacs-bindings.el=):

#+begin_src emacs-lisp :tangle early-init.el
(use-package-hook! persp-mode
  :pre-init (setq persp-keymap-prefix (kbd "C-c w")))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! projectile
  (define-key! projectile-mode-map
    "C-c p" #'projectile-command-map))
#+end_src

*** DONE [#B] Delete workspaces even if a childframe references once :bug:hack:
Sometimes I get the following message when attempting to delete a workspace via
~+workspace/delete~ (=SPC TAB d=) and there is a hidden child frame for a Magit
=transient= command:

#+begin_quote
doom | (user-error Can’t close workspace, it’s visible in another frame)
#+end_quote

I fixed the issue by modifying ~my/display-buffer-in-child-frame~ to be more
like ~company-box--make-frame~ (setting ~after-make-frame-functions~ and
~before-make-frame-hook~ to ~nil~).

*** DONE [#B] Do not continually add ~display-time-mode~ information to tab bar :bug:hack:
With each new workspace that I open, another string containing the current date
and load average is appended to the string returned by ~tab-bar-format-global~.
This is the ~global-mode-string~, which as I write this, is currently set to
~("" display-time-string battery-mode-line-string display-time-string display-time-string display-time-string display-time-string)~.

This could be happening for one of two reasons that I can think of:
1. New =persp= hooks in =:ui workspaces=
2. Bumped =doom-modeline= package

*UPDATE*: This was a problem in =doom-modeline=. I updated configuration in my
custom =:ui tabs= module to fix the problem.

** zen [3/3]
#+begin_quote
This module provides two minor modes that make Emacs into a more comfortable
writing or coding environment. Folks familiar with "distraction-free" or "zen"
modes from other editors -- or [[https://github.com/rnkn/olivetti][olivetti]], [[https://github.com/zk-phi/sublimity][sublimity]], and [[https://github.com/IdoMagal/Tabula-Rasa][tabula-rasa]] (Emacs
plugins) -- will feel right at home.
#+end_quote

*** DONE [#B] Create a minor mode to center text and do nothing else :tweak:
Options:
1. Use ~centered-window-mode~
2. Create a new minor mode utilizing ~visual-fill-column-mode~
3. Modify global default value of ~visual-fill-column-center-text~ and just use
   ~visual-fill-column-mode~.

I never use ~visual-fill-column-mode~ by itself, so I will just hijack it for
centering text within a window.

#+begin_src emacs-lisp :tangle yes
(setq-default visual-fill-column-center-text t
              visual-fill-column-width 120)
#+end_src

*** DONE [#C] Keep the VC gutter close to the text in Zen mode :tweak:
#+begin_src emacs-lisp :tangle yes
(setq-default visual-fill-column-fringes-outside-margins nil)
#+end_src

*** DONE [#C] Unclutter the interface in additional ways :feat:
#+begin_src emacs-lisp :tangle yes
(after! writeroom-mode

  (defvar my/zen--old-display-line-numbers nil)
  (defvar my/zen--old-hl-line-mode nil)
  (defvar my/zen--old-column-highlight-mode nil)
  (defvar my/zen--old-display-fill-column-indicator-mode nil)
  (defvar my/zen--old-tab-bar-mode nil)
  (defvar my/zen--old-tab-line-mode nil)
  (defvar my/zen--old-vi-tilde-fringe-mode nil)
  (defvar my/zen--old-diff-hl-mode nil)

  (add-hook! writeroom-mode :append
    (defun my/zen-toggle-h ()
      "Toggle distracting features."
      (if writeroom-mode
          (progn
            ;; Save settings
            (setq my/zen--old-display-line-numbers
                  (bound-and-true-p display-line-numbers)
                  my/zen--old-hl-line-mode
                  (bound-and-true-p hl-line-mode)
                  my/zen--old-column-highlight-mode
                  (bound-and-true-p column-highlight-mode)
                  my/zen--old-display-fill-column-indicator-mode
                  (bound-and-true-p display-fill-column-indicator-mode)
                  my/zen--old-tab-bar-mode
                  (bound-and-true-p tab-bar-mode)
                  my/zen--old-tab-line-mode
                  (bound-and-true-p tab-line-mode)
                  my/zen--old-vi-tilde-fringe-mode
                  (bound-and-true-p vi-tilde-fringe-mode)
                  my/zen--old-diff-hl-mode
                  (bound-and-true-p diff-hl-mode))

            ;; Remove distractions
            (setq display-line-numbers nil)
            (hl-line-mode -1)
            (column-highlight-mode -1)
            (display-fill-column-indicator-mode -1)
            (tab-bar-mode -1)
            (tab-line-mode -1)
            (vi-tilde-fringe-mode -1)
            (diff-hl-mode -1))

        ;; Restore previous state
        (setq display-line-numbers my/zen--old-display-line-numbers)
        (if my/zen--old-hl-line-mode (hl-line-mode +1))
        (if my/zen--old-column-highlight-mode (column-highlight-mode +1))
        (if my/zen--old-display-fill-column-indicator-mode (display-fill-column-indicator-mode +1))
        (if my/zen--old-tab-bar-mode (tab-bar-mode +1))
        (if my/zen--old-tab-line-mode (tab-line-mode +1))
        (if my/zen--old-vi-tilde-fringe-mode (vi-tilde-fringe-mode +1))
        (if my/zen--old-diff-hl-mode (diff-hl-mode +1))))))
#+end_src

* :editor
#+begin_quote
Modules that affect and augment your ability to manipulate or insert text.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :editor
#+end_src

** Miscellany [2/3]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Configure line-feed behavior :feat:tweak:
#+begin_src emacs-lisp :tangle yes
;; Display ^L characters as horizontal lines
(use-package! page-break-lines
  :config (global-page-break-lines-mode))

;; When using vanilla bindings, have C-l send the current line to the top of the
;; window (like most shells do)
(setq recenter-positions '(top bottom middle))

;; When using `evil', have C-l refresh the buffer and and redraw the display.
;; Use zt, zz, and zb to reposition the current line instead of C-l.
(when (modulep! :editor evil)
  (global-set-key (kbd "C-l") #'eeowaa-refresh-buffer-and-display))

;; Perform a line feed after jumping to a ^L character
(defadvice! my/recenter-top-a (&rest _)
  "Perform a line feed after jumping to a ^L character"
  :after #'forward-page
  (recenter 0))
#+end_src

*** DONE [#B] Truncate lines by default :tweak:
Doom already sets the default value of ~truncate-lines~ to ~t~ in
=doom-editor.el=, but it also happens add ~visual-line-mode~ to
~text-mode-hook~. For now, I would rather truncate lines in *all* modes,
including text modes.

#+begin_src emacs-lisp :tangle yes
(remove-hook 'text-mode-hook #'visual-line-mode)
#+end_src

*** TODO [#B] Use Doom's =so-long= configuration :bug:
For some reason, the ~use-package~ form for =so-long= (in
=~/.config/emacs/lisp/doom-editor.el=) is not in effect, though I would like to
use it.

** evil [9/12]
#+begin_quote
This holy module brings the vim experience to Emacs.
#+end_quote

*** DONE [#A] Redefine =:q= and =:wq= semantics :tweak:
+ Where applicable, integrate with ~server-edit~ (bound to =C-x #=)
+ Do not ever use to exit Emacs; just for writing and closing buffers

#+begin_src emacs-lisp :tangle yes
(evil-define-command my/evil-quit-a (&optional force)
  "Mark the current buffer as \"Done\" when performing a server
edit; otherwise, just kill the current buffer. Prompt to save the
current buffer first unless the `force' argument is given."
  :repeat nil
  (interactive "<!>")
  (if (and (boundp 'server-buffer-clients)
           (fboundp 'server-edit)
           (fboundp 'server-buffer-done)
           server-buffer-clients)
      (if force
          (server-buffer-done (current-buffer))
        (server-edit))
    (when force
      (set-buffer-modified-p nil))
    (kill-current-buffer)))

;; Works for all variations of `:q'
(advice-add 'evil-quit :override #'my/evil-quit-a)
#+end_src

*** DONE [#A] Redefine =:bd= semantics :tweak:module:
Currently, =:bd= deletes the window after killing the buffer. I would prefer it
to call ~vimish-tab-close-tab-or-window~ instead.

=:bd= is mapped to ~evil-delete-buffer~ (see the =evil-maps= library), so we can
just advise that function. I would prefer to use ~:around~ advice with ~letf!~,
but I haven't had luck with that for whatever reason.

#+begin_src emacs-lisp :tangle yes
(evil-define-command my/evil-delete-buffer-a (buffer &optional bang)
  (interactive "<b><!>")
  (with-current-buffer (or buffer (current-buffer))
    (when bang
      (set-buffer-modified-p nil)
      (dolist (process (process-list))
        (when (eq (process-buffer process) (current-buffer))
          (set-process-query-on-exit-flag process nil))))
    ;; get all windows that show this buffer
    (let ((wins (get-buffer-window-list (current-buffer) nil t)))
      ;; if the buffer which was initiated by emacsclient,
      ;; call `server-edit' from server.el to avoid
      ;; "Buffer still has clients" message
      (if (and (fboundp 'server-edit)
               (boundp 'server-buffer-clients)
               server-buffer-clients)
          (server-edit)
        (kill-buffer nil))
      ;; close all windows that showed this buffer
      (mapc #'(lambda (w)
                (condition-case nil
                    (with-selected-window w
                      (vimish-tab-close-tab-or-window))
                  (error nil)))
            wins))))

(advice-add 'evil-delete-buffer :override #'my/evil-delete-buffer-a)
#+end_src

*** DONE [#B] Do not recenter windows after splitting :hack:tweak:
I wanted to use ~:around~ advice with ~cl-flet~ to temporarily redefine the
~recenter~ function to do nothing, but couldn't quite get that to work (perhaps
due to complications arising from ~evil-define-command~ and its ~interactive~
form). Using ~:override~ advice in this case seems brittle, but works for now.

*NOTE*: If this breaks someday, look into Doom's ~letf!~ macro.

#+begin_src emacs-lisp :tangle yes
(evil-define-command my/evil-window-split-a (&optional count file)
  "Same as `+evil-window-split-a', but does not recenter the window."
  :repeat nil
  (interactive "P<f>")
  (let ((origwin (selected-window))
        window-selection-change-functions)
    (select-window (split-window origwin count 'below))
    (unless evil-split-window-below
      (select-window origwin)))
  (run-hook-with-args 'window-selection-change-functions nil)
  (when (and (not count) evil-auto-balance-windows)
    (balance-windows (window-parent)))
  (if file (evil-edit file)))

(evil-define-command my/evil-window-vsplit-a (&optional count file)
  "Same as `+evil-window-vsplit-a', but does not recenter the window."
  :repeat nil
  (interactive "P<f>")
  (let ((origwin (selected-window))
        window-selection-change-functions)
    (select-window (split-window origwin count 'right))
    (unless evil-vsplit-window-right
      (select-window origwin)))
  (run-hook-with-args 'window-selection-change-functions nil)
  (when (and (not count) evil-auto-balance-windows)
    (balance-windows (window-parent)))
  (if file (evil-edit file)))

(advice-add #'+evil-window-split-a :override #'my/evil-window-split-a)
(advice-add #'+evil-window-vsplit-a :override #'my/evil-window-vsplit-a)
#+end_src

*** DONE [#B] Always select newly-split window :tweak:
#+begin_src emacs-lisp :tangle yes
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

*** DONE [#B] Do not select trailing newlines with =v$= :tweak:
#+begin_src emacs-lisp :tangle yes
(setq evil-v$-excludes-newline t)
#+end_src

*** DONE [#C] Define Vim bindings for games :feat:
=evil-collection= already defines Vim bindings for Tetris, but not for any other
builtin game.

#+begin_src emacs-lisp :tangle yes
(after! 5x5
  (map! :mode 5x5-mode
    :e "k" #'5x5-up
    :e "j" #'5x5-down
    :e "h" #'5x5-left
    :e "l" #'5x5-right))

(after! blackbox
  (map! :mode blackbox-mode
    :e "k" #'bb-up
    :e "j" #'bb-down
    :e "h" #'bb-left
    :e "l" #'bb-right))

(after! bubbles
  (map! :mode bubbles-mode
    :e "k" #'previous-line
    :e "j" #'next-line
    :e "h" #'backward-char
    :e "l" #'forward-char))

(after! pong
  (defadvice! my/pong-emacs-evil-state-a (&rest _)
    "Use Emacs evil state in `pong'"
    :after #'pong-init
    (evil-emacs-state))
  (map! :map pong-mode-map
    :e "k" #'pong-move-up
    :e "j" #'pong-move-down
    :e "h" #'pong-move-left
    :e "l" #'pong-move-right))

(after! snake
  (map! :mode snake-mode
    :e "l" #'snake-move-right
    :e "h" #'snake-move-left
    :e "k" #'snake-move-up
    :e "j" #'snake-move-down))

(after! solitaire
  (map! :mode solitaire-mode
    :e "l" #'solitaire-right
    :e "h" #'solitaire-left
    :e "k" #'solitaire-up
    :e "j" #'solitaire-down
    :e "L" #'solitaire-move-right
    :e "H" #'solitaire-move-left
    :e "K" #'solitaire-move-up
    :e "J" #'solitaire-move-down))
#+end_src

*** DONE [#C] Make =C-i= behave as =TAB= in info mode :tweak:module:
#+begin_src emacs-lisp :tangle yes
(defadvice! my/ergonomic-info-bindings-a (&rest _)
  :after #'evil-collection-info-setup
  (evil-collection-define-key 'normal 'Info-mode-map
    (kbd "C-t") nil ;; open this up for `vimish-tab'
    (kbd "C-i") 'Info-next-reference
    (kbd "M-,") 'Info-history-back
    (kbd "C-M-,") 'Info-history-forward))
#+end_src

*** DONE [#C] Bind base64-encoding/decoding commands :feat:
Currently, =] b= and =[ b= are bound to ~next-buffer~ and ~previous-buffer~,
respectively. However, I rarely use those commands, and they are also available
via =SPC b n= and =SPC b p=.

*UPDATE*: I can just bind the base64 commands in visual state and leave the
buffer-visiting commands alone:

#+begin_src emacs-lisp :tangle yes
(map! :v "]b" #'base64-encode-region
      :v "[b" #'base64-decode-region)
#+end_src

*** DONE [#B] Do not automatically balance windows :tweak:
The following works when splitting windows, but not when moving windows (e.g.
with =C-w L=, =C-w H=, and the like).

#+begin_src emacs-lisp :tangle yes
(setq evil-auto-balance-windows nil)
#+end_src

Maybe take a look at the ~even-window-sizes~ variable. *UPDATE*: This is working
for me now, even when moving windows.

*** LOOP [#B] Improve visual line navigation :bug:
I would like to use the standard =gj= and =gk= Vim bindings to navigate between
wrapped visual lines, but a lot of other modes wrap those bindings. An
altnerative solution would be to enable ~evil-respect-visual-line-mode~ in
=DOOMDIR/init.el=, but apparently there are problems with doing so. See this
open issue in Doom Emacs: https://github.com/doomemacs/doomemacs/issues/2447

A temporary workaround is to switch to Emacs state using =C-z= and then use
=C-n= and =C-p= to navigate between visual lines. Once finished, use =C-z= again
to exit Emacs state.

*UPDATE*: I am trying this again.

#+begin_src emacs-lisp :tangle early-init.el
(setq evil-respect-visual-line-mode t)
#+end_src

*** STRT [#B] Associate evil states with major modes :tweak:
#+begin_src emacs-lisp :tangle yes
(pushnew! evil-emacs-state-modes 'noaa-mode)
#+end_src

*** TODO [#B] Associate evil states with buffer names :feat:
Off the top of my head, I can think of the following use cases:

- I want ~*compilation*<emacs>~ buffers created by ~doom/reload~ to start in
  ~normal~ state, not ~insert~ state. For some reason, this buffer uses ~comint~
  mode, not ~compilation~ mode, even though a ~compilation~ magic mode header
  is present in the buffer.

- I want ~*Org Note*~ buffers, created by ~org-add-note~, to start in ~insert~
  state, not ~normal~ state. However, the major mode is just ~org-mode~, and
  there is no special minor mode; the only thing I have to key off of is the
  buffer name.

** file-templates [2/2]
#+begin_quote
This module adds file templates for blank files, powered by yasnippet.
#+end_quote

*** DONE [#A] Figure out how to override existing templates :doc:
The function ~+file-templates-check-h~ determines if the current buffer is a
candidate for file template expansion, so its source code is probably the best
place to determine how this works.

Digging deeper, it looks like the following form in ~+file-templates-check-h~ is
what actually determines which, if any, template applies to the current buffer:

#+begin_src emacs-lisp :tangle no
(when-let (rule (cl-find-if #'+file-template-p +file-templates-alist))
  (apply #'+file-templates--expand rule))
#+end_src

For a buffer visiting a file named =foo.sh=, the ~rule~ symbol in the ~when-let~
form in the above code block would be assigned the value ~(sh-mode)~, a member
of ~+file-templates-alist~.

Now the important thing is how ~+file-templates--expand~ actually works.
*Potentially-important note*: ~yas_snippets-dirs~ contains ~+snippets-dir~, which
evaluates to =DOOMDIR/snippets/=.

From https://tecosaur.github.io/emacs-config/config.html#file-templates:
#+begin_src emacs-lisp :tangle no
(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
(set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)
#+end_src

*** DONE [#B] Simplify the file template for =sh-mode= :tweak:
Doom Emacs' builtin file template for =sh-mode= is not suitable for portable
shell scripts, so I created my own:
#+begin_src snippet :tangle snippets/sh-mode/__
#!/bin/sh
$0
#+end_src

** fold [0/5]
#+begin_quote
This module marries hideshow, vimish-fold and outline-minor-mode to bring you
marker, indent and syntax-based code folding for as many languages as possible.
#+end_quote

*** COMMENT Documentation
Emacs has a lot of different packages available for folding. For example:

+ =vimish-fold=
  - Used by =:editor fold=
  - External package installed by Doom
  - Define folds by region
    + Create via =zf= (~evil-vimish-fold/create~)
    + Expand via =zo=
  - Can also fold via markers
    + See ~vimish-fold-marks~

+ =ts-fold=
  - Used by =:editor fold=
  - External package (at least for Emacs < 29) installed by Doom
  - Leverages =tree-sitter= parser to define foldable regions
    + =ts-fold= must be instrumented separately from =tree-sitter=
    + Just because a mode has a =tree-sitter= parser doesn't mean that it has a
      corresponding =ts-fold= implementation
  - Use this when available

+ =hideshow=
  - Used by =:editor fold=
  - Builtin package
  - Fold between start/end regexps
    + End regexp is technically optional
    + For example, take a look at Doom's customization of the ~yaml-mode~ entry
      for ~hs-special-modes-alist~, which uses ~+fold-hideshow-forward-block-by-indent-fn~
      to find the end of the foldable region
  - Regexps are defined per major mode
    + Only one start/end pair of regexps available at a time
    + Can possibly overcome this limitation via a custom
      ~hs-forward-sexp-function~ that moves point to the end of a foldable block
      based on the starting regexp that point is "looking at"

+ =outline-minor-mode=
  - Used by =:editor fold=
  - Builtin package
  - Fold regions defined by header regexps
    + Point must be on the header in order to fold the region
    + Cannot define end regexps to bound the region
  - Most limited folding available

+ =origami=
  - Not supported by =:editor fold= (must advise)
  - External package
  - Most flexible folding mechanism
    + Define ad-hoc parser functions per major mode
    + Comes with helper functions for defining start/end regexp pairs, which can
      be used to define multiple types of foldable blocks per major mode
  - Most flexible keybindings
    + Supports most or all Vim keybindings for closing and expanding folds
    + List of bindings available here: [[*Vim help text for folding]]
  - Purportedly slow for large files
    + Still need to verify this for myself
    + Can mitigate by enabling for select modes (e.g. ~markdown-mode~) and
      falling back to more lightweight/performant folding

+ =yafolding=
  - Not supported by =:editor fold= (must advise)
  - External package
  - Fold based on indentation
    + =origami= falls back to indentation-based folding
    + =hideshow= can utilize ~+fold-hideshow-forward-block-by-indent-fn~
  - I see no reason to install this at the moment

*** COMMENT Vim help text for folding
This only contains the relevant commands and nothing Vim-internal.

**** Creating and deleting folds
***** zf{motion} or {Visual}zf - Operator to create a fold
This only works when 'foldmethod' is "manual" or "marker". The new fold will be
closed for the "manual" method. 'foldenable' will be set.

***** zF - Create a fold for [count] lines
Works like "zf".

***** zd - Delete one fold at the cursor
When the cursor is on a folded line, that fold is deleted. Nested folds are
moved one level up. In Visual mode one level of all folds (partially) in the
selected area are deleted. Careful: This easily deletes more folds than you
expect and there is no undo for manual folding. This only works when
'foldmethod' is "manual" or "marker".

***** zD - Delete folds recursively at the cursor
In Visual mode all folds (partially) in the selected area and all nested folds
in them are deleted. This only works when 'foldmethod' is "manual" or "marker".

***** zE - Eliminate all folds in the window
This only works when 'foldmethod' is "manual" or "marker".

**** Opening and closing folds
***** zo - Open one fold under the cursor
When a count is given, that many folds deep will be opened. In Visual mode one
level of folds is opened for all lines in the selected area.

***** zO - Open all folds under the cursor recursively
Folds that don't contain the cursor line are unchanged. In Visual mode it opens
all folds that are in the selected area, also those that are only partly
selected.

***** zc - Close one fold under the cursor
When a count is given, that many folds deep are closed. In Visual mode one level
of folds is closed for all lines in the selected area. 'foldenable' will be set.

***** zC - Close all folds under the cursor recursively
Folds that don't contain the cursor line are unchanged. In Visual mode it closes
all folds that are in the selected area, also those that are only partly
selected. 'foldenable' will be set.

***** za - Toggle fold
When on a closed fold: open it. When folds are nested, you may have to use "za"
several times. When a count is given, that many closed folds are opened.

When on an open fold: close it and set 'foldenable'. This will only close one
level, since using "za" again will open the fold. When a count is given that
many folds will be closed (that's not the same as repeating "za" that many
times).

Open just enough folds to make the line in which the cursor is located not
folded.

***** zm - Fold more
Subtract ~v:count1~ from 'foldlevel'. If 'foldlevel' was already zero nothing
happens. 'foldenable' will be set.

***** zM - Close all folds
Set 'foldlevel' to 0. 'foldenable' will be set.

***** zr - Reduce folding
Add ~v:count1~ to 'foldlevel'.

***** zR - Open all folds
This sets 'foldlevel' to highest fold level.

**** Moving over folds
***** [z - Move to the start of the current open fold
If already at the start, move to the start of the fold that contains it. If
there is no containing fold, the command fails. When a count is used, repeats
the command [count] times.

***** ]z - Move to the end of the current open fold
If already at the end, move to the end of the fold that contains it. If there is
no containing fold, the command fails. When a count is used, repeats the command
[count] times.

***** zj - Move downwards to the start of the next fold
A closed fold is counted as one fold. When a count is used, repeats the command
[count] times. This command can be used after an |operator|.

***** zk - Move upwards to the end of the previous fold
A closed fold is counted as one fold. When a count is used, repeats the command
[count] times. This command can be used after an operator.

*** STRT [#A] Enable fine-grained folding for YAML mode :bug:
Play around with folding in the following code block and just /try/ to suppress
your annoyance:

#+begin_src yaml :tangle no
foo:
  bar:
    - 1
    - 2
    - 3
  baz:
    - 4
    - 5
    - 6
qux:
  - hello
  - goodbye
#+end_src

My mind can't even comprehend how broken this is. *UPDATE*: =yaml-mode= falls
back to using =hideshow=, which can be configured to remember nested folds when
closing and opening enveloping folds:

#+begin_src emacs-lisp :tangle yes
(setq hs-allow-nesting t)
#+end_src

*** STRT [#A] Enable fine-grained folding for JSON mode :bug:
Play around with folding in the following code block and just /try/ to suppress
your annoyance:

#+begin_src json :tangle no
{
  "foo": {
    "bar": [
      1,
      2,
      3
    ]
    "baz": [
      4,
      5,
      6
    ]
  },
  "qux": [
    "hello",
    "goodbye"
  ]
}
#+end_src

My mind can't even comprehend how broken this is. *UPDATE*: Since adding the
=+lsp= flag to the =:lang json= module, =json-mode= uses tree-sitter folding,
which actually works pretty well.

*** STRT [#B] Fix support for ~outline-minor-mode~ without =hideshow= :hack:bug:
Some buffers only support ~outline-minor-mode~, but the =:editor fold= module
does not account for that very well. The following advice fixes /most/ of those
problems (still need to advise ~+fold/next~ and ~+fold/previous~):

#+begin_src emacs-lisp :tangle yes
(defadvice! my/hideshow-suppress-error-a (fn &rest args)
  :around #'+fold--ensure-hideshow-mode
  (ignore-errors (apply fn args)))

(defadvice! my/hideshow-skip-maybe-a (fn &rest args)
  :around #'+fold/open-all
  (if-let ((level (car-safe args))
           (_ (integerp level)))
      (letf! (defadvice my/outline-correct-sublevel-a (args)
               :filter-args #'outline-hide-sublevels
               (list level))
        (apply fn args))
    (letf! (defadvice my/hs-life-goes-on-a (fn &rest args)
             :around #'hs-show-all
             (hs-life-goes-on (apply fn args)))
      (apply fn args))))

(defadvice! my/outline-close-all-maybe-a (&optional level)
  :after #'+fold/close-all
  (when (fboundp 'outline-hide-sublevels)
    (save-excursion
      (outline-hide-sublevels (or level 1)))))
#+end_src

*** STRT [#C] Make the =vimish-fold= header fill the window :tweak:
To test, fold an arbitrary region using =zf= (~evil-vimish-fold/create~).

#+begin_src emacs-lisp :tangle no
(setq vimish-fold-header-width nil)
#+end_src

Unfortunately, the above code block does not work well in the following
situations:

1. *When line numbers are displayed*
   - This is because line numbers are part of the window body. From the elisp
     manual section on [[info:elisp#Basic Windows][basic window concepts]]:
     #+begin_quote
     Note also, that line numbers (and their surrounding whitespace) as
     displayed by ~display-line-numbers-mode~ do not count as decorations
     either; they are part of the window’s body too.
     #+end_quote
   - Could calculate the width based on how many screen columns are taken up by
     line numbers.

2. *When the text scale is adjusted*
   - Could probably add a hook or advice the text scaling functions (e.g.
     ~text-scale-adjust~, bound to =C-x C-==).

*** TODO [#A] Enable Vim fold markers :feat:
Reference: https://www.reddit.com/r/emacs/comments/5ei7wa/awesome_vimlike_folding_for_evilmode_with_markers/

+ =origami= is recommended
+ Vim keybindings are provided

** format [0/0] :ARCHIVE:
#+begin_quote
This module integrates code formatters into Emacs.
#+end_quote

** god [0/0] :ARCHIVE:
** lispy [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://github.com/noctuid/lispyville][lispy]] key functionality in Lisp languages.
#+end_quote

** multiple-cursors [0/0] :ARCHIVE:
** objed [0/0] :ARCHIVE:
#+begin_quote
This modules adds [[https://github.com/clemera/objed][objed]], a global minor-mode for navigating and manipulating
text objects. It combines the ideas of versor-mode and other editors like Vim or
Kakoune and tries to align them with regular Emacs conventions.
#+end_quote

** parinfer [0/0] :ARCHIVE:
#+begin_quote
Parinfer is a proof-of-concept editor mode for Lisp programming languages. It
will infer some changes to keep Parens and Indentation inline with one another.
#+end_quote

** rotate-text [0/0] :ARCHIVE:
** snippets [1/1]
#+begin_quote
This module adds snippets to Emacs, powered by yasnippet.
#+end_quote

*** DONE [#B] Fix ~projectile-edit-dir-locals~ :bug:
Technically, ~projectile-edit-dir-locals~ is implemented via =skeleton=, not
=yasnippet=. However, I don't have a better place in my literate config to place
this fix.

The problem is that there is no clear way to exit the interactive session
started by ~projectile-edit-dir-locals~, at least not without removing
everything that was inserted into the =.dir-locals.el= buffer.

The following code fixes the problem, allowing =C-g= to exit the session while
keeping the contents of the buffer.

#+begin_src emacs-lisp :tangle yes
(after! projectile

  (defun my/projectile-skel-variable-cons ()
    "Insert a variable-name and a value in a cons-cell.

This function is better than `projectile-skel-variable-cons'
because it allows `keyboard-quit' to exit skeleton insertion
without deleting what has already been inserted. Additionally,
this function constructs cons cells atomically (both the car and
cdr must be present), and a newline is inserted after each cons
cell for better formatting at the end of the skeleton inserted by
`my/projectile-skel-dir-locals'."
    (condition-case err
        (let* ((variable (projectile-read-variable))
               (value (string-trim (read-from-minibuffer
                                    (format "Value of [%s]: " variable)))))
          (format "(%s . %s)\n" variable value))
      (quit nil)))

  (define-skeleton my/projectile-skel-dir-locals
    "Insert a .dir-locals.el template.

This function fixes `projectile-skel-dirs-locals' by relying on
`my/projectile-skel-variable-cons' for cons insertion, allowing
for atomic insertion of cons cells and escaping at any time via
`keyboard-quit' (\\[keyboard-quit]).

Furthermore, trailing parentheses at the end of the lisp data are
properly inserted without a leading linebreak. This is acheived
by using the `>' skeleton token in conjunction with literal
newlines (rather than the `\\n' skeleton token), and then
deleting the final newline before inserting the \")))\"."
    nil
    ;; Ensure that EOL is represented by "\n" in this buffer
    '(setq buffer-file-coding-system 'utf-8-unix)
    "((nil . ("
    ("" > (skeleton-read #'my/projectile-skel-variable-cons nil t))
    & -1 ;; If any cons cells were inserted, remove the previous "\n"
    ")))")

  (advice-add 'projectile-skel-dir-locals
              :override #'my/projectile-skel-dir-locals))
#+end_src

** word-wrap [2/3]
#+begin_quote
This module adds a minor-mode ~+word-wrap-mode~, which intelligently wraps long
lines in the buffer without modifying the buffer content.
#+end_quote

*** DONE [#B] Do not add extra indentation :tweak:
#+begin_src emacs-lisp :tangle yes
(setq +word-wrap-extra-indent nil)
#+end_src

*** DONE [#B] Do not activate ~+word-wrap-mode~ by default :tweak:
The following code block is necessary in order to [[*Truncate lines by default][truncate lines by default]] when
the =word-wrap= module is enabled:

#+begin_src emacs-lisp :tangle yes
(remove-hook 'text-mode-hook #'+word-wrap-mode)
#+end_src

Prefer ~+word-wrap-mode~ (=SPC t w=) over ~toggle-truncate-lines~ (=SPC t t=)
when you want to disable line truncation, as the former also enables
~adaptive-wrap-prefix-mode~ to align visually wrapped lines.

*** TODO [#C] Add paragraph formatting to ~+word-wrap-mode~ :feat:
If easily possible, I would like to add a feature to Doom's ~+word-wrap-mode~ to
visually join separate lines in a paragraph and visually wrap them, sort of like
~fill-paragraph~. Perhaps there is an existing Emacs package that can do this.

*UPDATE*: =visual-fill= might be able to do this. Its package description looks
promising, at least:

#+begin_quote
This `visual-fill-mode' minor mode basically "unfills" paragraphs within
jit-lock, hence without modifying the buffer.  Combined with the normal
line-wrapping this performs a kind of "auto refill" which can be more or
less sophisticated depending on the line-wrapping used.

For best effect, combine it with `visual-line-mode' and
`adaptive-wrap-prefix-mode'.
#+end_quote

* :emacs
#+begin_quote
Modules that reconfigure or augment packages or features built into Emacs.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :emacs
#+end_src

** Miscellany [15/25]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Enable all disabled commands :tweak:
#+begin_src emacs-lisp :tangle yes
(setq disabled-command-function nil)
#+end_src

*** DONE [#A] Configure native compilation :feat:
#+begin_src emacs-lisp :tangle yes
(when (featurep 'native-compile)
  (setq native-comp-speed 2
        package-native-compile t))
#+end_src

*** DONE [#A] Configure C source directory :tweak:feat:
#+begin_src emacs-lisp :tangle yes
(let ((srcdir (format "%s.local/src/emacs/emacs-%s/src"
                      (file-name-as-directory (getenv "HOME"))
                      emacs-version)))
  (when (file-directory-p srcdir)
    (setq find-function-C-source-directory srcdir)))
#+end_src

*** DONE [#B] Fix ~doom/sudo-find-file~ and ~doom/sudo-this-file~ :hack:
The resulting ~/sudo:root@localhost:/path/to/file~ string does not work for me,
so I replaced ~"localhost"~ in the original ~doom--sudo-file-path~ with
~tramp-system-name~.

This solves the problem for me and allows me to run =SPC f u=
(~doom/sudo-find-file~) and =SPC f U= (~doom/sudo-this-file~).

#+begin_src emacs-lisp :tangle yes
(defadvice! my/doom--sudo-file-path-a (file)
  "Use `tramp-system-name' instead of \"localhost\" as the hostname"
  :override #'doom--sudo-file-path
  (let ((host (or (file-remote-p file 'host) tramp-system-name)))
    (concat "/" (when (file-remote-p file)
                  (concat (file-remote-p file 'method) ":"
                          (if-let (user (file-remote-p file 'user))
                              (concat user "@" host)
                            host)
                          "|"))
            "sudo:root@" host
            ":" (or (file-remote-p file 'localname)
                    file))))
#+end_src

*** DONE [#B] Configure Man for AWS CLI man pages :module:
#+begin_src emacs-lisp :tangle yes
;; Allow any letter to be used a manual section for Man (AWS CLI uses "a")
(setq Man-section-regexp "[a-zA-Z0-9+]+")

;; Consider "AVAILABLE.*" page sections to be "SEE ALSO"
(setq Man-see-also-regexp
      (format "\\(%s\\)"
              (string-join '("SEE ALSO"
                             "VOIR AUSSI"
                             "SIEHE AUCH"
                             "VÉASE TAMBIÉN"
                             "VEJA TAMBÉM"
                             "VEDERE ANCHE"
                             "ZOBACZ TAKŻE"
                             "İLGİLİ BELGELER"
                             "参照"
                             "参见 SEE ALSO"
                             "參見 SEE ALSO"
                             "AVAILABLE.*") ;; For AWS CLI man pages
                           "\\|")))

;; Allow buttons to be properly overlayed on AWS CLI man page references
(after! man
  (setq
   Man-reference-regexp
   (concat
    ;; Ignore bullet points
    "\\(?:^\\.IP \\\\(bu 2\\n\\|o \\)?"
    ;; This is the <name> part
    "\\(" Man-name-regexp
         "\\("
              ;; This allow line-continuations for long man page names
              ;;
              ;; SEE ALSO
              ;;     foo(1), bar(1), line-
              ;;     continuation(1)
              ;;
              "\\([-‐]\n\\)?"
              "[ \t]+" Man-name-regexp
         "\\)*"
    "\\)"
    ;; This is the (<section>) part
    "[ \t]*(\\(" Man-section-regexp "\\))")))
#+end_src

*** DONE [#B] Prevent AWS credentials from being written to ~doom-env-file~ :tweak:module:
#+begin_src emacs-lisp :tangle cli.el
(after! doom-cli-env
  (pushnew! doom-env-deny
            "^AWS_ACCESS_KEY_ID$"
            "^AWS_SECRET_ACCESS_KEY$"
            "^AWS_SESSION_TOKEN$"))
#+end_src

*** DONE [#B] Save shell command lines automatically with ~server-edit~ :bug:
When editing a command line in =emacsclient= after typing =C-x C-e= in an
interactive shell, Emacs will prompt to save the file once you signal that you
are finished. The problem is that Emacs doesn't know that these files are
temporary. The following fixes the problem in both =bash= and =zsh=:

#+begin_src emacs-lisp :tangle yes
(after! server
  (setq server-temp-file-regexp
        (format "\\(?:%s\\)\\|\\(?:\\`%s\\(?:bash-fc\\.\\|zsh[a-zA-Z0-9]+\\.zsh\\'\\)\\)"
                server-temp-file-regexp
                (temporary-file-directory))))
#+end_src

*** DONE [#C] Don't prompt about killing running processing when quitting :tweak:
#+begin_src emacs-lisp :tangle yes
(setq confirm-kill-processes nil)
#+end_src

*** DONE [#C] Add aliases for common commands :feat:
I'll keep adding more as I need them.

#+begin_src emacs-lisp :tangle yes
(defalias 'ps 'list-processes)
#+end_src

*** DONE [#C] Use elisp formatting for debugger stack trace :tweak:module:
I prefer ~(this format)~ over ~that(format)~, since most of the function calls
in the stack trace are elisp functions (not C functions).

#+begin_src emacs-lisp :tangle yes
(setq debugger-stack-frame-as-list t)
#+end_src

*** DONE [#C] Do not restrict (Wo)Man buffer width :tweak:
#+begin_src emacs-lisp :tangle yes
(setq Man-width-max nil
      woman-fill-frame t)
#+end_src

To redisplay with new width, call ~Man-update-manpage~ in a =Man= buffer (or
just wait a few seconds after resizing a window for it to get called
automatically) or call ~woman-reformat-last-file~ in a =woman= buffer (bound to
=R= in Emacs evil state).

*** DONE [#C] Add a binding to make the current file executable :feat:
#+begin_src emacs-lisp :tangle yes
(defun my/make-buffer-file-executable ()
  "Make the current buffer's file executable."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (cond
     ((null file-name)
      (error "Current buffer is not visiting a file"))
     ((executable-make-buffer-file-executable-if-script-p)
      (message "Made file executable: %s" file-name)))))

(map! :leader
      (:prefix-map ("f" . "file")
       :desc "chmod +x this file" "X" #'my/make-buffer-file-executable))
#+end_src

*** DONE [#C] Configure revert-buffer for ~helpful-mode~ :tweak:module:
#+begin_src emacs-lisp :tangle yes
(after! helpful
  (setq-hook! 'helpful-mode-hook
    revert-buffer-function (lambda (&rest _) (helpful-update))))
#+end_src

*** DONE [#C] Configure revert-buffer for ~Man-mode~ and ~Woman-mode~ :tweak:module:
#+begin_src emacs-lisp :tangle yes
(after! man
  (setq-hook! 'Man-mode-hook
    revert-buffer-function (lambda (&rest _) (Man-update-manpage))))

(after! woman
  (setq-hook! 'woman-mode-hook
    revert-buffer-function (lambda (&rest _) (woman-reformat-last-file))))
#+end_src

*** DONE [#C] Replace =C-x x f= binding with custom font-lock update function :tweak:
By default, =C-x x f= is bound to ~font-lock-update~, which re-fontifies the
current buffer. However, sometimes I only want to update font-lock around point,
or within the active region. Thankfully, functions already exist for these two
cases: ~font-lock-fontify-block~ and ~font-lock-fontify-region~. I would like to
create a function that wraps all three functions.

#+begin_src emacs-lisp :tangle yes
(defun my/font-lock-update (arg)
  "Refontify some or all of the current buffer.

With positive numeric prefix, refontify that many lines on each
side of point. (Universal arguments are translated to numeric
form by exponentiating 4 by the number of `C-u' sequences.)

Without positive numeric prefix, refontify the active region if
there is one. Otherwise, refontify the entire accessible portion
of the current buffer."
  (interactive "P")
  (cl-destructuring-bind (type value) (eeowaa-parse-raw-prefix arg)
    (cond
     ((or (eq type 'universal) (and (eq type 'numeric) (cl-plusp value)))
      (font-lock-fontify-block value))
     ((region-active-p)
      (font-lock-fontify-region (region-beginning) (region-end)))
     (t
      (font-lock-update)))))

(global-set-key [remap font-lock-update] #'my/font-lock-update)
#+end_src

*** STRT [#B] Create and bind a function to copy the last message written :feat:
Although this mostly works as intended, I think it is slowing down Emacs.

I should consider another mechanism, perhaps by using markers in the
~*Messages*~ buffer to keep track of the start of new messages. This offers
at least two advantages:

1. It will avoid the issue of ~message~ calls that do not insert text (or at
   least visible text) into the ~*Messages*~ buffer. At least =eldoc= and =evil=
   both do this, but I imagine that other packages do, too.
   ~my/message-nosave-a~ is an expensive and kludgy workaround.

2. By using markers in the ~*Messages*~ buffer, I can not only easily grab the
   last visible message, but I can easily implememt a mechanism to jump between
   the starting positions of multiline messages, sort of like what =vterm= does
   with the prompt string.

#+begin_src emacs-lisp :tangle no
(defvar my/last-message ""
  "The last message written to the \"*Messages*\" buffer by `message'.")

(defadvice! my/message-save-a (message-string)
  :filter-return #'message
  (setq my/last-message message-string))

(defadvice! my/message-nosave-a (fn &rest args)
  :around #'eldoc--message
  (let ((last-message my/last-message))
    (apply fn args)
    (setq my/last-message last-message)))

(defun my/copy-last-message ()
  "Add the last message to the kill ring."
  (interactive)
  (kill-new my/last-message))

(define-key! help-map "y" #'my/copy-last-message)
#+end_src

*** STRT [#B] Configure the timeclock :feat:module:
Improvements:
+ [ ] Sort report output by time spent on projects
+ [ ] Allow categorization of projects (for reporting purposes)
+ [ ] Set popup rules for ~timeclock-file~ and ~my/timeclock-report-file~
+ [ ] Use a [[info:elisp#Timers][timer]] to delay switching projects (including clocking out) until a
  different workspace has been selected for a non-trivial amount of time. This
  will allow me to cycle between workspaces without clocking into and out of
  projects that I never put any time into (just navigating through their
  workspace), both noticeably increasing performance and reducing clutter in
  ~timeclock-file~.
  - This is the reason why I have disabled tangling of the following block

#+begin_src emacs-lisp :tangle no
;;; Timeclock reporting

(defvar my/timeclock-report-format 'text
  "The format of the timeclock report (text or html).")

(defvar my/timeclock-report-file
  (let ((ext (if (eq my/timeclock-report-format 'html) ".html" "")))
    (locate-user-emacs-file (concat "timelog-report" ext)
                            (concat ".timelog-report" ext)))
  "The location of the generated report file.")

(defun my/timeclock-generate-report ()
  "Generate a timeclock report and write it to `my/timeclock-report-file'.
The format of the report is determined by `my/timeclock-report-format'."
  (interactive)
  (with-temp-file
      my/timeclock-report-file
    (if (eq my/timeclock-report-format 'html)
        (timeclock-generate-report t)
      (timeclock-generate-report)
      (insert "\n\n")
      (call-process (concat doom-user-dir "bin/timeclock-report")
                    timeclock-file
                    (current-buffer)
                    t))))

(defun my/timeclock-visit-report ()
  "Open the timeclock report in another window."
  (interactive)
  (find-file-other-window my/timeclock-report-file))

(defun my/timeclock-report ()
  "Generate and view the timeclock report."
  (interactive)
  (my/timeclock-generate-report)
  (my/timeclock-visit-report))

;;; Timeclock exiting

(defun my/timeclock-exit ()
  "Clock out, always returning successfully.
This function is the default for `my/timeclock-exit-function'."
  (ignore-errors (timeclock-out)) t)

(defvar my/timeclock-exit-function #'my/timeclock-exit
  "Timeclock function to call when exiting Emacs.
Use this instead of `timeclock-ask-before-exiting'.")

(when (functionp my/timeclock-exit-function)
  ;; HACK This relies on `custom-file' being a different file!
  (custom-set-variables
   '(timeclock-ask-before-exiting nil))
  (add-hook 'kill-emacs-query-functions my/timeclock-exit-function))

;;; Timeclock switching

(defvar my/timeclock--current-project nil
  "The current project to be clocked.
This is automatically set when switching workspaces.")

(add-hook! 'persp-before-switch-functions
  (defun my/workspace-before-switch-h (name frame)
    (setq my/timeclock--current-project name)
    (ignore-errors (timeclock-out))))

(add-hook! 'persp-activated-functions
  (defun my/workspace-after-switch-h (type)
    (and (eq type 'frame)
         (not (string= my/timeclock--current-project +workspaces-main))
         (ignore-errors
           (timeclock-in nil my/timeclock--current-project)))))
#+end_src

*** STRT [#C] Make =C-w o= behave like Vim's ZoomWin package :feat:module:
This is almost done. Things left to do:

+ [ ] Do *not* restore [[info:elisp#Side Windows][side windows]] while "zooming out" if those side windows
  were deleted when "zoomed in".
+ [ ] Do *not* restore buffer position of the selected window while "zooming
  out" (the cursor jump is somewhat annoying).

#+begin_src emacs-lisp :tangle yes
(defun my/zoomwin-toggle ()
  "Zoom or unzoom the selected window.
If the current frame has multiple windows, delete other windows.
If the current frame has one window, restore the previous windows."
  (interactive)
  (if (= 1 (length
            (seq-remove (lambda (w) (window-parameter w 'no-other-window))
                        (window-list))))
      (when-let ((zoomwin-state (persp-parameter 'my/zoomwin-state)))
        (set-window-configuration zoomwin-state))
    (set-persp-parameter 'my/zoomwin-state (current-window-configuration))
    (delete-other-windows)))

(define-key! evil-window-map
  ;; replaces `doom/window-enlargen'
  "o" #'my/zoomwin-toggle)
#+end_src

*** TODO [#B] Attempt to open a file with ~sudo~ if needed :feat:
I might be able to wrap ~find-file~ in a ~condition-case~ form (via ~:around~
advice) that catches errors like this:

: File is not readable: /path/to/file

See the definition of ~evil-quit~ for an example of ~condition-case~.

It might also be possible to add a function to ~+lookup-file-functions~ to
identify files that require elevated privileges to open.

*** TODO [#B] Configure WoMan for AWS CLI man pages :feat:module:
*** LOOP [#B] Always trust file-location and directory-local variables :tweak:
:LOGBOOK:
- Note taken on [2022-07-14 Thu 10:37] \\
  This stopped working for me at some point. Need to revisit.
:END:
For now, just trust ~projectile-*~ variables as long as they apply to files in
=XDG_DOCUMENTS_DIR= or =DOOMDIR=.

#+begin_src emacs-lisp :tangle yes
(after! projectile
  ;; For each atom in `obarray'
  (mapatoms
   (lambda (symbol)
     ;; When the atom is a `projectile' variable
     (when
         (and (boundp symbol)
              (not (keywordp symbol))
              (string-prefix-p "projectile-" (symbol-name symbol)))
       ;; The variable is safe when ...
       (put symbol 'safe-local-variable
            (lambda (_)
              (when
                  ;; ... we are in either XDG_DOCUMENTS_DIR or DOOMDIR
                  ;; TODO See about using `projectile-project-search-path'
                  (seq-filter
                   (lambda (dir)
                     (string-match-p dir (expand-file-name default-directory)))
                   (list (file-name-as-directory (xdg-user-dir "DOCUMENTS"))
                         doom-user-dir))
                t)))))))
#+end_src

*** TODO [#B] Figure out the autosave and backup situation for Doom Emacs :tweak:
Compare with my old config and try to match it.

*** TODO [#C] Configure the world clock :tweak:
I mostly want to do this to have an easier time tracking the local time of
servers I have deployed around the world.

*** HOLD [#A] Override builtin ~restart-emacs~ function :bug:
:LOGBOOK:
- Note taken on [2022-07-29 Fri 18:51] \\
  This only matters in Emacs 29, which I am no longer using (I'm back at 28.1, the
  latest stable version as of now).

  Just a few days ago, Fedora started packaging Emacs 28.1, while before, they
  were back at an older version that did not support native compilation. I was
  using a COPR repo that supports native comp, which also happens to use the
  development version of Emacs. A recent commit added the builtin ~restart-emacs~
  function. Rather than fight with that, I'll fall back to Fedora's new package.
:END:
- Emacs 29 introduced the ~restart-emacs~ function
  - ~emacs-version~ has the version string, but I believe that it was introduced
    in a random commit not really associated with a specific version
  - Probably need to check for the existence of a builtin ~restart-emacs~
    function instead of checking the version string, and then work around it
  - The function is defined in =/usr/share/emacs/29.0.50/lisp/files.el.gz=
- Doom uses the ~restart-emacs~ function defined in the =restart-emacs= package
  - The package is declared in a ~package!~ form in =~/.config/emacs/core/packages.el=
  - The ~package!~ form sets up an autoload for ~restart-emacs~
  - User-defined ~package!~ forms go in =~/.config/doom/packages.el=
- Reference information about autoloads:
  - ~autoload~ (also check the Info documentation)
  - ~load-path~
  - ~lisp-directory~ (=/usr/share/emacs/29.0.50/lisp=)
- Can undefine a function using ~fmakunbound~
- In =~/.config/emacs/core/core.el=, the following comment explains how Doom
  starts up, which may be helpful in solving this problem:
  #+begin_src emacs-lisp :eval no :tangle no
  ;; The overall load order of Doom is as follows:
  ;;
  ;;   $EMACSDIR/early-init.el
  ;;   $EMACSDIR/core/core.el
  ;;   $DOOMDIR/init.el
  ;;   {$DOOMDIR,~/.emacs.d}/modules/*/*/init.el
  ;;   `doom-before-init-modules-hook'
  ;;   {$DOOMDIR,~/.emacs.d}/modules/*/*/config.el
  ;;   `doom-init-modules-hook'
  ;;   $DOOMDIR/config.el
  ;;   `doom-after-init-modules-hook'
  ;;   `after-init-hook'
  ;;   `emacs-startup-hook'
  ;;   `doom-init-ui-hook'
  ;;   `window-setup-hook'
  #+end_src

** dired [2/3]
#+begin_quote
This module provides configuration for dired.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `emacs/dired` module
brew install coreutils
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `emacs/dired` module
sudo dnf -y install coreutils
#+end_src

*** DONE [#C] Format the results of ~find-dired~ to be like ~dired~ :tweak:
Evaluate the following elisp forms to compare output buffer formats:

#+begin_src emacs-lisp :tangle no
;; `find-dired' example with default values:
(let ((find-ls-option '("-ls" . "-dilsb"))
      (find-dired-refine-function #'find-dired-sort-by-filename))
  (find-dired default-directory "-type d ! -path . -prune -o -type f"))

;; `dired' example:
(dired default-directory)
#+end_src

Note how ~find-dired~ produces less human-readable output. The following code
will normalize the output of ~find-dired~ to be like that of ~dired~:

#+begin_src emacs-lisp :tangle yes
;; NOTE `dired' is required by the `find-dired' library, so the following code
;; will always execute before the `find-dired' function is called.
(after! dired
  (setq find-dired-refine-function nil
        find-ls-option
        (cons (format "-print0 | sort -z | xargs -0 -e %s %s -d"
                      insert-directory-program
                      dired-listing-switches)
              (concat dired-listing-switches " -d"))))
#+end_src

Now run the following snippets and compare with the previous example:

#+begin_src emacs-lisp :tangle no
;; Same as previous `find-dired' example, with the defaults changed:
(find-dired default-directory "-type d ! -path . -prune -o -type f")

;; `find-grep-dired' should work in a similar manner:
(find-grep-dired default-directory "kubernetes\\|k8s")
#+end_src

*** STRT [#A] Define directory-exploring =evil-ex= commands :feat:
I would like to refactor ~my/+dired-tab-jump~ to use mechanisms similar to
~dired-other-tab~ and ~switch-to-buffer-other-tab~. This will probably require
some additional functionality in =vimish-tab= (namely a new function called
~vimish-tab-switch-to-buffer-other-tab~).

#+begin_src emacs-lisp :tangle yes
(defun my/+dired-split-jump ()
  (interactive)
  (select-window (split-window-below))
  (dired-jump))

(defun my/+dired-vsplit-jump ()
  (interactive)
  (select-window (split-window-right))
  (dired-jump))

;; XXX This function is experimental
(defun my/+dired-tab-jump ()
  (interactive)
  (let ((vimish-tab-new-buffer-function
         (lambda ()
           (vimish-tab-file-buffer
            (if buffer-file-name
                (file-name-directory buffer-file-name)
              default-directory)))))
    (vimish-tab-new)))

(after! evil-ex
  (evil-ex-define-cmd "Ex[plore]"  #'dired-jump)
  (evil-ex-define-cmd "Sex[plore]" #'my/+dired-split-jump)
  (evil-ex-define-cmd "Vex[plore]" #'my/+dired-vsplit-jump)
  (evil-ex-define-cmd "Tex[plore]" #'my/+dired-tab-jump))
#+end_src

** electric [0/0]
** ibuffer [1/7]
#+begin_quote
This module augments ibuffer.
#+end_quote

*** DONE [#B] Auto-update ibuffer contents :tweak:
By default, ~ibuffer-auto-mode~ must be manually enabled in ~ibuffer~ through
=C-c C-a=. Enabling this mode is potentially expensive
(~ibuffer-auto-update-changed~ is added to ~post-command-hook~), but it's easy
to forget to refresh the buffer.

#+begin_src emacs-lisp :tangle yes
(add-hook 'ibuffer-mode-hook #'ibuffer-auto-mode)
#+end_src

*** STRT [#B] Clean up the modeline :tweak:hack:
Performance can become an issue when listing workspace-specific buffers.

#+begin_src emacs-lisp :tangle yes
(add-hook! ibuffer-mode
  (defun my/ibuffer-mode-line-h ()
    "Clean up the modeline and improve performance."
    (setcar mode-line-process "by ")
    (setf (nth 2 ibuffer-header-line-format) " by ")))
    ;; (setf (alist-get 'header-line-format mode-line-process) "")))
#+end_src

*** TODO [#A] Figure out how to dynamically resize ~ibuffer~ columns :feat:
~ibuffer-mode~ derives from ~special-mode~, so it doesn't inherit the
column-resizing functionality of ~tabulated-list-mode~.

At first glace, it does not look like there is any machinery to do this except
by modifying ~ibuffer-formats~. The only command that could be used for
implementation reference is ~ibuffer-switch-format~ (bound to =`= in
~ibuffer-mode~).

*** TODO [#A] Provide a prefix map for ~ibuffer-mode~ :feat:
I can never remember the keybindings, despite how much I use ~ibuffer~.

*** TODO [#B] Fix ~ibuffer-do-view~ and related commands :bug:
With how I've configured ~display-buffer-alist~ (via =:ui buffer-group=), I
cannot open buffers this way in ~ibuffer~.

*** TODO [#B] Integrate with =ace-window= :feat:
From =ibuffer=, I would like to open buffers in windows selected with
=ace-window= (currently, it is somewhat hard to predict which window will be
chosen). This should still respect ~display-buffer-alist~ rules.

*** TODO [#C] Adjust ~ibuffer~ table format :tweak:
Some columns are too close together. See ~ibuffer-formats~ (configured by Doom).

** undo [1/1]
#+begin_quote
This module augments Emacs' built-in undo system to be more intuitive and to
persist across Emacs sessions.
#+end_quote

*** OKAY [#A] Enable ~undo-tree~ :bug:
:LOGBOOK:
- Note taken on [2023-01-25 Wed 22:51] \\
  This has been working well for me for a long time now.
:END:
Sometimes this doesn't seem to work.

#+begin_src emacs-lisp :tangle yes
;; This should already be enabled by emacs/undo/config.el
(global-undo-tree-mode)

;; Not sure what the best way is to add this hook
(add-hook 'evil-local-mode-hook #'turn-on-undo-tree-mode)
#+end_src

** vc [2/2]
#+begin_quote
This module augments Emacs builtin version control support and provides better
integration with git.
#+end_quote

*** DONE [#B] Do not prompt when the commit message is too long :tweak:
#+begin_src emacs-lisp :tangle yes
(after! git-commit
  (delq! 'overlong-summary-line git-commit-style-convention-checks))
#+end_src

*** DONE [#C] Filename-mode associations :tweak:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist
          '("/git/config\\.d/.+" . gitconfig-mode)
          '("\\.gitignore\\'" . gitignore-mode))
#+end_src

* :term
#+begin_quote
Modules that offer terminal emulation.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :term
#+end_src

** Miscellany [1/1]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE Define a helper function to wrap calls to ~with-editor-export-editor~ :feat:
#+begin_src emacs-lisp :tangle yes
(defun my/with-editor-export ()
  "Run `with-editor-export-editor' for all envvars that I care about"
  (dolist (var '("EDITOR" "VISUAL"))
    (with-editor-export-editor var)))
#+end_src

** eshell [5/5]
#+begin_quote
This module provides additional features for the built-in [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Emacs Shell]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `term/eshell` module
brew install fish
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `term/eshell` module
sudo dnf -y install fish
#+end_src

*** DONE [#B] Define aliases :feat:
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
  ;; C-x [0123]
  "0" "delete-window"
  "1" "delete-other-windows"
  "2" "split-window-below"
  "3" "split-window-right"

  ;; find-file
  "e"  "find-file $1"
  "4e" "find-file-other-window $1"
  "5e" "find-file-other-frame $1"

  ;; find-file-read-only
  "r"  "find-file-read-only $1"
  "4r" "find-file-read-only-other-window $1"
  "5r" "find-file-read-only-other-frame $1"

  ;; view-file
  "v"  "view-file $1"
  "4v" "view-file-other-window"
  "5v" "view-file-other-frame"

  ;; w3m-find-file
  "w3m"  "w3m-find-file"

  ;; shell commands
  "git" "git --no-pager -c color.ui=always -c interactive.singleKey=false $*"
  "f"   "cd $1 && ls")
#+end_src

*** DONE [#B] Do not scroll after every command :tweak:
#+begin_src emacs-lisp :tangle yes
(after! eshell
  (setq eshell-scroll-show-maximum-output nil))
#+end_src

*** DONE [#B] Make ^L simply scroll (not insert a bunch of blank lines :tweak:
As long as the first element of ~recenter-positions~ is ~top~ (which is
how I have things configured), the following works great.

#+begin_src emacs-lisp :tangle yes
(after! eshell
  (advice-add 'eshell/clear :override #'recenter-top-bottom))
#+end_src

*** DONE [#B] Export ~$EDITOR~ to =eshell= :feat:
*NOTE*: At one point, I was hesistant to do this (see quote), but I cannot
figure out how to replicate the problem, nor can I prove that the problem
doesn't exist. In any case, it works perfectly with =git=, and that's all I
really care about.

#+begin_quote
Unlike with =vterm=, we currently do not export ~$EDITOR~ to =eshell=. This is
to avoid a dangerous situation in which =C-c C-k= not only returns an error code
to =eshell=, it forcefully clears the file on disk.
#+end_quote

#+begin_src emacs-lisp :tangle yes
(add-hook! eshell-mode #'my/with-editor-export)
#+end_src

** shell [0/0] :ARCHIVE:
** term [0/0] :ARCHIVE:
** vterm [8/18]
#+begin_quote
This module provides a terminal emulator powered by libvterm. It is still in
alpha and requires a component be compiled (=vterm-module.so=).
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `term/vterm` module
brew install libvterm cmake
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `term/vterm` module
sudo dnf -y install libvterm cmake
#+end_src

*** DONE [#B] Export editor variables to =vterm= :feat:
#+begin_src emacs-lisp :tangle yes
(defvar my/with-editor-emacsclient-executable--vterm
  (file-name-concat (getenv "HOME") ".local" "libexec" "emacs" "emacsclient-vterm"))

(add-hook! vterm-mode
  (defun my/with-editor-export--vterm ()
    (if (file-executable-p my/with-editor-emacsclient-executable--vterm)
        (let ((with-editor-emacsclient-executable
               my/with-editor-emacsclient-executable--vterm))
          (my/with-editor-export))
      (my/with-editor-export))))
#+end_src

*** DONE [#B] Let =C-m= send =<return>= :tweak:
#+begin_src emacs-lisp :tangle yes
(after! vterm
  (defalias 'vterm-send-C-m #'vterm-send-return))
#+end_src

*** DONE [#B] Let =C-h=, =C-u=, =C-j=, and =<M-backspace>= pass through in Evil insert state :tweak:
#+begin_src emacs-lisp :tangle yes
(after! evil-collection-vterm
  (dolist (key '("C-h" "C-u" "C-j" "<M-backspace>"))
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd key) 'vterm--self-insert)))
#+end_src

*** DONE [#B] Rename ~vterm~ buffers according to the host and directory :tweak:
Some extra shell-side configuration is needed for this, which I have stuck in my
=~/.environ.d/vterm.sh= file.

Note that we still want ~vterm~ popup buffers to have the same name
(~"*doom:vterm-popup:<workspace>*"~) for window management purposes, so we need
to account for that.

#+begin_src emacs-lisp :tangle yes
(setq vterm-buffer-name-string "%s")
(defadvice! my/vterm-popup-preserve-buffer-name-a (fn &rest args)
  "Use Doom's standard buffer name for vterm popups."
  :around #'+vterm/toggle
  (let ((vterm-environment
         `(,(format "VTERM_BUFFER_NAME=*doom:vterm-popup:%s*"
                    (if (bound-and-true-p persp-mode)
                        (safe-persp-name (get-current-persp))
                      "main")))))
    (apply fn args)))
#+end_src

We must ensure that ~VTERM_BUFFER_NAME~ does not get set by =doom env=,
otherwise *all* ~vterm~ buffers will be named according to that variable,
regardless of whether the buffer is a popup or not.

#+begin_src emacs-lisp :tangle cli.el
(after! doom-cli-env
  (add-to-list 'doom-env-deny "VTERM_BUFFER_NAME"))
#+end_src

*** DONE [#B] Let =C-x C-e= pass through in Evil insert state :feat:
Ultimately, I would like for this to take the contents of the prompt and send it
to Emacs in an indirect buffer (server mode).

#+begin_src emacs-lisp :tangle yes
(after! vterm

  (defun my/vterm--display-buffer-same-window (buffer)
    "Display a buffer in the current window.
This function works even if the current window is a side window."
    (interactive)
    (if-let* ((side (window-parameter nil 'window-side))
              (slot (window-parameter nil 'window-slot)))
        (display-buffer-in-side-window buffer `((side . ,side) (slot . ,slot)))
      (display-buffer-same-window buffer nil)))

  (defun my/vterm--dedicate-window-h ()
    (set-window-dedicated-p (selected-window)
                            (window-parameter nil 'my/vterm--window-dedicated)))

  (add-hook 'server-switch-hook #'my/vterm--dedicate-window-h)

  (defun my/vterm-edit-indirect ()
    "Edit a command line by sending `C-x C-e' to vterm."
    (interactive)
    ;; We must undedicate the window so that `server-switch-buffer' will select it
    (set-window-parameter nil 'my/vterm--window-dedicated (window-dedicated-p))
    (set-window-dedicated-p (selected-window) nil)
    (vterm-send-key "x" nil nil t)
    (vterm-send-key "e" nil nil t))

  (setq-hook! 'vterm-mode-hook
    server-window #'my/vterm--display-buffer-same-window)

  (map! :map vterm-mode-map
        :i "C-x C-e" #'my/vterm-edit-indirect))
#+end_src

*** DONE [#C] Configure revert-buffer :tweak:module:
#+begin_src emacs-lisp :tangle yes
(after! vterm
  (setq-hook! 'vterm-mode-hook
    revert-buffer-function (lambda (&rest _) (vterm-clear)))
  (map! :map vterm-mode-map
        "C-l" #'eeowaa-refresh-buffer-and-display))
#+end_src

*** DONE [#B] Let =M-:= and =M-<digit>= pass through in Evil insert and normal state :feat:
#+begin_src emacs-lisp :tangle yes
(after! evil-collection-vterm
  (dolist (state '(normal insert))
    (evil-collection-define-key state 'vterm-mode-map
      (kbd "M-0") #'+workspace/switch-to-final
      (kbd "M-1") #'+workspace/switch-to-0
      (kbd "M-2") #'+workspace/switch-to-1
      (kbd "M-3") #'+workspace/switch-to-2
      (kbd "M-4") #'+workspace/switch-to-3
      (kbd "M-5") #'+workspace/switch-to-4
      (kbd "M-6") #'+workspace/switch-to-5
      (kbd "M-7") #'+workspace/switch-to-6
      (kbd "M-8") #'+workspace/switch-to-7
      (kbd "M-9") #'+workspace/switch-to-8
      (kbd "M-:") #'eval-expression)))
#+end_src

*** STRT [#C] Use =C-s= as the ~evil-window-map~ leader key in Evil insert state :tweak:
This doesn't work during startup, but if I manually run it after everything has
loaded, it works.

#+begin_src emacs-lisp :tangle yes
(after! (:and vterm evil-collection-vterm)
  (evil-collection-define-key 'insert 'vterm-mode-map
    (kbd "C-s") 'evil-window-map))
#+end_src

*** STRT [#B] Define aliases :feat:
:LOGBOOK:
- Note taken on [2023-01-30 Mon 08:33] \\
  The aliases that open files should work even without given arguments (e.g. ~vim~
  should open the ~*scratch*~ buffer if not passed any arguments).
:END:
These depend on the existence of a ~vterm_cmd~ function. See the =README.md= for
=vterm= for more information.

#+begin_src emacs-lisp :tangle yes
(after! vterm

  ;; This function is to be called in shell configuration to obtain the
  ;; directory in which to read aliases
  (defun my/vterm--write-user-emacs-directory (tmpfile)
    "Write the string evaluation of `user-emacs-directory' to TMPFILE."
    (f-write user-emacs-directory 'utf-8 tmpfile))
  (pushnew! vterm-eval-cmds '("my/vterm--write-user-emacs-directory"
                              my/vterm--write-user-emacs-directory))

  (defun my/set-vterm-alias (&rest aliases)
    "Define aliases for vterm.

ALIASES is a flat list of alias -> command pairs. e.g.

  (my/set-vterm-alias
    \"e\" \"find-file\"
    \"r\" \"find-file-read-only\")"
    (or (cl-evenp (length aliases))
        (signal 'wrong-number-of-arguments (list 'even (length aliases))))
    (with-temp-file (concat user-emacs-directory "vterm-aliases.sh")
      (while aliases
        (let ((alias (pop aliases))
              (command (pop aliases)))
          (pushnew! vterm-eval-cmds (list command (intern command)))
          (insert (format "alias %s='vterm_cmd %s'\n" alias command))))))

  (my/set-vterm-alias
    ;; Define aliases to open files in Emacs
    "e"  "find-file"
    "4e" "find-file-other-window"
    "5e" "find-file-other-frame"

    ;; Define aliases to open files in Emacs (read-only)
    "r"  "find-file-read-only"
    "4r" "find-file-read-only-other-window"
    "5r" "find-file-read-only-other-frame"

    ;; Define aliases to prevent issues with recursive editing
    "vi"    "find-file"
    "vim"   "find-file"
    "emacs" "find-file"

    ;; Define aliases for standalone commands that have Emacs equivalents
    "man"  "man"
    "info" "info"

    ;; Define aliases for special Emacs functionality
    "w3m"  "w3m-find-file"
    "gg"   "magit-status"))
#+end_src

*** STRT [#A] Get =vterm= working with ~kubectl~ :bug:
This seems to work with =kubel= as long as no =vterm= buffers exist:

#+begin_src emacs-lisp :tangle yes
(after! vterm
  (let ((alist (assoc-delete-all "kubectl" vterm-tramp-shells)))
    (setq vterm-tramp-shells
          (push '("kubectl" "sh -c \"clear; (bash || ash || sh)\"") alist))))
#+end_src

The above code block is necessary, but I also need to do one or more of the
following (I had done everything listed when I got it working once before):

1. Prevent =with-editor= export to =vterm= (although this should theoretically
   work with remote containers over TRAMP)
2. Set ~vterm-use-vterm-prompt-detection-method~ to ~nil~
3. Bypass =$HOME/.environ.d/vterm.sh=

So far, the only remote shell method that's working for me is ANSI Term (=term=)
via =kubel=, though ideally I'd use =vterm= with =kubernetes= and get rid of
=kubel= altogether (the working remote shell capability is the only reason why
I'm keeping that package around).

*** STRT [#A] Get =vterm= working with ~kubernetes~ :hack:bug:
The trick is to redefine ~kubernetes-utils-vterm-start~, which is called by
~kubernetes-exec-using-vterm~, which is called by ~kubernetes-exec~. I don't
know exactly why there is a problem; see the docstring for the advice named
~my/kubernetes-utils-vterm-start-a~ for more information.

This is just the beginning; more can and should be done:
+ [ ] Allow multiple =vterm= buffers instead of just ~*kubernetes exec vterm*~.
+ [ ] Integrate with =tramp= to allow local editing of files within containers.
  - =kubernetes-el-tramp= (package)
  - ~vterm-tramp-shells~ (option)
  - ~vterm--get-shell~ (function)
+ [ ] Set =popup= rules for these buffers.

#+begin_src emacs-lisp :tangle yes
(after! vterm
  (defadvice! my/kubernetes-utils-vterm-start-a (bufname command args)
    "Fix `kubernetes-utils-vterm-start'.
The workaround is to `pop-to-buffer' for an existing buffer
instead of using a `when-let' form to conditionally kill it,
which causes problems even if there is no existing buffer."
    :override 'kubernetes-utils-vterm-start
    (let ((existing (get-buffer bufname)))
      (if existing
          ;; Do not kill the buffer!
          (pop-to-buffer existing)
        (let* ((vterm-buffer-name bufname)
               (command-str (format "%s %s" command (string-join args " ")))
               (vterm-shell command-str))
          (vterm-other-window))))))
#+end_src

Example use:
#+begin_src emacs-lisp :tangle no
(kubernetes-utils-vterm-start
 "*kubernetes exec vterm*"
 "kubectl" '("exec"
             "--stdin"
             "--tty"
             "--namespace=<ns>" ;; replace this
             "<pod>"            ;; replace this
             "--"
             "ash"))
#+end_src

*** STRT [#A] Allow scrolling back while output is being written :tweak:
https://github.com/akermu/emacs-libvterm/issues/397

Right now, =C-c C-t= (~vterm-copy-mode~) can be used to toggle output being
written to the buffer. When there is no output being written, you can freely
scroll back in the buffer. Unfortunately there is no better way to do this at
the moment, but it works pretty well anyway.

*UPDATE*: Maybe I could have =ESC= enter ~vterm-copy-mode~. That is, when the
=evil= state is anything but ~insert~, enable ~vterm-copy-mode~. Then when I
switch back to ~insert~ state, disable ~vterm-copy-mode~. See [[*Prevent cursor misplacement when switching Evil states][this subtree]] for
more information.

*UPDATE*: The following code works OK, but it steps on ~vterm-undo~ and I
haven't tested it thoroughly enough. For now, it will stay disabled.

#+begin_src emacs-lisp :tangle no
(after! vterm
  (defvar-local my/vterm-echo nil)
  (add-hook! vterm-mode
    (defun my/evil-vterm-mode-h ()
      (setq my/vterm-echo 'on)
      (add-hook! '(evil-normal-state-entry-hook
                   evil-visual-state-entry-hook)
                 :local #'vterm-send-stop)
      (add-hook! '(evil-insert-state-entry-hook
                   evil-replace-state-entry-hook
                   evil-emacs-state-entry-hook)
                 :local #'vterm-send-start)))
  (defadvice! my/vterm-stop-a (&rest _)
    :after #'vterm-send-stop
    (setq my/vterm-echo 'off))
  (defadvice! my/vterm-start-a (&rest _)
    :after #'vterm-send-start
    (setq my/vterm-echo 'on)))
#+end_src

*** STRT [#A] Prevent cursor misplacement when switching Evil states :bug:
_Some common problems:_

+ When appending text to a command line, switching to ~normal~ state and back to
  ~insert~ state (even with =a= to append) moves the cursor back one character.
  The workaround is to use =C-e= in ~insert~ state to move the cursor back to
  the end of the command line.

  #+begin_src emacs-lisp :tangle yes
  ;; NOTE Allow cursor to appear after last character in line
  (after! vterm
    (setq-hook! 'vterm-mode-hook
      evil-move-beyond-eol t))
  #+end_src

+ When switching to ~normal~ state and trying to delete or modify text, weird
  characters (like ~~~) get inserted into the buffer.

  #+begin_src emacs-lisp :tangle yes
  ;; HACK Send <backspace> instead of <delete>
  ;; C-d works, too, but it can send EOF and close vterm
  (after! vterm
    (defadvice! my/vterm-delete-region-a (start end)
      :override #'vterm-delete-region
      (when vterm--term
        (if (vterm-goto-char end)
            (cl-loop repeat (- end start) do
                     (vterm-send-key "<backspace>" nil nil nil t))
          (let ((inhibit-read-only nil))
            (vterm--delete-region start end))))))
  #+end_src

+ When exiting TUI apps such as ~top~, the cursor shape gets changed to a block
  even in insert state.

  #+begin_src emacs-lisp :tangle yes
  ;; HACK Prevent vterm from changing cursor type (e.g. when quitting out of top(1))
  ;; <https://github.com/akermu/emacs-libvterm/issues/313>
  (after! vterm
    (defadvice! my/vterm--redraw-a (fn &rest args)
      "Prevent vterm from changing the cursor type."
      :around #'vterm--redraw
      (let ((cursor-type cursor-type))
        (apply fn args))))
  #+end_src

+ When switching back to ~insert~ state after moving the cursor to an
  unprintable area, point doesn't move to the appropriate location until I start
  typing. I often need to delete the text that I just inserted, move the cursor
  to where I wanted to go, and then type it out again.

  #+begin_src emacs-lisp :tangle yes
  (after! evil-collection-vterm

    ;; HACK If `vterm-goto-char' fails, reset cursor point
    (defadvice! my/evil-collection-vterm-insert-a ()
      :override #'evil-collection-vterm-insert
      (interactive)
      (let ((inhibit-redisplay t))
        (or (vterm-goto-char (point))
            (vterm-reset-cursor-point)))
      (evil-insert-state))

    ;; HACK Send <right> before entering insert state
    (defadvice! my/evil-collection-vterm-append-a ()
      :override #'evil-collection-vterm-append
      (interactive)
      (let ((inhibit-redisplay t))
        (or (vterm-goto-char (point))
            (vterm-reset-cursor-point))
        (or (looking-at-p " *$")
            (vterm-send-right)))
      (evil-insert-state))

    ;; HACK Send C-a instead of relying on vterm functions
    (defadvice! my/evil-collection-vterm-insert-line-a ()
      :override #'evil-collection-vterm-insert-line
      (interactive)
      (let ((inhibit-redisplay t))
        (vterm-reset-cursor-point)
        (vterm-send-C-a))
      (evil-insert-state))

    ;; HACK Send C-e instead of relying on vterm functions
    (defadvice! my/evil-collection-vterm-append-line-a ()
      :override #'evil-collection-vterm-append-line
      (interactive)
      (let ((inhibit-redisplay t))
        (vterm-reset-cursor-point)
        (vterm-send-C-e))
      (evil-insert-state)))
  #+end_src

*** TODO [#B] Retain column positions in command history :feat:
Working with long, complex command lines can be annoying. Every time you want to
make edits after evaluating the command line, you need to reposition the cursor
back to where you were editing. Special considerations:

1. Command lines execute asynchronously
2. The length of the prompt can change after evaluating a command line
3. Each command in the history was executed from a different column position

That third point is the stickiest. Unfortunately, =vterm= does not store state
about previous command lines, nor does it integrate with shell command history
mechanisms. Searching the web, I could not find any column-preserving plugins
for ZSH, my interactive shell of choice. Ultimately, associating a column
position with each previously-executed command may be best implemented as a ZSH
plugin, but I have no experience developing those.

In any case, I want something that works in =vterm= independent of the
underlying shell. For now, the most obvious solution (to me) is to create a
minor mode for iterative command-line editing in =vterm= featuring.

#+begin_src emacs-lisp :tangle no
(after! vterm
  ;; TODO Save and restore editing position of multi-line command line
  (undefadvice! my/vterm-save-column-a ()
    :before '(vterm-send-return vterm-send-C-m vterm-send-C-j)
    (when (vterm--at-prompt-p)
      (setq-local my/vterm-edit-column
                  (- (point) (vterm--get-prompt-point))))
  (undefadvice! my/vterm-restore-column-a ()
    :after-while '(vterm-send-up vterm-send-C-p)
    (when (vterm--at-prompt-p)
      ;; (sit-for 0.1)
      (goto-char (+ (vterm--get-prompt-point) (or my/vterm-edit-column 0)))))

(defadvice! my/vterm-editing-position-a (key &optional shift meta ctrl accept-proc-output)
  :around #'vterm-send-key
  ;; TODO
  (always))
#+end_src

*** TODO [#C] Prevent ~git-graph~ cutoff :bug:
The last character ("o" in this case) gets hidden:
#+begin_example
$ git graph
,* 65a8a6b6da9176bea78eb78c604120714207bcc5 Initial commit  eeowaa   3 weeks ag
#+end_example

I say "hidden" instead of "truncated" because if you kill the line and yank it
into another buffer, you can see the "o". *Note that this is only a problem in
GUI Emacs, not terminal Emacs. Also, this is only a problem in popup buffers.*

*** TODO [#C] Get shell integration working while running ~tmux~ :feat:
Just try running ~tmux~ from a =vterm= buffer and you'll see the problem.

*** WAIT [#C] Enable soft line wrapping :tweak:
=term= has the ~term-suppress-hard-newline~ option, which is supposed to
soft-wrap lines. (In practice, I haven't gotten this to work.) =vterm=, however,
does not have such an option. There is an open issue for this:
https://github.com/akermu/emacs-libvterm/issues/179

Somebody worked around this by running GNU Screen in each ~vterm~ buffer:
https://github.com/akermu/emacs-libvterm/issues/179#issuecomment-1045331359

#+begin_src sh :tangle no
sudo dnf -y install screen
#+end_src

#+begin_src emacs-lisp :tangle no
(setq vterm-shell "screen")
#+end_src

#+begin_src screen :tangle no
# ~/.screenrc
termcapinfo xterm* ti@:te@
#+end_src

I would be OK with doing this, but I wouldn't be surprised if I ran into shell
integration issues just like I have when attempting to run ~tmux~ in ~vterm~
buffers. For the time being, I'll just wait it out.

* :checkers
** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :checkers
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** syntax [6/10]
*** DONE [#A] Disable flycheck in all Org source blocks :hack:
References:
+ [[help:flycheck-may-enable-mode]]
+ [[help:flycheck-ephemeral-buffer-p]]
+ [[info:elisp#Buffer Names][elisp#Buffer Names]]
+ [[info:elisp#Advice Combinators][elisp#Advice Combinators]]

~flycheck-global-mode~ only enables ~flycheck-mode~ in a buffer when
~flycheck-may-enable-mode~ returns ~t~. One predicate considered by
~flycheck-may-enable-mode~ is ~flycheck-ephemeral-buffer-p~, whose
implementation determines that a buffer is ephemeral only if its name begins
with a space. However, I also consider Org source buffers to be ephemeral,
despite their names not starting with a space.

By advising ~flycheck-ephemeral-buffer-p~ to also consider Org source buffers as
ephemeral, I can achieve my goal of disabling flycheck in all Org source
buffers. The reason why I do this is because Org source buffers are most often
snippets of a wider context (e.g. literate programs, interpreter sessions) and
are therefore very prone to syntax errors when viewed independently; *these
errors should not be reported*.

#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (defadvice! my/org-src-a (&rest _)
    "Consider Org Src buffers as ephemeral (do not enable flycheck)."
    :after-until #'flycheck-ephemeral-buffer-p
    (string-prefix-p "*Org Src" (buffer-name))))
#+end_src

*** DONE [#A] Configure =flycheck-posframe= child frames :tweak:
#+begin_src emacs-lisp :tangle yes
(after! flycheck-posframe
  (setq flycheck-posframe-border-width 10
        flycheck-posframe-position 'point-bottom-left-corner-upward))
#+end_src

*** DONE [#B] Display =flycheck= message at point when entering a buffer :bug:
#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (defun my/flycheck-redisplay-h ()
    (when flycheck-mode
      (flycheck-display-error-at-point-soon)))
  (add-hook! '(doom-switch-buffer-hook doom-switch-window-hook)
             #'my/flycheck-redisplay-h))
#+end_src

*** DONE [#B] Hide =flycheck-posframe= child frame upon moving point :bug:
#+begin_src emacs-lisp :tangle yes
(after! flycheck-posframe
  (defun my/flycheck-posframe-update-h (&rest _)
    (when (flycheck-posframe-hidehandler _)
      (posframe-hide flycheck-posframe-buffer)))
  (add-hook! '(post-command-hook window-state-change-functions)
             #'my/flycheck-posframe-update-h))
#+end_src

*** DONE [#C] Configure =flycheck-posframe= messages :tweak:
#+begin_src emacs-lisp :tangle yes
(after! flycheck-posframe
  (flycheck-posframe-configure-pretty-defaults)
  (eeowaa-use-face flycheck-posframe-info-face flycheck-error-list-info)
  (eeowaa-use-face flycheck-posframe-warning-face flycheck-error-list-warning)
  (eeowaa-use-face flycheck-posframe-error-face flycheck-error-list-error))
#+end_src

*** DONE [#C] Raise error threshold for =flycheck= :tweak:
#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (setq flycheck-checker-error-threshold 500))
#+end_src

*** STRT [#A] Allow dynamic changing of error levels displayed :feat:
I have created a couple commands (~my/flycheck-set-level~ and
~my/flycheck-reset-level~) as an interface to Flycheck's error-level toggling
functionality. (Note that Flycheck is missing the capability to hide errors in
the source buffer by error level, and after a bit of digging, it seems too
difficult to implement myself.)

However, when toggling the Flycheck buffer using =SPC c x=, the buffer-local
value of ~flycheck-error-list-minimum-level~ gets reset in the error list, while
it (and the buffer-local value of ~flycheck-navigation-minimum-level~) remain
unchanged in the source buffer. This creates a mismatch that must be resolved by
running ~my/flycheck-set-level~ again. Due to this problem, I've decided to
temporarily keep the two new commands unbound to any keys.

#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (defun my/flycheck-set-level (level)
    "Set the Flycheck error level"
    (interactive
     (list (flycheck-read-error-level
            "Minimum error level (errors at lower levels will be hidden): ")))
    (when (and level (not (flycheck-error-level-p level)))
      (user-error "Invalid level: %s" level))

    ;; Hide errors in the error list that have a level lower than `level'
    (flycheck-error-list-set-filter level)
    (with-current-buffer (or flycheck-error-list-source-buffer (current-buffer))
      (setq-local flycheck-error-list-minimum-level level)

      ;; Only navigate between errors in the source buffer than have a level of
      ;; at least `level' (other errors will still be displayed)
      (setq-local flycheck-navigation-minimum-level level)))

  (defun my/flycheck-reset-level (&optional refresh)
    "Reset the Flycheck error level"
    (interactive '(t))

    ;; Refresh the error list according to the global value of
    ;; `flycheck-error-list-minimum-level'
    (flycheck-error-list-reset-filter refresh)
    (with-current-buffer (or flycheck-error-list-source-buffer (current-buffer))
      (kill-local-variable 'flycheck-error-list-minimum-level)

      ;; Refresh navigation between errors in the source buffer according to the
      ;; global value of `flycheck-navigation-minimum-level'
      (kill-local-variable 'flycheck-navigation-minimum-level))))
#+end_src

*** STRT [#B] Show error indicators in the margin when in terminal Emacs :bug:
Terminal Emacs does not have fringes -- only margins -- so when Emacs is run in
nongraphical mode, I would like for Flycheck to use the right margin instead of
the right fringe for error indicators. As far as I can tell, the right margin is
not used for anything, so Flycheck should be free to use it.

Unfortunately, when I change ~flycheck-indication-mode~ to ~right-margin~ and
then run ~flycheck-refresh-fringes-and-margins~, nothing displays in the right
margin. This happens in both TUI and GUI Emacs. Also, just as a test, I tried
changing the setting to ~left-margin~, but that did not work, either (note that
the left margin is currently used by =:ui vc-gutter=).

I should probably use ~doom/sandbox~ (=SPC h d x=) to try this in vanilla Emacs
and see if Doom is to blame.

*** STRT [#B] Always use =flycheck-posframe= instead of alternatives :tweak:
Currently, mouseover of a =flycheck= error shows the message in the echo area
instead of in a child frame, so I still have that to fix.

#+begin_src emacs-lisp :tangle yes
(when (and initial-window-system
           (modulep! :tools lsp)
           (not (modulep! :tools lsp +eglot)))
  (setq lsp-ui-sideline-enable nil))
#+end_src

*** TODO [#B] Update =flycheck-posframe= child frame position as needed :bug:
The child frame position should be adjusted upon scrolling, resizing, and moving
windows. Look to =company-box= for inspiration.

Until I get this fixed, it is best to display the child frame at a more fixed
position. I like the bottom-right window position because it doesn't interfere
with other UI elements like the tab bar, tab line, or line numbers; it also
lines up with the error indicators in the right fringe.

#+begin_src emacs-lisp :tangle yes
(after! flycheck-posframe
  (setq flycheck-posframe-position 'window-bottom-right-corner))
#+end_src

This workaround does not address all issues that can happen when resizing and
moving windows, but it's good enough in most cases.

** spell [5/5]
#+begin_quote
This modules provides spellchecking powered by =aspell=, =hunspell= or =enchant=.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `checkers/spell` module
brew install aspell
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `checkers/spell` module
sudo dnf -y install aspell
#+end_src

*** DONE [#A] Prevent ~spell-fu-mode~ from being enabled by default :tweak:
I like having the option, but I would prefer to enable it manually per buffer.

#+begin_src emacs-lisp :tangle yes
(when (and (modulep! :checkers spell)
           (not (modulep! :checkers spell +flyspell)))
  (remove-hook 'text-mode-hook 'spell-fu-mode))
#+end_src

**** COMMENT My initial stab at this
:LOGBOOK:
- Note taken on [2021-05-28 Fri 15:22] \\
  This was very convoluted and unnecessary, but I learned a lot during this
  process, so I want to save my work for future reference.
:END:
Unfortunately, ~use-package-hook!~ cannot be used to remove ~spell-fu-mode~ from
~text-mode-hook~ as set in the ~:hook~ section of the ~use-package!~ declaration
for =spell-fu= in the =checkers/spell= Doom module. (See [[https://emacs.stackexchange.com/questions/64395/how-to-override-the-hook-section-of-a-use-package-declaration][this post on Emacs
StackExchange]] for confirmation.)

Instead, I have decided to advise the ~add-hook~ function to prevent specific
functions from being added to specific hooks.

Note that I tangle to =early-init.el= (which I ~load!~ at the start of
=init.el=) so that the ~add-hook~ advice can be in place before the ~doom!~
block loads the =checkers/spell= module, which is what sets the hook.

: #+begin_src emacs-lisp :tangle early-init.el
#+begin_src emacs-lisp :tangle no
(setq my/hook-deny-list
      '((text-mode-hook . spell-fu-mode)))

(defun my/hook-denied-p (&rest r)
  (let ((hook (car r))
        (func (cadr r)))
    (member (cons hook func) my/hook-deny-list))

(advice-add 'add-hook :before-until #'my/hook-denied-p)
#+end_src

*** DONE [#B] Prevent =which-key= errors related to =spell-fu= :hack:
If I press =]= before =spell-fu= has been loaded and wait for a =which-key=
popup, I get the following error:

: Error running timer ‘which-key--update’: (void-function +spell/next-error)

Considering that the function /should/ be autoloaded in =+spell-fu.el= (see code
snippet below), I don't know why I'm getting that error.

#+begin_src emacs-lisp :tangle no
;;;###autoload (defalias '+spell/next-error #'spell-fu-goto-next-error)
#+end_src

Regardless, I just want to fix the issue. A manual workaround is to execute
=SPC t s= (~spell-fu-mode~) twice: the first time to load =spell-fu= and the
second time to disable it. For now, I'll just always require it:

#+begin_src emacs-lisp :tangle yes
(require 'spell-fu)
#+end_src

*** DONE [#B] Fix ~+spell/add-word~ :bug:
~+spell/add-word~ (=zg=) spits the following error:
#+begin_quote
Cannot add "<word>" to any active dictionary.
#+end_quote

To test, try adding the word "arity" to your dictionary, which will fail with
the above error message. ~+lookup/dictionary-definition~ (=SPC s t=) gives us
the definition of the word:

#+begin_quote
The number of arguments or operands taken by a function or operator.
#+end_quote

From this exercise, we can confirm that =:checkers spell= and =:tools lookup
+dictionary= seem to use different dictionaries.

Reference:
- ~ispell-personal-dictionary~
- ~spell-fu-word-add~
- ~spell-fu-dictionaries~

*UPDATE*: The following works for my simple use case:

#+begin_src emacs-lisp :tangle yes
(when (and (modulep! :checkers spell)
           (not (modulep! :checkers spell +flyspell)))
  (setq ispell-dictionary "en"
        ispell-personal-dictionary
        (expand-file-name (concat "ispell/" ispell-dictionary ".pws")
                          doom-data-dir))

  ;; Create `ispell-personal-dictionary' if the file is missing
  (after! ispell
    (if (not (file-exists-p
              (concat (file-name-as-directory ispell-aspell-data-dir) ispell-dictionary ".dat")))
        (warn (concat "ispell-dictionary \"%s\" has no corresponding .dat file in %s.\n"
                      "Modify `ispell-dictionary' or install the missing aspell language pack.")
              ispell-dictionary ispell-aspell-data-dir)
      (unless (file-exists-p ispell-personal-dictionary)
        (make-directory (file-name-directory ispell-personal-dictionary) t)
        (with-temp-file ispell-personal-dictionary
          (insert (format "personal_ws-1.1 %s 0\n" ispell-dictionary))))))

  ;; Remove Doom's `+spell--create-word-dict-a' advice (which doesn't work
  ;; for me) and just rely on the existence of `ispell-personal-dictionary'.
  (after! spell-fu
    (when (fboundp '+spell--create-word-dict-a)
      (advice-remove 'spell-fu--word-add-or-remove #'+spell--create-word-dict-a))))
#+end_src

** grammar [3/4]
#+begin_quote
This module adds grammar checking to Emacs to aid your writing by combining
=lang-tool= and =writegood-mode=.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `checkers/grammar` module
brew install languagetool
sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `checkers/grammar` module
# Reference: <https://raw.githubusercontent.com/languagetool-org/languagetool/master/install.sh>
sudo dnf -y install unzip java-latest-openjdk-headless
(
    set -e
    mkdir -p ~/.local/src/doom
    cd ~/.local/src/doom

    # Download stable release of LanguageTool
    rm -f LanguageTool-stable.zip
    curl -o LanguageTool-stable.zip \
         -l https://languagetool.org/download/LanguageTool-stable.zip

    # Unzip the tool and determine the release number
    release_dir=$(unzip -u LanguageTool-stable.zip | awk '!x&&/creating:/{print$2;x=1}')

    # Move into place and clean up
    rm -rf LanguageTool
    mv "$release_dir" LanguageTool
    rm LanguageTool-stable.zip
)
#+end_src

*** DONE [#A] Specify JAR paths on Linux :tweak:
#+begin_src emacs-lisp :tangle yes
(when IS-LINUX
  (let ((langtool-dir (concat (file-name-as-directory (getenv "HOME"))
                              ".local/src/doom/LanguageTool/")))
    (setq langtool-language-tool-jar (concat langtool-dir "languagetool-commandline.jar")
          langtool-language-tool-server-jar (concat langtool-dir "languagetool-server.jar"))))
#+end_src

*** DONE [#B] Disable =writegood-mode= by default :tweak:
#+begin_src emacs-lisp :tangle yes
(remove-hook! '(org-mode-hook
                markdown-mode-hook
                rst-mode-hook
                asciidoc-mode-hook
                latex-mode-hook
                LaTeX-mode-hook)
  #'writegood-mode)
#+end_src

*** TODO [#B] Add toggle bindings for =lang-tool= and/or =writegood-mode= :feat:
* :tools
#+begin_quote
Small modules that give Emacs access to external tools & services.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :tools
#+end_src

** Miscellany [0/4]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** LOOP [#C] Configure =eeowaa-project= package
For now, I am not loading =eeowaa-project=. See the commentary in the library
header block for more information.

#+begin_src emacs-lisp :tangle no
(setq eeowaa-project-init-files-alist
      '(;; Git
        (".gitignore")
        (".gitattributes")

        ;; Documentation
        ("README.md")
        ("LICENSE")
        ("todo.org")

        ;; Dev tooling
        (".envrc")
        (".editorconfig")))
#+end_src

*** LOOP [#C] Add templates for each file in =eeowaa-project= :feat:
*** LOOP [#C] Add support to =eeowaa-project= for language-specific files :feat:
+ =.gitignore= (steal from https://github.com/github/gitignore.git)
+ Packaging (e.g. =package.json=, =Dockerfile=)
+ Execution (e.g. =package.json=, =docker-compose.yml=)
+ =.dir-locals.el= (for =projectile= configuration)
+ =todo.org= (for language-specific boilerplate tasks)

Could add templates under =stow-dotfiles/<lang>/.local/etc/skel/= (this is what
I'm currently doing with Python). I could also create subdirectories under
=skel/= specific to certain project types.

*** LOOP [#C] Add support to =eeowaa-project= for environment-specific files :feat:
+ CI/CD (e.g. steal from https://github.com/Microsoft/azure-pipelines-yaml)
+ PR templates (e.g. =.azuredevops/pull_request_template.md=)

** ansible [2/3]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/ansible` module
brew install ansible
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/ansible` module
pipx install ansible-core
ansible-galaxy collection install community.general
#+end_src

*** DONE [#B] Use evil keybindings in Ansible documentation modes :tweak:
#+begin_src emacs-lisp :tangle yes
(after! ansible
  (pushnew! evil-normal-state-modes 'ansible-doc-module-mode))
#+end_src

*** LOOP [#A] Ensure that ~+ansible-yaml-mode~ is enabled on all relevant YAML files :bug:
I think that =projectile= is to blame here. Sometimes everything works as
expected, sometimes not. I should formally define what my expectations are when
working with projects and Doom workspaces and make sure that things are working
that way. In the meantime, ~projectile-invalidate-cache~ (=SPC p i=) seems to
fix things.

** biblio [0/0] :ARCHIVE:
** bitwarden [3/4] :eeowaa:
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/bitwarden` module
npm install -g @bitwarden/cli
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/bitwarden` module
npm install -g @bitwarden/cli
#+end_src

*** DONE [#A] Configure bitwarden
The username should go in =~/.config/doom/custom.el=:

#+begin_src emacs-lisp :tangle no
;; Bitwarden
(setq bitwarden-user "johndoe@example.com")
#+end_src

*** DONE [#B] Bind key to open Bitwarden vault
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("o" . "open")
       :desc "Bitwarden vault" "v" #'bitwarden-list-all))
#+end_src

*** STRT [#B] Configure UI elements
The following works well with standard-sized left and right side windows
displayed on the laptop I am currently using:

#+begin_src emacs-lisp :tangle yes
(setq +bitwarden-item-name-width 50
      +bitwarden-user-name-width 68
      +bitwarden-revision-date-width 24)
#+end_src

I would prefer to make this dynamic.

** cloudformation [0/0] :eeowaa:ARCHIVE:
** debugger [1/8]
References:
+ https://www.youtube.com/watch?v=0bilcQVSlbM
+ https://docs.doomemacs.org/latest/modules/tools/debugger/
+ [[~/.config/emacs/.local/straight/repos/dap-mode/docs/page/configuration.md]]

*** COMMENT Documentation
**** Basic usage (after configuration)
1. Ensure that LSP is already enabled in the current buffer
2. Set a breakpoint at point with ~dap-breakpoint-add~
3. Start the debugger with ~dap-debug~
4. Run ~dap-hydra~ to open a control panel (close it when finished)
5. Use the mouse to quickly jump between and interact with side windows
6. Run ~dap-disconnect~ when finished debugging

**** Cool stuff
1. Print expressions or set variables via ~dap-ui-repl~
2. Log arbitrary expressions in code via ~dap-breakpoint-log-message~
3. Monitor arbitrary expression values with ~dap-ui-expressions-add~
4. Set conditional breakpoints with ~dap-breakpoint-condition~ (expression) and
   ~dap-breakpoint-hit-condition~ (number of hits before stopping)

**** Runtime exceptions
1. If you want the debugger to pause execution upon runtime exceptions, you must
   specifically enable that behavior. The easiest way to accomplish this is
   through checkbox(es) in the "Breakpoints" side window.
2. Without breaking upon runtime exceptions, you run the risk of your program
   exiting before you can use =dap-mode= to debug it. Even if your program does
   not exit upon an exception, it is a good idea to examine state before
   continuing.
3. When an exception does occur, sometimes it can be hard to detect. Look for
   one or more of the following indicators:
   1. Program execution will stop on a line that you did not set a breakpoint
      on. =dap-mode= doesn't do a great job at drawing attention to stopped
      execution lines (e.g. the icon might be missing), so look out for strange
      syntax highlighting as a possible giveaway.
   2. The current session in the "Debug Sessions" side window will have an
      active line ending with a small comment/note saying "Exception".
   3. A new message will be written to =*Messages*= in the following format:
      : LSP :: Exception has occurred: <description>
      Don't count on the description to contain much information. It could even
      just be a one-word "ERROR" message.
   4. For good measure, you can add hooks to ~dap-session-changed-hook~ to draw
      your attention to an exception. Some ideas include moving the cursor to
      the line of code or to the "Exception" stack frame in the "Debug Sessions"
      side window, flashing the cursor, and/or displaying the message mentioned
      in point 3 in a more prominent fashion, such as in a popup window.
      - If you decide to do this, make sure that your exception-handling
        functions in ~dap-session-changed-hook~ only do trigger when the hooks
        are run from the "stopped" pcase branch of ~dap--on-event~.
4. When program execution is paused at a breakpoint, the following strategies
   can help debug (this applies to exceptions or really anywhere in your code
   where you've hit an error condition):
   - Examine the "Debug Sessions" side window. It contains a call stack of
     program execution up to that point (newest frames on top) for each
     debugging session. If you are lucky, you might even be able to use this
     multi-session feature to triage issues involving IPC.
   - View corresponding frame data in the "Locals" side window and evaluate
     arbitrary expressions in ~dap-ui-repl~.
   - *Move back up the call stack!* This is helpful in more than just navigating
     the source code -- it also allows you to examine frame data in the "Locals"
     window at each function call, modify variables via ~dap-ui-repl~, and
     replay execution right before the point of failure (which of course allows
     you to step through different conditional code paths).

More generally speaking: determine the error condition, break on that (via
standard breakpoints if you know that some code is always buggy, conditional
breakpoints if the line only sometimes produces an error, or via exceptions),
and work backwards from there. /NOTE: What about message outputs?/

There is a good chance you won't even see anything in the output, error, or
message buffers to indicate what happened when an exception is thrown
(stdout/stderr are not necessarily written to by all execution threads). If this
is the case in your situation, you might get better output by running the
program on the console and viewing console output. See the documentation for
"[[*Untested
features][untested features]]" below, which may be able to help with that.

**** Known issues and workarounds
***** Execution
1. If the debugger is not starting and is complaining about =lsp-treemacs=, try
   killing all Treemacs buffers (=Q= in the buffers) and try again. If there is
   still a similar error message, try updating and rebuilding packages.
2. Sometimes debuggers do not get installed correctly, or need to be
   reinstalled. Don't be too surprised when this happens -- just reinstall it.
3. The following error message can sometimes appear even if you have not
   knowingly switched sessions:
   #+begin_quote
   dap--send-message: Session <name> is already terminated
   #+end_quote
   A workaround is to run ~dap-switch-session~, which should restore normal
   operation, if only temporarily. The best solution is probably to restart
   Emacs (although this is really just a cop out).

***** Breakpoints
1. Currently, =dap-mode= only supports breakpoint icons in the fringe, not the
   margin, so indicators will not appear in TTY Emacs. Use the breakpoint window
   instead (~dap-ui-breakpoints~ or ~dap-ui-breakpoints-list~).
2. If you delete a file containing breakpoints without first deleting the
   breakpoints, you may not be able to open the breakpoints list. The only
   workaround I am aware of is to remove all breakpoints via
   ~dap-breakpoint-delete-all~.
3. Unlike other debugging interfaces, =dap-mode= has no mechanism to temporarily
   disable breakpoints while still keeping track of them. A workaround is to
   make the breakpoint conditional and set the condition to a language-specific
   expression that will always evaluate to false (e.g. ~false~, ~False~, ~0~)
   via ~dap-breakpoint-condition~.
4. It can be somewhat unintuitive to determine where the program is stopped. In
   =dap-mode=, the best way I've found is through the "Debug Sessions" side
   window: just expand the tree for the current session until you see a process
   labeled "Breakpoint", "Step", or "Exception" (or possibly some other label),
   expand the process to view a call stack, and then press =RET= on the top
   entry (in *bold*, representing the current frame), which will take you to the
   line of code where execution stopped.
5. In order to view breakpoint conditions, you need to use
   ~dap-ui-breakpoints-list~ instead of the standard ~dap-ui-breakpoints~.

***** Expressions
1. The "Locals" window will cut off values if they do not fit nicely in the
   window. Try ~dap-eval~ instead. If that still truncates values, you can
   always evaluate a print statement of the value (again, using ~dap-eval~) so
   that it gets sent to the DAP output buffer, which never truncates values.
   Instead of ~dap-eval~, you can also use the REPL (~dap-ui-repl~).
2. The REPL has no auto-completion. However, LSP-based auto-completion is still
   possible via temporary (throwaway) edits to source buffers.
3. The REPL, deriving from =comint-mode=, can be cleared via
   ~comint-clear-buffer~, bound to =C-c M-o= by default. This isn't really an
   "issue" so much as it is something that may not be immediately obvious.

**** Untested features
1. Set the ~dap-print-io~ option to print all protocol messages. This could be
   good for debugging issues with debugging!
2. If the ~kind~ argument in a debug template is set to "external", the program
   is run in the terminal specified by the ~dap-external-terminal~ option. See
   also: ~dap-default-terminal-kind~.

**** Notes on configuration
1. Debugger configs can come from VS Code =launch.json= files, described here:
   https://code.visualstudio.com/docs/editor/debugging (~dap-debug~ will include
   those launch templates in the completing-read candidate list). Pay special
   attention to config variables, most of which apply to strings in =dap-mode=
   templates, as well. The ~dap-variables-standard-variables~ option contains
   the full list, and it can be customized.
2. Speaking of, use ~dap-debug-edit-template~ to edit such templates, or
   ~dap-register-debug-template~ to add a new one. If you are wondering how nil
   values get interpreted, check the definitions of functions stored in
   ~dap--debug-providers~ (e.g. ~dap-node--populate-start-file-args~).

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/debugger` module
# https://stackoverflow.com/questions/18423124/please-check-gdb-is-codesigned-see-taskgated8-how-to-get-gdb-installed-w
brew install gdb
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/debugger` module
sudo dnf -y install lldb gdb unzip
nvm install node
#+end_src

*** TODO [#A] Delete breakpoints when their file is deleted :bug:
Also, when opening a list of breakpoints (via ~dap-ui-breakpoints-list~ or
~dap-ui-breakpoints~), delete breakpoints from cache when their file does not
exist.

*** TODO [#A] Allow displaying breakpoints in the margin :feat:
This is a missing feature of =dap-mode= that would allow it to work well in TTY
Emacs frames. See documentation on [[info:elisp#Display Margins][Display Margins]] as well as the implementation
of the =diff-hl= package.

*** STRT [#B] Replace DAP Hydra with prefix map :feat:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      ;;; <leader> d --- debug
      (:prefix-map ("d" . "debug")
       :desc "Next"                "n" #'dap-next
       :desc "Step in"             "i" #'dap-step-in
       :desc "Step out"            "o" #'dap-step-out
       :desc "Continue"            "c" #'dap-continue
       :desc "Restart frame"       "r" #'dap-restart-frame
       :desc "Disconnect"          "Q" #'dap-disconnect
       (:prefix ("s" . "switch")
        :desc "Session"             "s" #'dap-switch-session
        :desc "Thread"              "t" #'dap-switch-thread
        :desc "Stack frame"         "f" #'dap-switch-stack-frame
        :desc "Up stack frame"      "u" #'dap-up-stack-frame
        :desc "Down stack frame"    "d" #'dap-down-stack-frame)
       (:prefix ("b" . "breakpoints")
        :desc "Toggle"              "b" #'dap-breakpoint-toggle
        :desc "Delete"              "d" #'dap-breakpoint-add
        :desc "Add"                 "a" #'dap-breakpoint-delete
        :desc "Set condition"       "c" #'dap-breakpoint-condition
        :desc "Set hit count"       "h" #'dap-breakpoint-hit-condition
        :desc "Set log message"     "l" #'dap-breakpoint-log-message)
       (:prefix ("d" . "debug")
        :desc "Debug"               "d" #'dap-debug
        :desc "Debug recent"        "r" #'dap-debug-recent
        :desc "Debug last"          "l" #'dap-debug-last
        :desc "Edit debug template" "e" #'dap-debug-edit-template
        :desc "Debug restart"       "s" #'dap-debug-restart)
       (:prefix ("e" . "eval")
        :desc "Eval"                "e" #'dap-eval
        :desc "Eval region"         "r" #'dap-eval-region
        :desc "Eval thing at point" "s" #'dap-eval-thing-at-point
        :desc "Add expression"      "a" #'dap-ui-expressions-add)
       (:prefix ("w" . "window")
        :desc "Locals"              "l" #'dap-ui-locals
        :desc "Breakpoints"         "b" #'dap-ui-breakpoints
        :desc "Breakpoint List"     "B" #'dap-ui-breakpoints-list
        :desc "Expressions"         "e" #'dap-ui-expressions
        :desc "Sessions"            "s" #'dap-ui-sessions
        :desc "REPL"                "r" #'dap-ui-repl)))
#+end_src

*** WAIT [#B] Fix DAP mode error message re: =lsp-treemacs= :bug:
See here: <https://github.com/Alexander-Miller/treemacs/issues/990>

If this issue appears, there is a workaround: kill all of the Treemacs
buffers (don't just close them!) and run ~dap-debug~ again.

*UPDATE*: The following error message is different than the one mentioned in the
above link, and I have not found a workaround besides ignoring it:

: error in process filter: Invalid function: lsp-treemacs-wcb-unless-killed

This might be the reason why the =dap-mode= side windows do not update properly
after stepping (e.g. "Debug Sessions" does not expand, "Locals" does not always
get updated).

*** TODO [#C] Use =projectile= instead of =project= when expanding variables :feat:
Reference: ~dap-variables-standard-variables~

*** TODO [#C] Sort stack frames in numerical order :bug:
Selecting stack frames with ~dap-switch-stack-frame~ presents frames in
seemingly no logical order. However, each stack frame label begins with a
number, so it shouldn't be too hard to sort by that, in theory.

*** STRT [#C] Configure which DAP UI elements appear at startup :tweak:
Reference:
- <https://www.youtube.com/watch?v=0bilcQVSlbM&t=1007s>
- ~dap-auto-configure-features~

#+begin_src emacs-lisp :tangle yes
(setq dap-auto-configure-features
      '(sessions       ;; `dap-ui-sessions'
        ;; locals      ;; `dap-ui-locals'
        breakpoints    ;; `dap-ui-breakpoints'
        ;; expressions ;; `dap-ui-expressions'
        repl           ;; `dap-ui-repl'
        ;; controls    ;; FIXME: `dap-ui-controls-mode'
        ;; tooltip     ;; FIXME: `dap-tooltip-mode'
        ))

;; Remove hook installed by Doom
(remove-hook 'dap-ui-mode-hook 'dap-ui-controls-mode)
#+end_src

** direnv [1/4]
:LOGBOOK:
- Note taken on [2022-08-11 Thu 17:08] \\
  I have re-enabled this module and things seem to be working OK so far. That
  said, I don't have any complicated use cases right now.
:END:
#+begin_quote
This module integrates direnv into Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/direnv` module
brew install direnv
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/direnv` module
sudo dnf -y install direnv
#+end_src

*** TODO [#A] See why =direnv= prevents envvars from propagating between buffers :hack:bug:
This is the original reason why I disabled this module.

*UPDATE*: It looks like the =envrc= package is used by the =direnv= module.
According to the =envrc= project's [[https://github.com/purcell/envrc][documentation]]:

#+begin_quote
This library is like the direnv.el package, but sets all environment variables
buffer-locally, while direnv.el changes the global set of environment variables
after each command.
#+end_quote

So environment variables are set buffer-locally. I wonder if I can exclude
certain environment variables (such as AWS credentials) from this rule, or if I
can somehow set them in a global location to get pulled in by all "dir
environments". Maybe there is a rule for that.

For the sake of debugging, you might want to try the following function:

#+begin_src emacs-lisp :tangle no
(defun my/aws-envvars ()
  "Print the values of AWS environment variables"
  (interactive)
  (dolist (var (seq-filter
                (lambda (s) (string-match "\\`AWS_" s))
                (sort process-environment #'string<)))
    (princ (concat var "\n"))))
#+end_src

*** TODO [#A] Understand how Emacs handles environment variables :doc:
+ [ ] Play around with the following Lisp Interaction buffer
  #+begin_src lisp-interaction :tangle no
  ;; Variables
  initial-environment
  process-environment
  exec-path
  doom-env-file

  ;; Function calls
  (getenv "PATH")
  (getenv "PATH" (selected-frame))
  (getenv-internal "PATH")
  (doom/reload-env)
  (doom-load-envvars-file)
  #+end_src
+ [ ] Consult the documentation for all of those variables and functions
+ [ ] See how Doom Emacs uses those functions and variables (=SPC h d e=)
+ [ ] See how =envrc= uses those functions and variables (=C-h C-l envrc RET=)
  - [ ] Retrieve =envrc= source (=M-x package-install RET envrc RET=)

*** TODO [#B] Try =direnv.el= instead of =envrc= :tweak:
https://github.com/wbolster/emacs-direnv

However, be wary of @purcell's comments on =direnv.el=:
#+begin_quote
+ When switching to a buffer that is not "inside" a project with an =.envrc= file,
  the buffer will see the last project's environment. I would prefer it to see
  the default Emacs environment.

+ When =direnv= fails to execute in the course of switching to a buffer in a new
  project with an =.envrc= file (e.g. because that =.envrc= file is disallowed),
  buffers in the new project will see the environment variables from the
  previous project.

+ Background buffers from a previous project will start seeing the new project's
  environment, so any processes they launch asynchronously after the switch will
  use the wrong environment. (This is probably quite rare in practice.)
#+end_quote

** docker [4/6]
#+begin_quote
This module allows you to manipulate Docker images, containers & more from
Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/docker` module
brew install docker
npm install -g dockerfile-language-server-nodejs
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/docker` module
sudo dnf -y install shadow-utils fuse-overlayfs iptables
sudo systemctl disable --now docker.service docker.socket
dockerd-rootless-setuptool.sh install
curl -fsSL https://get.docker.com/rootless | sh
cat >"$HOME/.profile.d/docker-rootless.sh" <<\EOF
export PATH=$HOME/bin:$PATH
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
EOF
. "$HOME/.profile.d/docker-rootless.sh"
systemctl --user start docker.service
sudo loginctl enable-linger `whoami`
npm install -g dockerfile-language-server-nodejs
#+end_src

*** DONE [#B] Adjust column widths :tweak:
#+begin_src emacs-lisp :tangle yes
(setq! docker-image-columns
       '((:name "Repository" :width 49 :template "{{ json .Repository }}" :sort nil :format nil)
         (:name "Tag" :width 9 :template "{{ json .Tag }}" :sort nil :format nil)
         (:name "Id" :width 13 :template "{{ json .ID }}" :sort nil :format nil)
         (:name "Created" :width 20 :template "{{ json .CreatedAt }}" :sort nil :format (lambda (x) (format-time-string "%F %T" (date-to-time x))))
         (:name "Size" :width 10 :template "{{ json .Size }}" :sort docker-utils-human-size-predicate :format nil))

       docker-container-columns
       '((:name "Id" :width 13 :template "{{ json .ID }}" :sort nil :format nil)
         (:name "Names" :width 35 :template "{{ json .Names }}" :sort nil :format nil)
         (:name "Image" :width 41 :template "{{ json .Image }}" :sort nil :format nil)
         (:name "Command" :width 58 :template "{{ json .Command }}" :sort nil :format nil)
         (:name "Ports" :width 10 :template "{{ json .Ports }}" :sort nil :format nil)
         (:name "Status" :width 26 :template "{{ json .Status }}" :sort nil :format nil)
         (:name "Created" :width 20 :template "{{ json .CreatedAt }}" :sort nil :format (lambda (x) (format-time-string "%F %T" (date-to-time x)))))

       docker-network-columns
       '((:name "Network ID" :width 13 :template "{{ json .ID }}" :sort nil :format nil)
         (:name "Scope" :width 6 :template "{{ json .Scope }}" :sort nil :format nil)
         (:name "Driver" :width 7 :template "{{ json .Driver }}" :sort nil :format nil)
         (:name "Name" :width 50 :template "{{ json .Name }}" :sort nil :format nil)))
#+end_src

*** DONE [#B] Give the ~docker~ command a better keybinding :tweak:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("o" . "open")
       "D" nil ;; remove the old keybinding
       :desc "Container" "c" #'docker))
#+end_src

*** DONE [#C] Filename-mode associations :tweak:
#+begin_src emacs-lisp :tangle yes
;; Replace default association with a more generic one
(delq! "/Dockerfile\\(?:\\.[^/\\]*\\)?\\'" auto-mode-alist #'assoc-string)
(pushnew! auto-mode-alist
          '("/[^/\\]*\\<\\(Docker\\|Container\\)file\\>[^/\\]*$" . dockerfile-mode))
#+end_src

*** TODO [#A] Seamlessly edit files from =vterm= buffers to Docker containers :feat:
1. [ ] Enable directory tracking

   From [[~/.config/emacs/.local/straight/repos/emacs-libvterm/README.md]]:
   #+begin_src markdown
   `vterm` supports _directory tracking_. If this feature is enabled, the default
   directory in Emacs and the current working directory in `vterm` are synced. As a
   result, interactive functions that ask for a path or a file (e.g., `dired` or
   `find-file`) will do so starting from the current location.
   #+end_src

   Setup is shell-dependent. However, busybox's =ash= should hopefully provide a
   good baseline. From https://programmerall.com/article/72172461332/:
   #+begin_quote
   Supported via ~bb_process_escape_sequence~:
   - ~\a~    ASCII bell character (07)
   - ~\e~    ASCII escape character (033)
   - ~\n~    newline
   - ~\r~    carriage return
   - ~\\~    backslash
   - ~\nnn~  char with octal code nnn

   Supported:
   - ~\$~    if the effective UID is 0, a #, otherwise a $
   - ~\w~    current working directory, with $HOME abbreviated with a tilde
             Note: we do not support $PROMPT_DIRTRIM=n feature
   - ~\W~    basename of the current working directory, with $HOME abbreviated with a tilde
   - ~\h~    hostname up to the first '.'
   - ~\H~    hostname
   - ~\u~    username
   - ~\[~    begin a sequence of non-printing characters
   - ~\]~    end a sequence of non-printing characters
   - ~\T~    current time in 12-hour HH:MM:SS format
   - ~\@~    current time in 12-hour am/pm format
   - ~\A~    current time in 24-hour HH:MM format
   - ~\t~    current time in 24-hour HH:MM:SS format

   (all of the above work as ~\A~)

   Not supported:
   - ~\!~    history number of this command
   - ~\#~    command number of this command
   - ~\j~    number of jobs currently managed by the shell
   - ~\l~    basename of the shell's terminal device name
   - ~\s~    name of the shell, the basename of $0 (the portion following the final slash)
   - ~\V~    release of bash, version + patch level (e.g., 2.00.0)
   - ~\d~    date in "Weekday Month Date" format (e.g., "Tue May 26")
   - ~\D{format}~ format is passed to strftime(3).
             An empty format results in a locale-specific time representation.
             The braces are required.

   Mishandled by ~bb_process_escape_sequence~:
   - ~\v~    version of bash (e.g., 2.00)
   #+end_quote


   From https://github.com/brgl/busybox/blob/master/libbb/lineedit.c:
   #+begin_quote
   Compatibly with readline, use the ~\[~ escape to begin a sequence of
   non-printing characters, and the ~\]~ escape to signal the end of such a
   sequence. Example:

   : PS1='\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
   #+end_quote

2. [ ] Test =tramp= support (e.g. ~find-file~ opens files correctly via
   ~default-directory~, managed via =vterm= directory tracking)

   - https://emacs.stackexchange.com/questions/13861/combining-ssh-through-term-with-tramp-to-open-file-in-buffer

3. [ ] Set shell aliases (e.g. to open files in Emacs)

4. [ ] =with-editor= support to export =EDITOR= appropriately.

*** TODO [#B] Enable prompt tracking from =vterm= buffers to Docker containers :feat:
#+begin_quote
And ~vterm~ supports /prompt tracking/. If this feature is enabled, Emacs knows
where the prompt ends, you needn't customize ~term-prompt-regexp~ any more. Then
you can use ~vterm-next-prompt~ and ~vterm-previous-prompt~ moving to end of
next/previous prompt. The default keybinding is =C-c C-n= and =C-c C-p=.
#+end_quote

** editorconfig [2/3]
#+begin_quote
This module integrates [[https://editorconfig.org/][EditorConfig]] into Emacs, allowing users to dictate code
style on a per-project basis with an =.editorconfig= file ([[https://editorconfig-specification.readthedocs.io/][formal
specification]]).
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/editorconfig` module
brew install editorconfig
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/editorconfig` module
sudo dnf -y install editorconfig
#+end_src

*** DONE [#C] Tell ~git-commit-mode~ buffers to ignore editorconfig :tweak:
#+begin_src emacs-lisp :tangle yes
(after! editorconfig
  (add-to-list 'editorconfig-exclude-regexps
               "/\\(?:\\(?:COMMIT\\|TAG\\)_EDIT\\|MERGE_\\)MSG\\'"))
#+end_src

It is also a good idea to add the following entry to project-specific
editorconfig files ([[https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting][reference]]):

#+begin_src editorconfig-conf
[COMMIT_EDITMSG,TAG_EDITMSG,MERGE_MSG]
max_line_length = 70
#+end_src

*** TODO [#C] Tell flycheck for Markdown to respect editorconfig :tweak:
I would like to advise ~editorconfig-set-line-length~ to modify the line-length
rule used by ~markdownlint~. *UPDATE*: For now, I am just adding
=.markdownlintrc= config files to project directories like this:

#+begin_src json
{
  "default": true,
  "MD007": { "indent": 4 }
}
#+end_src

** ein [3/4]
#+begin_quote
Adds Jupyter notebook integration into emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/ein` module
brew install python
pipx install --include-deps jupyter

## Install the bash_kernel package into the jupyter virtualenv
pipx inject jupyter bash_kernel

## Run the installer script to install the kernel in the virtualenv
. "$(pipx environment -v PIPX_LOCAL_VENVS)/jupyter/bin/activate"
python -m bash_kernel.install --sys-prefix
deactivate

## Verify that the bash kernel is visible to jupyter
jupyter kernelspec list
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/ein` module
sudo dnf -y install python3 pipx
pipx install --include-deps jupyter

## Install the bash_kernel package into the jupyter virtualenv
pipx inject jupyter bash_kernel

## Run the installer script to install the kernel in the virtualenv
. "$(pipx environment -v PIPX_LOCAL_VENVS)/jupyter/bin/activate"
python -m bash_kernel.install --sys-prefix
deactivate

## Verify that the bash kernel is visible to jupyter
jupyter kernelspec list
#+end_src

*** DONE [#B] Display inline images in output :feat:
#+begin_src emacs-lisp :tangle yes
(when initial-window-system
  (setq ein:output-area-inlined-images t))
#+end_src

*** DONE [#B] Configure =ob-ein= :feat:
#+begin_src emacs-lisp :tangle yes
;; HACK The machinery provided by `ob-ein-languages' and `ob-ein--babelize-lang'
;; is insufficient for bash, so we do it by hand.
(after! ob
  (pushnew! org-babel-load-languages '(ein . t))
  (require 'ob-ein)

  ;; Execute in an anonymous local session by default
  (setq ob-ein-default-header-args:ein
        '((:session . "localhost")))

  ;; This does two things:
  ;; 1. Allows the correct kernel to be selected for execution
  ;; 2. Enables bash-specific features in the source buffer
  (when (not (fboundp 'bash-mode))
    (define-derived-mode bash-mode sh-mode "Bash-script"
      "Major mode for editing bash scripts."
      (sh-set-shell "bash" nil nil)))
  (pushnew! org-src-lang-modes
            '("bash" . bash)
            '("ein-bash" . bash))

  ;; Send output from `ein-bash' source blocks back to org buffer
  (let ((alist (assoc-delete-all :results ob-ein-default-header-args:ein)))
    (setq org-babel-default-header-args:ein-bash
          (push '(:results . "output verbatim") alist)))

  ;; Function to execute `ein-bash' source blocks with
  (defun org-babel-execute:ein-bash (body params)
    (require 'ob-shell nil t)
    ;; hack because ob-ein loads independently of ein
    (custom-set-variables '(python-indent-guess-indent-offset-verbose nil))
    (let ((parser 'org-babel-variable-assignments:bash))
      (ob-ein--execute-body
       (if (fboundp parser)
           (org-babel-expand-body:generic
            body params (funcall (symbol-function parser) params))
         body)
       params))))
#+end_src

*** TODO [#C] Exclude result names from =ox-ipynb= output :tweak:
In the following example, ~a34ef92b-1a76-41b3-a410-79bdac3f55e9~ would appear
after the output block of the resulting IPYNB buffer:

#+begin_src org :eval no
,#+NAME: a34ef92b-1a76-41b3-a410-79bdac3f55e9
,#+begin_src ein-bash
echo "Hi, ${name}!"
,#+end_src

,#+RESULTS: a34ef92b-1a76-41b3-a410-79bdac3f55e9
: Hi, Mom!
#+end_src

A workaround is to simply *not export* the results.

** elasticsearch [0/0] :eeowaa:
** eval [1/4]
*** DONE [#A] Implement arbitrary region copy/paste between buffers :feat:
I would like to be able to "send" a region from one buffer to another buffer
completely at will.

#+begin_src emacs-lisp :tangle yes
(defvar-local my/linked-buffer nil
  "The buffer that `my/send-region' sends text to.")

(defun my/region-string (beg end)
  "Return contents of active region or evil selection.
This function also works as expected on rectangular regions and
evil block selections."
  (interactive "r")
  (let (apply-on-rectangle-fn)
    (cond
     (rectangle-mark-mode
      (setq apply-on-rectangle-fn #'apply-on-rectangle))
     ((and (eq 'visual (bound-and-true-p evil-state))
           (eq evil-visual-selection 'block))
      (setq apply-on-rectangle-fn #'evil-apply-on-rectangle)))
    (if apply-on-rectangle-fn
        (cl-letf ((lines (list nil))
                  ((symbol-function 'buffer-substring) #'buffer-substring-no-properties))
          (funcall apply-on-rectangle-fn #'extract-rectangle-line beg end lines)
          (setq lines (nreverse (cdr lines)))
          (mapconcat #'identity lines "\n"))
      (buffer-substring-no-properties beg end))))

(defun my/send-region (beg end)
  "Send text in region to a linked buffer.

If the current buffer does not have a linked buffer, or given a
non-nil prefix argument, this function will prompt for a buffer
and set the linked buffer accordingly.

Indentation is removed from the region before sending to the
linked buffer; the indentation level is defined by the first
line. This helps when sending indented source blocks (e.g. in
`org-mode' and `markdown-mode') to REPLs.

Trailing whitespace is also removed from the region before
sending to the linked buffer; however, only one trailing newline
is removed. This helps in situations where consecutive trailing
newlines have special meaning, such as in Python function
definitions.

Contrast this function to `send-region', which sends a region to
a process instead of another buffer. Use `my/send-region' instead
if you want to send region to a REPL or terminal emulator."
  (interactive "r")
  (let* ((region-string (my/region-string beg end))
         (region-noindent (with-temp-buffer
                            (insert region-string)
                            (goto-char (point-min))
                            (indent-rigidly (point) (point-max) (- (current-indentation)))
                            (buffer-string)))
         (trailing-newlines (if (string-match "\\(\\(?:\r?\n\\)+\\)\r?\n\\'" region-noindent)
                                (match-string 1 region-noindent)
                              ""))
         (text (concat (string-trim-right region-noindent) trailing-newlines))
         (prompt (or (and (or (null my/linked-buffer) current-prefix-arg)
                          "Select a buffer to link: ")
                     (and (not (buffer-live-p my/linked-buffer))
                          "Linked buffer is invalid. Select a new buffer: "))))
    (when prompt
      (setq my/linked-buffer
            (get-buffer (read-buffer-to-switch prompt))))
    (with-current-buffer my/linked-buffer
      ;; TODO Test with `term', `shell', `eshell', various REPLs, and the
      ;; scratch buffer. There is probably a better way to do this.
      (cond
        ((eq major-mode 'vterm-mode)
         (vterm-insert text)
         (require 'general)
         (funcall (general-simulate-key "RET")))
        ((derived-mode-p 'comint-mode)
         (end-of-buffer)
         ;; TODO Do not block execution waiting for output
         (let ((comint-process-echoes t))
           (dolist (line (split-string text "\r?\n"))
             (insert line)
             (comint-send-input))))
        (t
         (message "Unsupported mode: %s" major-mode))))))

(map! :v (kbd "C-c e") #'my/send-region)
#+end_src

*** STRT [#C] Configure =comint= scrollback behave similarly to =vterm= :tweak:
- [X] Define separate functions for clearing and clearing scrollback
- [X] Bind ~my/comint-clear-scrollback~ to =C-c C-l= in ~comint-mode-map~
- [X] Prevent =comint= from scrolling the buffer after entering a command
- [X] Send =C-d= straight through to comint (blame ~evil-insert-state-bindings~)
- [ ] Ensure that =C-p= and =C-n= work even after Doom loads the python module

#+begin_src emacs-lisp :tangle yes
(after! comint
  (defun my/comint-clear ()
    "Scroll the prompt to the top of the window."
    (interactive)
    (cl-assert (derived-mode-p 'comint-mode))
    (let ((inhibit-redisplay t))
      (end-of-buffer)
      (comint-next-prompt 1))
    (recenter 0))
  (defalias 'my/comint-clear-scrollback #'comint-clear-buffer)
  (setq-hook! 'comint-mode-hook
    revert-buffer-function (lambda (&rest _) (my/comint-clear)))
  (map! :map comint-mode-map
        "C-c C-l" #'my/comint-clear-scrollback
        :i "C-d" #'comint-send-eof)
  (setq-default comint-scroll-show-maximum-output nil))
#+end_src

*** TODO [#B] Configure comint to select previous input in an intelligent way :bug:
Every time a newline is entered in a comint buffer, the line is treated as
independent input, so ~comint-previous-input~ and ~comint-next-input~ operate on
those lines. However, I want to cycle through entire /statements/, even if those
statements span multiple input lines.

*** TODO [#C] Enable "echo off" in ~my/send-region~ :feat:
There are some cases where one just wants to evaluate some code in an
interpreter associated with a REPL, but does not actually want to see the code
being pasted into the REPL. Refer to ~send-region~ and ~+eval/buffer-or-region~
for inspiration. (Note that REPL buffers do not need to be shown in order to
receive text from ~my/send-region~.)

** gist [0/0] :ARCHIVE:
** kubernetes [1/1] :eeowaa:
#+begin_quote
This custom module provides features for editing YAML-formatted Kubernetes
manifests and Helm charts.
#+end_quote

*** DONE [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/Kubernetes` module

## Helm language server
curl -L https://github.com/mrjosh/helm-ls/releases/download/master/helm_ls_linux_amd64 \
    --output ~/.local/bin/helm_ls

## Install Cask
if [ -d ~/.local/opt/cask ]
then
    git -C ~/.local/opt/cask pull
else
    mkdir -p ~/.local/opt
    git clone https://github.com/cask/cask ~/.local/opt/cask
    ln -s ~/.local/opt/cask/bin/cask ~/.local/bin
fi

## Install NodeJS
## (should already be installed)

## Install and use the correct version of the tree-sitter CLI
npm -g install tree-sitter-cli@0.19.3
for ts in `which -a tree-sitter | sort -u`
do
    case `$ts --version` in
    tree-sitter\ 0.19.3*)
        export PATH=${ts%/*}:$PATH
        break ;;
    esac
done

## Obtain elisp-tree-sitter source code in its own directory
[ -d ~/.local/src/emacs/tree-sitter-langs ] || {
    mkdir -p ~/.local/src/emacs
    git clone https://github.com/emacs-tree-sitter/tree-sitter-langs \
        ~/.local/src/emacs/tree-sitter-langs
}

## Build and install the tree-sitter grammar for Go templates
(
    # Install dependencies for tree-sitter-langs
    cd ~/.local/src/emacs/tree-sitter-langs
    cask install

    # Register a submodule for tree-sitter-go-template
    git submodule add -b master -- \
        https://github.com/ngalaiko/tree-sitter-go-template repos/gotmpl
    ed .gitmodules <<\EOF
/\[submodule "repos\/gotmpl"]/a
	update = none
	ignore = dirty
.
wq
EOF

    # Copy the highlights file into place (for internal consistency)
    mkdir -p queries/gotmpl
    cp repos/gotmpl/queries/highlights.scm queries/gotmpl

    # Build the grammar for Go templates
    script/compile gotmpl

    # Install the shared object into place
    mkdir -p ~/.tree-sitter/bin
    cp bin/gotmpl.so ~/.tree-sitter/bin

    # Install the highlights file into place
    mkdir -p ~/.tree-sitter/queries/gotmpl
    cp queries/gotmpl/highlights.scm ~/.tree-sitter/queries/gotmpl
)
#+end_src

** lookup [8/11]
*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/lookup` module
brew install ripgrep sqlite3
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/lookup` module
sudo dnf -y install ripgrep sqlite-3 wordnet
#+end_src

*** DONE [#A] Fix ~+lookup-project-search-backend-fn~ :bug:hack:
#+begin_src emacs-lisp :tangle yes
(defadvice! my/+lookup-project-search-backend-fn-a (identifier)
  :override #'+lookup-project-search-backend-fn
  (when identifier ;; Replaced `unless' with `when'
    (let ((query (rxt-quote-pcre identifier)))
      (ignore-errors
        (cond ((modulep! :completion ivy)
               (+ivy-file-search :query query)
               t)
              ((modulep! :completion helm)
               (+helm-file-search :query query)
               t)
              ((modulep! :completion vertico)
               (+vertico-file-search :query query)
               t))))))
#+end_src

*** DONE [#A] Prefer online dictionaries when available :feat:
#+begin_src emacs-lisp :tangle yes
(defvar my/lookup-dictionary-prefer-offline nil)
(defadvice! my/lookup-dictionary-prefer-online-a (fn &rest args)
  :around '(+lookup/dictionary-definition +lookup/synonyms)
  (let ((+lookup-dictionary-prefer-offline
         (or my/lookup-dictionary-prefer-offline
             (not (eeowaa-onlinep)))))
    (apply fn args)))
#+end_src

*** DONE [#B] Truncate eldoc messages to fit in a single minibuffer line :tweak:
#+begin_src emacs-lisp :tangle yes
(setq eldoc-echo-area-use-multiline-p nil
      eldoc-echo-area-display-truncation-message nil)
#+end_src

*** DONE [#B] Do not automatically select documentation windows :tweak:
#+begin_src emacs-lisp :tangle yes
(defvar my/select-doc-modes '(emacs-lisp-mode helpful-mode)
  "Modes where `+lookup/documentation' should pop to the doc buffer.")

(defadvice! my/display-doc-buffer-a (fn &rest args)
  "Display the documentation buffer without selecting it."
  :around #'+lookup/documentation
  (if (memq major-mode my/select-doc-modes)
      (apply fn args)
    (letf! ((#'pop-to-buffer #'display-buffer))
      (let (help-window-select)
        (apply fn args)))))
#+end_src

*** DONE [#B] Use completing-read for =dumb-jump= backend :tweak:bug:
The last function called by ~+lookup/definition~ if all else fails is
~+lookup-dumb-jump-backend-fn~, which uses =dumb-jump= to find a selection. By
default, this will open a popup menu via ~popup-menu*~, which looks pretty awful
in a GUI and currently sets the current frame's ~tab-bar-lines~ parameter to 0!
Completing read is a better alternative:

#+begin_src emacs-lisp :tangle yes
(after! dumb-jump
  (setq dumb-jump-selector 'completing-read))
#+end_src

*** DONE [#B] Fix offline word lookup :bug:hack:
On my machine, =wn= (the WordNet CLI) segfaults whenever it looks up adverbs.
Any option ending with "r" (e.g. ~-synsr~) will cause a lookup of adverbs, so I
must ensure that never happens.

#+begin_src emacs-lisp :tangle yes
(after! synosaurus-wordnet
  (setq synosaurus-wordnet--options '("-synsv" "-synsn" "-synsa")))

(after! wordnut
  ;; HACK This modifies a `defconst'
  (setq wordnut-cmd-options
        (seq-remove (lambda (s) (string-match-p "r\\'" s))
                    wordnut-cmd-options)))
#+end_src

*** DONE [#B] Enable folding in =wordnut= buffers :feat:
=wordnut= buffers should use ~outline-minor-mode~ because they use that very
structure. I'm surprised they don't already:

#+begin_src emacs-lisp :tangle yes
(add-hook 'wordnut-mode-hook #'outline-minor-mode)
#+end_src

*** LOOP [#A] Fix the error "Given parent class xref-location is not a class" :bug:
Upon [[https://github.com/hlissner/doom-emacs/issues/5658#issuecomment-946207769][Henrick's advice]], I've pinned =xref= to the last known working commit. This
is currently only a problem on Emacs 28.

#+begin_src emacs-lisp :tangle packages.el
(when EMACS28+
  (package! xref :pin "a82f459b37b31546bf274388baf8aca79e9c30d9"))
#+end_src

*** STRT [#A] Automatically install missing docsets :feat:
For whatever reason, this is not working (does not get called upon entering a
mode derived from ~prog-mode~, even though ~prog-mode-hook~ does get updated).

*UPDATE*: Integration with [[https://zealdocs.org/][Zeal]] makes it easy to install and update docsets
manually. I have decided to go this route.

#+begin_src emacs-lisp :tangle no
(when (modulep! :tools lookup +docsets)
  (defun my/ensure-docsets ()
    (dolist (docset dash-docs-docsets)
      (dash-docs-ensure-docset-installed (string-replace " " "_" docset))))
  ;; REVIEW Ensure that `set-docsets!' is only called for modes derived from `prog-mode'
  (add-hook! prog-mode #'my/ensure-docsets))
#+end_src

*** STRT [#B] Use Zeal's Dash.app docsets when available :tweak:
[[https://zealdocs.org/][Zeal]] is a nice GUI app for installing and browsing Dash.app docsets. I find it
easier to use than the default mechanisms provided by Doom.

#+begin_src emacs-lisp :tangle yes
(after! dash-docs
  (when (modulep! :tools lookup +docsets)
    (let ((zeal-docsets
           (concat (file-name-as-directory (getenv "XDG_DATA_HOME"))
                   "Zeal/Zeal/docsets/")))
      (when (file-accessible-directory-p zeal-docsets)
        (setq dash-docs-docsets-path zeal-docsets)))))
#+end_src

Ideally, I would just use Doom-specific mechanisms for this, but I've found that
it doesn't want to install user-contributed docsets. References:

+ ~dash-docs-docsets-path~
  - =~/.config/emacs/.local/etc/docsets/=
+ ~dash-docs-docsets-url~
  - https://github.com/kapeli/feeds
+ ~dash-docs-install-user-docset~
  - https://github.com/roberth-k/dash-docset-terraform

** lsp [3/12]
*** COMMENT Documentation
+ [[doom-modules:tools/lsp/README.org][tools/lsp module documentation]]
+ [[doom:.local/straight/repos/lsp-mode/README.md][lsp-mode package README]]
+ [[doom:.local/straight/repos/lsp-mode/docs/page][lsp-mode package documentation]]
  - [[doom:.local/straight/repos/lsp-mode/docs/page/performance.md][performance.md]]
  - [[doom:.local/straight/repos/lsp-mode/docs/page/troubleshooting.md][troubleshooting.md]]

*** DONE [#A] Unpin package :hack:
Today (12/23/2022), there are three reasons why I want to unpin =lsp-mode=:

1. Updated =eldoc= support (for [[*Truncate eldoc messages to fit in a single minibuffer line][this item]])
2. Native =jsonrpc= support (for performance improvements)

This is a fairly risky operation, but let's see how it goes.

#+begin_src emacs-lisp :tangle packages.el
;; If this causes issues, try `(unpin! (:tools lsp))' instead
(unpin! lsp-mode)
#+end_src

*** DONE [#B] Enable documentation popups upon mouseover :tweak:
This is also possible via =SPC c l h g= (~lsp-ui-doc-glance~).

#+begin_src emacs-lisp :tangle yes
(after! lsp-ui
  (setq lsp-ui-doc-show-with-mouse t
        lsp-ui-doc-delay 0.5))
#+end_src

*** DONE [#B] Display symbols in a right side window :tweak:
#+begin_src emacs-lisp :tangle yes
(after! (:and treemacs lsp-ui-imenu)
  (setq lsp-ui-imenu-buffer-position 'right
        lsp-ui-imenu-window-width treemacs-width
        lsp-treemacs-symbols-position-params
        `((side . right)
          (slot . 0)
          (window-width . ,treemacs-width))))
#+end_src

*** STRT [#B] Add alternate bindings for some LSP commands :tweak:
Each LSP command requires 4 keystrokes to execute (=SPC c l <prefix> <cmd>=),
which is fine for infrequently-used commands such as toggles, but unacceptable
for commands that I want to use frequently while reading or editing code. Doom
already provides alternate mappings for some commands, but not everything.

#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("c" . "code")
       :desc "Glance documentation" "g" #'lsp-ui-doc-glance
       :desc "UI sideline symbols"  "u" #'lsp-ui-sideline-toggle-symbols-info))
#+end_src

*** STRT [#B] Sync the timing of display updates :tweak:
- Eldoc (~eldoc-idle-delay~)
- Sideline (~lsp-ui-sideline-delay~)
- Doc glance (~lsp-ui-doc-delay~)
- Breadcrumbs (???)

#+begin_src emacs-lisp :tangle yes
;; TODO Convert to `defcustom' with a setter
(defvar my/lsp-ui-delay 0.5
  "Number of seconds before refreshing LSP UI elements.
This variable should be set by `my/lsp-ui-set-delay'.")

(defvar my/lsp-ui-delay-vars
  '(eldoc-idle-delay
    lsp-ui-sideline-delay
    lsp-ui-doc-delay)
  "Variables holding delay durations for LSP UI elements.")

(defun my/lsp-ui-set-delay (delay)
  "Set the delay for LSP UI elements."
  (interactive "nDelay in seconds: ")
  (setq my/lsp-ui-delay delay)
  (dolist (var my/lsp-ui-delay-vars)
    (set var my/lsp-ui-delay)))

(my/lsp-ui-set-delay my/lsp-ui-delay)
#+end_src

*** TODO [#B] Shrink the LSP help window to its content size :tweak:
The help window is invoked with =K= (~+lookup/documentation~). *UPDATE*: This
was working well before, but I have since replaced =:ui popup= with my custom
=:ui buffer-group= module. I need to refactor the following code to work with
that instead.

#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (when (modulep! :ui popup)
    (setq +popup--display-buffer-alist
          (delq (assoc "^\\*lsp-\\(help\\|install\\)" +popup--display-buffer-alist)
                +popup--display-buffer-alist))
    (set-popup-rule! "^\\*lsp-\\(help\\|install\\)"
      :size #'+popup-shrink-to-fit
      :select nil ;; NOTE I changed this from Doom's default of `t'
      :quit t)))
#+end_src

*** LOOP [#B] Automatically restart the LSP server when it crashes :tweak:
This can result in infinite loops, so I've disabled it for now:

#+begin_src emacs-lisp :tangle no
(after! lsp-mode
  (setq lsp-restart 'auto-restart))
#+end_src

*** LOOP [#B] Provide better integration with lsp-ui-imenu :feat:
+ ~lsp-ui-imenu~ provides a smoother and more aesthetically-pleasing experience
  compared to ~imenu-list~, but there are currently no keybindings to open it.
  - Essentially, I need to map ~lsp-ui-imenu~ to an LSP prefix map
    + =SPC c l T i= would be good for a toggle, but ~lsp-ui-imenu~ by itself
      does not toggle the window.
    + Reference ~imenu-list-minor-mode~ to see how it toggles its window.
+ https://emacs-lsp.github.io/lsp-ui/#lsp-ui-imenu

For now, I am just going to assign ~lsp-ui-imenu~ to Doom's toggle map (having a
hard time figuring out how to assign to the LSP prefix map). It is not really a
toggle (it just refreshes), but it is nice to have a keybinding.

#+begin_src emacs-lisp :tangle yes
(define-key! doom-leader-toggle-map
  "i" #'lsp-ui-imenu)

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`%s t i\\'" prefix-re)) nil . "LSP Imenu")
                which-key-replacement-alist)))
#+end_src

*** LOOP [#B] Look into LSP performance improvements :tweak:
Resources:
+ [[help:lsp-doctor][lsp-doctor]]
+ [[doom:.local/straight/repos/lsp-mode/docs/page/performance.md][performance.md]]

**** TODO Configure file watchers
https://emacs-lsp.github.io/lsp-mode/page/file-watchers/

**** LOOP Enable plist-based JSON deserialization
From =performance.md=:

#+begin_quote
1. Configure the following env variable. Make sure that Emacs can see that
   variable (best way to do that is to start Emacs from the shell, not from
   the icon).
   : export LSP_USE_PLISTS=true
2. Delete ~lsp-mode~ related packages.
3. Make sure that ~lsp-use-plists~ is non-nil.
4. Restart Emacs and install again ~lsp-mode~ related packages.
#+end_quote

For whatever reason, after doing all of the above, sometimes hash tables are
expected and I get messages like this:

#+begin_quote
Wrong type argument: hash-table-p
#+end_quote

Until I get things figured out, I am going to continue to use hash tables.

#+begin_src emacs-lisp :tangle no
(setq lsp-use-plists t)
#+end_src

*** TODO [#B] Disable =lsp-lens= by default :tweak:
#+begin_src emacs-lisp :tangle yes
(setq lsp-lens-enable nil)
#+end_src

*** DONE [#C] Scale down text of LSP UI Imenu windows :tweak:
#+begin_src emacs-lisp :tangle yes
(setq my/lsp-ui-imenu-text-scale -1)
(after! lsp-ui-imenu
  (defun my/lsp-ui-imenu-text-scale-h ()
    (text-scale-increase my/lsp-ui-imenu-text-scale))
  (add-hook 'lsp-ui-imenu-mode-hook #'my/lsp-ui-imenu-text-scale-h))
#+end_src

*** LOOP [#C] Do not display code actions in the modeline :bug:
The main reason why I want to disable this feature is because with
~tab-bar-mode~ enabled, the code actions are displayed in the tab bar, which I
do not like. Also, the right-aligned contents of the tab bar can sometimes wrap
to a new line when LSP code actions are displayed there, too. I could probably
fix these things, but I do not see much benefit in doing so. Reference:
https://emacs-lsp.github.io/lsp-mode/page/main-features/#code-actions-on-modeline

#+begin_src emacs-lisp :tangle yes
(setq lsp-modeline-code-actions-segments nil)
#+end_src

** magit [3/6]
*** STRT [#A] Install prerequisites :feat:
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/magit` module
(cd ~/Documents/src/life/stow-dotfiles && make perl)
brew install perl git-absorb
cpan install App::Git::Autofixup
#+end_src

**** STRT Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/magit` module
(cd ~/Documents/src/life/stow-dotfiles && make perl)
sudo dnf -y install perl
# TODO: Find equivalent to git-absorb
# TODO: Fix cpan install command
cpan install App::Git::Autofixup
#+end_src

*** DONE [#A] Pin packages for compatibility :bug:hack:
- https://www.reddit.com/r/emacs/comments/1118o25/doom_emacs_error_running_hook_globalgitcommitmode/
- https://github.com/magit/with-editor/commit/59867aebe16454be4d8c0c858f3b00b8a34f3f61

#+begin_src emacs-lisp :tangle packages.el
(package! transient :pin "c2bdf7e12c530eb85476d3aef317eb2941ab9440")
(package! with-editor :pin "bbc60f68ac190f02da8a100b6fb67cf1c27c53ab")
#+end_src

*** DONE [#C] Configure list of repositories :tweak:
#+begin_src emacs-lisp :tangle yes
(setq magit-repository-directories
      '(("~/Documents/src" . 2)
        ("~/Documents/ref" . 1)))
#+end_src

*** OKAY [#C] Add keybindings :feat:
#+begin_src emacs-lisp :tangle yes
(map! (:after evil-collection-magit
       (:map magit-status-mode-map
        :nv "C-t" nil ;; open this up for `vimish-tab'
        :nv "gz" #'magit-jump-to-stashes)))
#+end_src

*** TODO [#B] Add support for Azure DevOps :feat:
- [ ] Define a ~forge-azure-repository~ class (reference =forge-bitbucket=)
- [ ] Install and configure the =git-link= package, which supports ADO

*** TODO [#C] Restore window config after aborting a commit :bug:
Upon running =C-c C-k= in a commit buffer, the =magit-diff= side window does not
close, even if the side window was popped up during the commit sequence.

** make [4/4]
*** DONE [#A] Search for =GNUmakefile= files :hack:bug:
Both =makefile-executor= and =:tools make= only look for files named "Makefile"
and "makefile" (in that order). However, this is not how GNU Make goes about
searching for makefiles. Quoting from the [[info:make#Makefile Names][GNU Make manual]]:

#+begin_quote
By default, when 'make' looks for the makefile, it tries the following
names, in order: 'GNUmakefile', 'makefile' and 'Makefile'.
#+end_quote

Rather than hard-code what I personally want, I'll implement a configurable
solution that will be easier to PR:

#+begin_src emacs-lisp :tangle yes
(defvar my/makefile-search-list '("GNUmakefile" "makefile" "Makefile")
  "List of makefile names to sequentially search for.")

(defadvice! my/+make/run-a ()
  :override #'+make/run
  (interactive)
  (if (doom-project-p)
      (makefile-executor-execute-project-target)
    (let ((makefile (cl-loop with buffer-file = (or buffer-file-name default-directory)
                             for file in my/makefile-search-list
                             if (locate-dominating-file buffer-file file)
                             return file)))
      (unless makefile
        (user-error "Cannot find a makefile in the current project"))
      (let ((default-directory (file-name-directory makefile)))
        (makefile-executor-execute-target makefile)))))

(after! makefile-executor
  (defadvice! my/makefile-executor--initial-input-a (files)
    :override #'makefile-executor--initial-input
    (let* ((bn (or (buffer-file-name) default-directory))
           ;; NOTE `makefile-executor' requires `dash', but not `cl-lib'
           (fn (-first (lambda (m) (locate-dominating-file bn m))
                        my/makefile-search-list))
           (relpath (file-relative-name fn (projectile-project-root))))
      (if (not (s-equals? relpath "./"))
          relpath
        ""))))
#+end_src

*** DONE [#A] Do not allow ~include~ statements to break target listing :hack:bug:
According to [[https://stackoverflow.com/a/26339924][this StackOverflow post]], an ~include~ statement in a makefile will
break the carefully-crafted rule used by =makefile-executor= to list targets. We
can fix that via the following modifications:

1. Insert ~THIS_FILE := $(lastword $(MAKEFILE_LIST))~ at the top of the file.
2. Replace ~-f $(lastword $(MAKEFILE_LIST))~ with ~-f $(THIS_FILE)~.

(We might as well move the special rule to the top of the file, as well,
although that shouldn't have any effect beyond keeping our special constructs
grouped together.)

Beyond that, a couple of bugs in the recommended rule have been found and fixed
in recent edits to that StackOverflow post (namely setting ~LC_ALL~ and
modifying the ~awk~ regexps):

#+begin_src diff
- @$(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$'
+ @LC_ALL=C $(MAKE) -pRrq -f $(lastword $(MAKEFILE_LIST)) : 2>/dev/null | awk -v RS= -F: '/(^|\n)# Files(\n|$$)/,/(^|\n)# Finished Make data base/ {if ($$1 !~ "^[#.]") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$'
#+end_src

Let's fix things:

#+begin_src emacs-lisp :tangle yes
(after! makefile-executor
  (defvar my/makefile-executor-file-variable "EMACS__MAKEFILE__FILE")
  (setq makefile-executor-list-target-code
        (format "%s := $(lastword $(MAKEFILE_LIST))\n.PHONY: %s\n%s:\n	@LC_ALL=C $(MAKE) -pRrq -f $(%s) : 2>/dev/null | awk -v RS= -F: '/(^|\\n)# Files(\\n|$$)/,/(^|\\n)# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | sort | egrep -v -e '^[^[:alnum:]]' -e '^$@$$'\n"
                my/makefile-executor-file-variable makefile-executor-special-target makefile-executor-special-target my/makefile-executor-file-variable))
  (defadvice! my/makefile-executor-get-targets-a (filename)
    :override #'makefile-executor-get-targets
    (let* ((file (make-temp-file "makefile"))
           (makefile-contents
            (concat
             makefile-executor-list-target-code "\n"
             (with-temp-buffer
               (insert-file-contents filename)
               (buffer-string)))))
      (f-write-text makefile-contents 'utf-8 file)
      (let ((out (shell-command-to-string
                  (format "make -f %s %s"
                          (shell-quote-argument file)
                          makefile-executor-special-target))))
        (delete-file file)
        (s-split "\n" out t)))))
#+end_src

*** DONE [#A] Allow selection of Makefiles not seen by =projectile= :bug:
~makefile-executor-execute-project-target~ requires an exact match when
selecting a Makefile among the candidate list returned by
~makefile-executor-get-makefiles~; the candidate list is constructed by
~projectile-current-project-files~, which might not include Makefiles generated
by Automake, CMake, etc.

#+begin_src emacs-lisp :tangle yes
(after! makefile-executor
  (defadvice! my/with-completing-read-lenient-a (fn &rest args)
    :around #'makefile-executor-execute-project-target
    (letf! (defadvice my/completing-read-lenient-a (args)
             :filter-args #'completing-read
             (setf (nth 3 args) nil)
             args)
      (apply fn args))))
#+end_src

*** DONE [#B] Bind ~+make/run~ to a key :feat:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:prefix-map ("c" . "code")
       :desc "Make target"      "m" #'+make/run
       :desc "Make last target" "M" #'+make/run-last))
#+end_src

** nginx [1/1] :eeowaa:
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/nginx` module
pipx install --python `which python3.10` nginx-language-server
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/nginx` module
pipx install --python `which python3.10` nginx-language-server
#+end_src

** pass [0/0] :ARCHIVE:
** pdf [1/1]
*** COMMENT Documentation
+ [[doom-modules:tools/pdf/README.org][tools/pdf module documentation]]
+ [[doom:.local/straight/repos/pdf-tools/README.org][pdf-tools package README]]

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/pdf` module
brew install pkg-config poppler automake
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/pdf` module
sudo dnf -y install pkgconf pkgconf-pkg-config poppler automake
#+end_src

** prodigy [0/0] :ARCHIVE:
** rfc [1/3] :eeowaa:module:
*** TODO Documentation
- Use ~rfc~ to browse for and read an IETF RFC.

*** DONE Packages
#+begin_src emacs-lisp :tangle packages.el
(package! rfc-mode)
#+end_src

*** STRT Configuration
- [X] Use an appropriate directory
- [X] Bind =evil= keys for ~rfc-mode-map~
- [X] Enhance the display and navigation of pages
- [X] Sort the completion candidates of ~rfc-mode-goto-section~ in order
- [ ] Automatically create the directory at the appropriate time

#+begin_src emacs-lisp :tangle yes
(use-package! rfc-mode
  :defer t
  :init
  (defalias 'rfc #'rfc-mode-browse)

  (defadvice! +rfc--goto-top-a ()
    :after #'rfc-mode-init
    (goto-char (point-min))
    (while (looking-at-p "^$")
      (forward-line))
    ;; HACK Avoid "rfc-mode-recenter: `recenter'ing a window that does not display current-buffer."
    ;; <https://emacs.stackexchange.com/questions/77226/recentering-a-window-that-does-not-display-current-buffer>
    ;; <https://lists.gnu.org/r/emacs-devel/2014-06/msg00094.html>
    (if (eq (window-buffer) (current-buffer))
        (rfc-mode-recenter)
      (add-transient-hook! 'window-buffer-change-functions
        (rfc-mode-recenter))))

  (defadvice! +rfc--maybe-recenter-a (&rest _)
    :after '(rfc-mode-backward-page rfc-mode-previous-section)
    (when (bobp)
      (while (looking-at-p "^$")
        (forward-line))
      (rfc-mode-recenter)))

  (when (modulep! :completion vertico)
    (defadvice! +rfc--no-sort-a (args)
      :filter-args #'rfc-mode-goto-section
      (interactive
       (lambda (spec)
         (let ((vertico-sort-override-function #'identity))
           (advice-eval-interactive-spec spec))))
      args))

  :config
  (setq rfc-mode-directory
        (concat doom-cache-dir "rfc"))

  (add-hook 'rfc-mode-hook #'read-only-mode)
  (when (fboundp 'page-break-lines-mode)
    (add-hook 'rfc-mode-hook #'page-break-lines-mode))

  (map! :map rfc-mode-map
        :n "gm" #'rfc-mode-browse
        :n "[" #'rfc-mode-backward-page
        :n "]" #'rfc-mode-forward-page
        :n "C-k" #'rfc-mode-previous-section
        :n "C-j" #'rfc-mode-next-section
        :n "C-i" #'forward-button
        :n "C-M-i" #'backward-button
        (:localleader
         :n "." #'rfc-mode-goto-section)))
#+end_src

** rgb [0/0] :ARCHIVE:
** taskrunner [0/0] :ARCHIVE:
** terraform [4/6]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/terraform` module
brew install terraform hashicorp/tap/terraform-ls
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/terraform` module
sudo dnf -y install terraform terraform-ls
#+end_src

*** DONE [#B] Configure LSP :feat:tweak:
+ [[doom:.local/straight/repos/lsp-mode/docs/manual-language-docs/lsp-terraform-ls.md][lsp-terraform-ls.md]]
+ Need to verify that this all works as intended
+ Probably have more to go to bring LSP up to par with Doom modules having
  official LSP support

#+begin_src emacs-lisp :tangle yes
;; <https://emacs-lsp.github.io/lsp-mode/page/lsp-terraform-ls/>
(when (modulep! :tools terraform +lsp)
  (setq
    ;; Use the official Hashicorp language server from Hashicorp
    lsp-disabled-clients '(tfls)

    ;; Enable reference counts
    lsp-terraform-ls-enable-show-reference t)

  ;; Set keybindings for LSP (reference existing LSP configurations)
  (after! terraform-mode
    (map! :map terraform-mode-map
          :localleader
          (:prefix ("l" . "LSP")
           :desc "terraform init" "i" #'lsp-terraform-ls-init
           :desc "terraform validate" "v" #'lsp-terraform-ls-validate
           :desc "Providers widget" "p" #'lsp-terraform-ls-providers
           :desc "Module calls widget" "m" #'lsp-terraform-ls-module-calls))))
#+end_src

*** DONE [#B] Lookup references for resource block at point if LSP lookup fails :feat:
#+begin_src emacs-lisp :tangle yes
(after! terraform-mode
  (add-hook! terraform-mode :append
    (defun my/terraform-configure-lookup ()
      (defadvice! my/terraform-lookup-references-a (fn &rest args)
        :around #'+lookup/references
        (if (eq major-mode 'terraform-mode)
            (letf! (defadvice my/terraform-lookup-resource-at-point-a (args)
                     :filter-args #'+lookup-project-search-backend-fn
                     (list (my/terraform-resource-address-at-pos)))
              (apply fn args))
          (apply fn args))))))
#+end_src

*** DONE [#B] Add completion keywords for Terraform :feat:
#+begin_src emacs-lisp :tangle yes
(after! company-keywords
  (add-to-list
   'company-keywords-alist
   '(terraform-mode
     ;; Numeric functions
     "abs" "cell" "floor" "log" "max" "min" "parseint" "pow" "signum"

     ;; String functions
     "chomp" "endswith" "format" "formatlist" "indent" "join" "lower" "regex"
     "regexall" "replace" "split" "startswith" "strrev" "substr" "title" "trim"
     "trimprefix" "trimsuffix" "trimspace" "upper"

     ;; Collection functions
     "alltrue" "anytrue" "chunklist" "coalesce" "coalescelist" "compact" "concat"
     "contains" "distinct" "element" "flatten" "index" "keys" "length" "list"
     "lookup" "map" "matchkeys" "merge" "one" "range" "reverse" "setintersection"
     "setproduct" "setsubtract" "setunion" "slice" "sort" "sum" "transpose"
     "values" "zipmap"

     ;; Encoding functions
     "base64decode" "base64encode" "base64gzip" "csvdecode" "jsondecode"
     "jsonencode" "textdecodebase64" "textencodebase64" "urlencode" "yamldecode"
     "yamlencode"

     ;; Filesystem functions
     "abspath" "dirname" "pathexpand" "basename" "file" "fileexists" "fileset"
     "filebase64" "templatefile"

     ;; Date and Time functions
     "formatdate" "timeadd" "timecmp" "timestamp"

     ;; Hash and Crypto functions
     "base64sha256" "base64sha512" "bcrypt" "filebase64sha256" "filebase64sha512"
     "filemd5" "filesha1" "filesha256" "filesha512" "filemd5" "filesha1"
     "filesha256" "filesha512" "md5" "rsadecrypt" "sha1" "sha256" "sha512" "uuid"
     "uuidv5"

     ;; IP Network functions
     "cidrhost" "cidrnetmast" "cidrsubnet" "cidrsubnets"

     ;; Type Conversion functions
     "can" "nonsensitive" "sensitive" "tobool" "tolist" "tomap" "tonumber" "toset"
     "tostring" "try" "type")))
#+end_src

*** STRT [#B] Write functionality to display resource state as JSON :feat:
#+begin_src emacs-lisp :tangle yes
(after! terraform-mode
  (defgroup my/terraform nil
    "Extended functionality for Terraform."
    :group 'languages
    :prefix "my/terraform-")

  (defcustom my/terraform-executable (executable-find "terraform")
    "The `terraform' executable used by my private functions."
    :type '(file :must-match t)
    :group 'my/terraform)

  ;; NOTE I could just use Emac's built-in `json' library, but I would rather
  ;; use query syntax that I can also use outside of Emacs.
  (defcustom my/terraform-jq-executable (executable-find "jq")
    "The `jq' executable used to query Terraform state."
    :type '(file :must-match t)
    :group 'my/terraform)

  (defcustom my/terraform-state-buffer-name-format "*tfstate: %s*"
    "Buffer name format string for Terraform state query results.
Should include a single \"%s\" sequence to hold the resource address."
    :type 'string
    :group 'my/terraform)

  (defcustom my/terraform-state-file "terraform.tfstate"
    "The Terraform state file corresponding to the current buffer."
    :local t
    :type 'file
    :group 'my/terraform)

  (defun my/terraform--ensure-state-file ()
    "Ensure the existence of `my/terraform-state-file'.
Prompts the user to download the state file if missing. Once the
state file has been pulled, the expanded file name of the file is
returned if it exists, otherwise nil."
    (if (file-exists-p my/terraform-state-file)
        (expand-file-name my/terraform-state-file)
      (let ((read-answer-short t))
        (pcase
            (save-window-excursion
              (read-answer
               "Could not find Terraform state file. How to proceed? "
               `(("specify" ?s "specify a path to an existing state file")
                 ("pull" ?p ,(format "pull the state file to %s" my/terraform-state-file))
                 ("specify-and-pull" ?P "pull the state file to another path")
                 ("quit" ?q "abort operation"))))
          ("specify"
           (setq my/terraform-state-file (read-file-name "Terraform state file: " nil nil t)))
          ("pull"
           (my/terraform-state-pull))
          ("specify-and-pull"
           (setq my/terraform-state-file (read-file-name "Terraform state file: "))
           (my/terraform-state-pull))
          ("quit" nil)))
      (when (file-exists-p my/terraform-state-file)
        (expand-file-name my/terraform-state-file))))

  ;; TODO Pull state asynchronously via `make-process'
  (defun my/terraform-state-pull ()
    "Populate `my/terraform-state-file' with Terraform state."
    (interactive)
    (when (or (not (file-exists-p my/terraform-state-file))
              (yes-or-no-p (format "Overwrite existing file (%s)? " my/terraform-state-file)))
      (let* ((program my/terraform-executable)
             (args '("state" "pull"))
             (stdout (expand-file-name my/terraform-state-file))
             (stderr (make-temp-file "emacs-" nil ".stderr"))
             (exit-code nil)
             (success-msg (format "Pulled Terraform state to %s" stdout))
             (error-msg (format "Failed to pull Terraform state to %s" stdout))
             (warning-type 'my/terraform)
             (default-directory (or (projectile-project-root) default-directory)))
        (unless (with-temp-buffer
                  (when (zerop (setq exit-code
                                     (apply #'call-process program nil (list t stderr) nil args)))
                    (write-file stdout)
                    (message success-msg)))
          (with-temp-buffer
            (insert (format "%s
Command: %s
Directory: %s
Exit code: %d
Standard error \"" error-msg (string-join (cons program args) " ") default-directory exit-code))
            (insert-file-contents stderr)
            (goto-char (point-max))
            (insert "\"")
            (display-warning warning-type (buffer-string) :error)))
        (delete-file stderr))))

  ;; TODO Add support for outputs
  (defvar my/terraform--state-show-jq-filter "\
.resources |
map(select(
    .mode == $mode and
    .type == $type and
    .name == $name
)) |
if $modpath == \"\" then
    map(select(
        has(\"module\") | not
    ))[0]
    .instances |
    if (.[0] | has(\"index_key\")) then
        map({
            \"key\": .index_key,
            \"value\": .attributes
        }) |
        from_entries
    else
        .[0].attributes
    end
else
    map(
        select(
            has(\"module\") and
            (.module | gsub(\"\\\\[.+?]\"; \"\")) == $modpath
        ) |
        .module as $m |
        .instances |
        if (.[0] | has(\"index_key\")) then
            map({
                \"key\": ($m + \".\" + .index_key),
                \"value\": .attributes
            })[]
        else {
            \"key\": $m,
            \"value\": .[0].attributes
        } end
    ) |
    from_entries
end")

  (defun my/terraform--parse-address (address)
    "Return a list describing a Terraform resource ADDRESS.
The list has the form (MODULE-PATH MODE TYPE NAME), where
MODULE-PATH is the unkeyed module path, MODE is either `data' or
`managed', TYPE is the resource type, and NAME is the resource
name."
    (save-match-data
      (unless (string-match "\\`\\(?:\\(module\\..+\\)\\.\\)?\\(data\\.\\)?\\([^\\.]+\\)\\.\\([^\\.]+\\)\\'" address)
        (user-error "Unrecognized Terraform resource address: %s" address))
      (list (or (match-string-no-properties 1 address) "")
            (if (string= "data." (match-string-no-properties 2 address))
                "data" "managed")
            (match-string-no-properties 3 address)
            (match-string-no-properties 4 address))))

  (defun my/terraform-state-show (address)
    "Display JSON respresentation of Terraform resource at ADDRESS.
Terraform is assumed to be initialized in the default directory.
Always queries a local state file for performance reasons."
    (interactive
     (list (read-string
            "Resource address: "
            (when (region-active-p)
              (buffer-substring-no-properties (region-beginning) (region-end))))))
    (cl-destructuring-bind (module-path mode type name) (my/terraform--parse-address address)
      (let* ((state-file (or (my/terraform--ensure-state-file)
                             (user-error "File not found: %s"
                                         (expand-file-name my/terraform-state-file))))
             (buffer (get-buffer-create (format my/terraform-state-buffer-name-format
                                                address)))
             (jq-args `("--arg" "modpath" ,module-path
                        "--arg" "mode" ,mode
                        "--arg" "type" ,type
                        "--arg" "name" ,name
                        ,my/terraform--state-show-jq-filter)))
        (with-current-buffer buffer
          (erase-buffer)
          (json-mode))
        (when (apply #'call-process
                     my/terraform-jq-executable state-file buffer nil jq-args)
          (pop-to-buffer buffer)
          (goto-char (point-min))))))

  (defun my/terraform-state-show-at-pos (&optional pos)
    "Display JSON representation of Terraform resource at POS or point.
Both resource and data blocks are considered to be resources."
    (interactive)
    (my/terraform-state-show (my/terraform-resource-address-at-pos pos)))

  ;; FIXME: Make this portable for Windows and WSL
  (defun my/terraform-module-path-of-file (&optional file)
    "Display the Terraform module path of FILE.
FILE is an absolute or relative path to a filesystem entry. It
defaults to the file visited by the current buffer, or to
`default-directory' if the current buffer is not file-visiting."
    (let* ((file (expand-file-name (or file buffer-file-name default-directory)))
           (_ (or (file-exists-p file)
                  (user-error "File does not exist: %s" file)))
           (dir (directory-file-name (or (and (file-directory-p file) file)
                                         (file-name-directory file))))
           (root (or (projectile-project-root dir)
                     (user-error "Unable to determine root path for file: %s" file)))
           (path (file-relative-name dir root)))
      (if (string= path ".") ""
        (substring (string-replace "/" ".module." (concat "/" path)) 1))))

  ;; FIXME Handle unquoted resource types and names
  (defun my/terraform-resource-address-at-pos (&optional pos)
    "Return the address of the Terraform resource at POS or point.
Both resource and data blocks are considered to be resources,
though addresses of data blocks are prefixed with \"data.\" while
addresses of resource blocks have no prefix."
    (save-excursion
      (when pos (goto-char pos))
      (goto-char (bol))
      (save-match-data
        (if-let ((re "^\\s-*\\(data\\|resource\\)[ \\t]+\"\\([^\"]+\\)\"[ \\t]+\"\\([^\"]+\\)\"")
                 (found (or (looking-at re) (re-search-backward re nil t)))
                 (mode (match-string-no-properties 1))
                 (type (match-string-no-properties 2))
                 (name (match-string-no-properties 3))
                 (data-prefix (if (string= mode "data") "data." ""))
                 (module-path (my/terraform-module-path-of-file))
                 (module-path-prefix (if (string= module-path "") "" (concat module-path "."))))
            (concat module-path-prefix data-prefix type "." name)
          (user-error "No Terraform resource at position")))))

  (when (modulep! :ui buffer-group)
    (buffer-group-reuse-window-setup
     (buffer-group-define tfstate
       `(:names ("^\\*tfstate: ")))))

  (map! :map terraform-mode-map
            :localleader
            (:prefix ("s" . "state")
             :desc "Show instances at point" "." #'my/terraform-state-show-at-pos
             :desc "Show instances of address" "a" #'my/terraform-state-show
             :desc "Pull remote state" "p" #'my/terraform-state-pull)))
#+end_src

*** STRT [#B] Write functionality to evaluate a region in ~terraform console~ :feat:
#+begin_src emacs-lisp :tangle yes
(after! terraform-mode
  (defvar my/terraform-shell "/bin/sh")
  (defvar my/terraform-hcl-single-line-command "\
sed -e 's/^ *//' \\
    -e 's/ *#.*//' \\
    -e 's/\\([^[{ ]\\) *,\\{0,1\\} *$/\\1,/' \\
    -e '$s/,$//' |
tr '\\n' ' ' |
sed -e 's/ $/\\n/'"
    "Shell command used to transform HCL to a single line.")

  (defvar my/terraform-hcl-single-line-buffer "*HCL Single Line*"
    "Buffer containing a backtrace of generated single-line HCL.")

  (defun my/terraform-hcl-single-line (beg end &optional show-message)
    "Return a single-line string corresponding to a region of HCL.
Pass the resulting string to terraform console.

With optional SHOW-MESSAGE, outputs the resulting string to the
echo area, truncating to a single line.

This function always appends the resulting string to the buffer
`my/terraform-hcl-single-line-buffer', which can be used in
debugging issues with the transformation command
`my/terraform-hcl-single-line-command'."
    (interactive "r")
    (let ((hcl (my/region-string beg end))
          (buffer (get-buffer-create my/terraform-hcl-single-line-buffer))
          result)
      (with-current-buffer buffer
        (hcl-mode)
        (goto-char (point-max))
        (let ((start (point-marker)))
          (insert hcl)
          (call-process-region start (point) my/terraform-shell t t nil
                               "-c" my/terraform-hcl-single-line-command)
          (newline)
          (setq result (buffer-substring-no-properties start (point-max)))))
      (when show-message
        (let ((truncate-partial-width-windows t)
              ;; FIXME: The echo area still consumes multiple lines, even though
              ;; the message gets truncated to a single line (there are blanks
              ;; lines shown below the message).
              (message-truncate-lines t)
              (max-mini-window-height 1)
              (resize-mini-windows t))
          (message result)))
      result))

  (defun my/terraform-console-kill-ring-save (beg end)
    "Save region of HCL to be evaluated in terraform console.
Uses `my/terraform-hcl-single-line' to transform the HCL code to
a single line."
    (interactive "r")
    (kill-new (my/terraform-hcl-single-line beg end))
    (message "Single-line HCL yanked to kill-ring"))

  (map! :map terraform-mode-map
            :localleader
            (:prefix ("c" . "console")
             :desc "Yank single-line HCL" "y" #'my/terraform-console-kill-ring-save)))
#+end_src

** tmux [0/0] :ARCHIVE:
** tree-sitter [4/5]
*** DONE [#A] Unpin =tree-sitter-langs= :feat:
Unfortunately, the font-locking provided by =yaml-mode= does not properly
fontify multiline quoted strings within string literals. My hope is that
=tree-sitter= will provided more accurate syntax highlighting for YAML.

Doom currently uses an old version of =tree-sitter-langs= without support for
YAML, so I am going to unpin that package for now.

#+begin_src emacs-lisp :tangle packages.el
(unpin! tree-sitter-langs)
#+end_src

*** DONE [#A] Add tree-sitter syntax highlighting to terraform :feat:
Although there is no ~+tree-sitter~ flag for =:tools treesitter=, there is
support for HCL syntax [[https://github.com/emacs-tree-sitter/tree-sitter-langs/tree/master/repos][parsing]] and [[https://github.com/emacs-tree-sitter/tree-sitter-langs/tree/master/queries][highlighting]], so Terraform should use this.
Also, ~tree-sitter-major-mode-language-alist~ already ~terraform-mode~ to ~hcl~
syntax, so setup should be pretty easy. Refer to how other modules handle the
~+tree-sitter~ flag to implement this yourself.

#+begin_src emacs-lisp :tangle yes
(add-hook 'terraform-mode-local-vars-hook #'tree-sitter! 'append)

;; Missing from evil-textobj-tree-sitter.el:
(after! evil-textobj-tree-sitter
  (pushnew! evil-textobj-tree-sitter-major-mode-language-alist '(terraform-mode . "hcl")))
#+end_src

*** DONE [#A] Do not use =ts-fold= for modes without a parser :bug:
There is a comment above the current definition of ~+fold--ts-fold-p~ that says
"does this need more?", and the answer is "yes":

#+begin_src emacs-lisp :tangle yes
(defadvice! my/fold--ts-fold-p-a ()
  "Check for tree-sitter-based folding in the current major mode."
  :after-while #'+fold--ts-fold-p
  (assq major-mode ts-fold-range-alist))
#+end_src

*** DONE [#C] Write test function for obtaining fold summaries :module:
#+begin_src emacs-lisp :tangle yes
(after! ts-fold
  (defun my/ts-fold-summary-test (&optional summary-parser)
    "Extract summary text for tree-sitter fold at point.
SUMMARY-PARSER is a function such as one defined in
`ts-fold-summary-parsers-alist'. IF SUMMARY-PARSER is omitted, it
defaults to the one returned by `ts-fold-summary--parser'.

See also: `ts-fold-summary--get'."
    (interactive)
    (let* ((parser (or summary-parser (cdr (ts-fold-summary--parser))))
           (node (ts-fold--foldable-node-at-pos))
           (range (ts-fold--get-fold-range node))
           (beg (car range))
           (end (cdr range)))
      (message (funcall parser (buffer-substring beg end))))))
#+end_src

*** STRT [#B] Disable LSP semantic highlighting when tree-sitter is available :tweak:
For now, what I do is just manually run =M-x lsp-semantic-tokens-mode= in a
buffer when I want to disable LSP semantic highlighting in that buffer (for
example, in ~terraform-mode~ buffers).

As a temporary workaround, since most LSP-supported languages that I use also
support Tree-Sitter, I will just globally disable LSP semantic tokens:

#+begin_src emacs-lisp :tangle yes
(setq lsp-semantic-tokens-enable nil)
#+end_src

** upload [0/0] :ARCHIVE:
** x509 [1/3] :eeowaa:module:
*** TODO Documentation
See upstream documentation: https://github.com/jobbflykt/x509-mode

*** DONE Packages
#+begin_src emacs-lisp :tangle packages.el
(package! x509-mode)
#+end_src

*** TODO Configuration
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.cnf\\'" . conf-mode))

(use-package! x509-mode
  :defer t
  :init
  (add-to-list 'auto-mode-alist
               '("\\.\\(?:pem\\|der\\|key\\|crt\\|cer\\|crl\\)\\'" . x509-mode))
  :config
  (map! :map x509-mode-map
        :n "e" #'x509--edit-params
        :n "q" #'x509-mode--kill-buffer
        :n "t" #'x509--toggle-mode)

  (map! :map x509-asn1-mode-map
        :n "d" #'x509--asn1-offset-down
        :n "e" #'x509--edit-params
        :n "q" #'x509-mode--kill-buffer
        :n "s" #'x509--asn1-strparse
        :n "t" #'x509--toggle-mode
        :n "u" #'x509--asn1-offset-up
        :n "x" #'x509-asn1-toggle-hexl))
#+end_src

* :os
#+begin_quote
Modules to improve integration into your OS, system, or devices.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :os
#+end_src

** Miscellany [0/1]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** TODO Eliminate display bugs on Wayland :bug:
The ~inhibit-double-buffering~ frame parameter might need to be set on Wayland.
See also:

- ~default-frame-alist~
- ~posframe-inhibit-double-buffering~
- ~(string= "wayland" (getenv "XDG_SESSION_TYPE"))~

** macos [2/2]
*** DONE [#A] Remap keys for macOS :tweak:
#+begin_src emacs-lisp :tangle yes
(when IS-MAC
  (setq ;; Comfortable keys that work most of the time
        mac-command-modifier 'control
        mac-right-command-modifier 'meta

        ;; Workaround for when system keybindings take precedence
        mac-control-modifier 'control
        mac-right-control-modifier 'meta

        ;; For exotic mappings
        mac-option-modifier 'super
        mac-right-option-modifier 'hyper))
#+end_src

*** DONE [#B] Experiment with Keychain as a member of ~auth-sources~ :doc:
The following example applies to =forge=, but works the same way with other
Emacs facilities.

#+CAPTION: Command to create Keychain entry
#+begin_src sh :tangle no
security add-internet-password -U \
    -s 'api.github.com' \
    -D 'Internet password' \
    -a 'eeowaa^forge' \
    -r 'htps' \
    -w '********' \
    "$HOME/Library/Keychains/login.keychain-db"
#+end_src

#+RESULTS:

#+CAPTION: Entry as viewed in "Keychain Access" app
| Field    | Value                  |
|----------+------------------------|
| Name     | api.github.com         |
| Type     | Internet password      |
| Account  | eeowaa^forge           |
| Where    | https://api.github.com |
| Password | ********               |

#+CAPTION: Elisp to retrieve the password
#+begin_src emacs-lisp :tangle no
(auth-source-pick-first-password
 :host "api.github.com"
 :user "eeowaa^forge")
#+end_src

See also:
+ ~auth-source-search~ (details the argument spec for ~:host~, ~:user~, etc.)
+ ~auth-sources~ (specifies a list of backing secret stores)

** tty [0/0] :ARCHIVE:
* :lang
#+begin_quote
Modules that bring support for a language or group of languages to Emacs.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :lang
#+end_src

** Miscellany [2/4]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Install packages
#+begin_src emacs-lisp :tangle packages.el
;; Markup
(package! adoc-mode)

;; Filtering
(package! sed-mode)
(package! jq-mode)

;; Config
(package! systemd)

;; Builds
(package! jenkinsfile-mode)

;; Applescript
(when IS-MAC
  (package! applescript-mode)
  (package! ob-applescript))

;; MongoDB
(package! ob-mongo)
(package! inf-mongo)

;; Graphics
(package! graphviz-dot-mode)

;; Metasyntax
(package! ebnf-mode)
#+end_src

Note that MongoDB queries use Javascript syntax, so there is no Mongo-specific
mode derived from ~prog-mode~ (just use ~js-mode~).

*** DONE [#C] Enable font locking in Desktop Entry mode :bug:module:
#+begin_src emacs-lisp :tangle yes
(add-hook 'desktop-entry-mode-hook #'font-lock-update)
#+end_src

*** STRT [#B] Configure faces used by AsciiDoc mode :tweak:module:
=adoc-mode= uses the =markup-faces= package to define faces. Unfortunately, many
of these faces are either really big or really small (i.e. their face specs have
a ~:height~ property other than 1), which I find to be really annoying.

#+begin_src emacs-lisp :tangle yes
(after! markup-faces
  (dolist (sub-group (mapcar #'car (custom-group-members 'markup-faces t)))
    (dolist (group-member (custom-group-members sub-group nil))
      (when (eq (cadr group-member) 'custom-face)
        (set-face-attribute (car group-member) nil
          :height 1.0)))))
#+end_src

Ultimately, I want to borrow face definitions from =markdown-mode= to make
=adoc-mode= fit the current theme (currently, it uses a static color palette).

*** TODO [#A] Configure Perl modes :feat:module:
Doom Emacs does not have a module for Perl 5. That said, Emacs has a lot of
built-in functionality for Perl that just needs a little bit of configuration.

** agda [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the [[http://wiki.portal.chalmers.se/agda/pmwiki.php][agda]] programming language. The Emacs support
exists directly in the agda repository but not in melpa.
#+end_quote

** beancount [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://beancount.github.io/][Beancount]] to Emacs. Beancount, like ledger, lets
you [[https://plaintextaccounting.org/][manage your money in plain text]].
#+end_quote

** cc [2/3]
#+begin_quote
This module adds support for the C-family of languages: C, C++, and Objective-C.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/cc` module
brew install ccls gdb glslang
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/cc` module

## GCC
sudo dnf -y install gcc gdb

## clangd
sudo dnf -y install clang clang-tools-extra

## ccls
sudo dnf -y install cmake clang clang-devel llvm-devel rapidjson
(
    set -e
    mkdir -p "$HOME/.local/src/doom" && cd "$HOME/.local/src/doom"
    if [ -d ccls ]
    then git -C ccls pull -f
    else git clone --depth=1 --recursive https://github.com/MaskRay/ccls
    fi
    cd ccls && rm -rf Release
    cmake -H. -BRelease -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    cmake --build Release
    sudo cmake --install Release
)

## GLSL
sudo dnf -y install glslang

## CMake
sudo dnf -y install cmake
pipx install cmake-language-server
#+end_src

*** DONE [#B] Disable reference tooltips in Emacs source tree :bug:
When =lsp-mode= code lenses (i.e. reference count tooltips) are enabled, Emacs
freezes while viewing its own C source code. This seems like a problem related
to preprocessor macros, so it could conceivably be a problem in all C projects.
For that reason, I have disabled code lenses by default in C source files:

#+begin_src emacs-lisp :tangle yes
(setq-hook! 'c-mode-hook
  lsp-lens-enable nil)
#+end_src

=SPC c l T l= can be used to re-enable code lenses if desired.

*** STRT [#B] Use Linux kernel style for C :tweak:
Need to test this out once I need to read or write some C code.

#+begin_src emacs-lisp :tangle yes
(after! cc-mode
  (unless (stringp c-default-style)
    (if (assoc 'c-mode c-default-style)
        ;; Modify existing `c-mode' cons cell in `c-default-style'
        (setf (alist-get 'c-mode c-default-style) "linux")
      ;; Insert a new `c-mode' cons cell into `c-default-style'
      (setq c-default-style
            (cons '(c-mode . "linux")
                  c-default-style))))

  ;; REVIEW Not sure why this is necessary
  (add-hook! c-mode
   (setq tab-width
         (alist-get 'c-basic-offset (assoc "linux" c-style-alist)))))
#+end_src

** clojure [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the Clojure(Script) language.
#+end_quote

** common-lisp [0/0] :ARCHIVE:
** coq [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://coq.inria.fr][coq]] support, powered by [[https://proofgeneral.github.io][Proof General]].
#+end_quote

** crystal [0/0] :ARCHIVE:
#+begin_quote
This modules adds [[https://crystal-lang.org/][crystal]] support.
#+end_quote

** csharp [1/2]
#+begin_quote
This module adds C# support to Emacs. Powered by omnisharp (directly or through
LSP).
#+end_quote

*** TODO [#A] Install prerequisites
**** TODO macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/csharp` module
#+end_src

**** LOOP Fedora
I think that this is correct, but I have not tested the setup, so I do not know
for sure. Loop back to this once you actually need to use C#.

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/csharp` module

## dotnet
sudo dnf -y install dotnet

## omnisharp-roslyn
github_binary_release \
    --repo OmniSharp/omnisharp-roslyn \
    --asset omnisharp-linux-x64-net6.0.tar.gz \
    --prefix "$HOME/.local/opt/microsoft/omnisharp-roslyn" \
    --path . \
    --binary OmniSharp

# netcoredbg
github_binary_release \
    --repo Samsung/netcoredbg \
    --asset netcoredbg-linux-amd64.tar.gz \
    --prefix "$HOME/.local/opt/microsoft" \
    --path netcoredbg \
    --binary netcoredbg
#+end_src

*** DONE [#A] Replace =C-c d= with =C-c n= :hack:tweak:
=C-c <letter>= keybindings are supposed to be reserved for users, but =C-c d= is
unconditionally bound to ~sharper-main-transient~ in [[doom-modules:lang/csharp/config.el][lang/csharp/config.el]]. The
problem is that I want =C-c d= bound to a hydra for elisp debugging.

For now, I'm OK with binding ~sharper-main-transient~ to =C-c n= (the "n" stands
for the "net" in "dotnet"). To get what I want, I overwrite the ~use-package!~
declaration for =sharper=:

#+begin_src emacs-lisp :tangle yes
;; Modified from commit ad6a3d0f3 of lang/csharp/config.el
(use-package! sharper
  :when (modulep! +dotnet)
  :general ("C-c n" #'sharper-main-transient)
  :config
  (map! (:map sharper--solution-management-mode-map
         :nv "RET" #'sharper-transient-solution
         :nv "gr" #'sharper--solution-management-refresh)
        (:map sharper--project-references-mode-map
         :nv "RET" #'sharper-transient-project-references
         :nv "gr" #'sharper--project-references-refresh)
        (:map sharper--project-packages-mode-map
         :nv "RET" #'sharper-transient-project-packages
         :nv "gr" #'sharper--project-packages-refresh)
        (:map sharper--nuget-results-mode-map
         :nv "RET" #'sharper--nuget-search-install)))
#+end_src

I would rather use ~use-package-hook!~ than rewrite the whole ~use-package!~
declaration, but I don't know if/how that is possible, because ~:general~ is
used instead of ~:config~ to specify the keybinding.

** data [2/2]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/data` module
curl --create-dirs \
    -o ~/.config/emacs/.local/etc/lsp/xmlls/org.eclipse.lemminx-0.20.0-uber.jar \
    https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.20.0/org.eclipse.lemminx-0.20.0-uber.jar
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/data` module
curl --create-dirs \
    -o ~/.config/emacs/.local/etc/lsp/xmlls/org.eclipse.lemminx-0.20.0-uber.jar \
    https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.20.0/org.eclipse.lemminx-0.20.0-uber.jar
#+end_src

*** DONE [#A] Do not remove trailing whitespace in TSV mode :bug:
Trailing whitespace in =tsv-mode= could represent empty fields (if that
whitespace is a series of consecutive tabs), which we want to preserve.

#+begin_src emacs-lisp :tangle yes
(after! ws-butler
  (pushnew! ws-butler-global-exempt-modes 'tsv-mode))
#+end_src

We could be picky about this and write a different whitespace cleanup function
for =ws-butler= to use in =tsv-mode= buffers to remove trailing spaces while
keeping trailing tabs, or maybe even to removing trailing spaces from each
tab-separated field, but this is good enough for now.

** dart [0/0] :ARCHIVE:
#+begin_quote
[[https://dart.dev/][Dart]] is a client-optimized language by Google for fast apps on any platform.
It is fast and optimized for UI, famous for the [[https://flutter.io/][Flutter]] framework, also
made by Google. Both Flutter and Dart are free and open-source.
#+end_quote

** dhall [0/0] :ARCHIVE:
** elixer [0/0] :ARCHIVE:
#+begin_quote
This module provides support for [[https://elixir-lang.org/][Elixir programming language]] via [[https://github.com/tonini/alchemist.el][alchemist.el]]
or [[https://github.com/elixir-lsp/elixir-ls/][elixir-ls]].
#+end_quote

** elm [0/0] :ARCHIVE:
** emacs-lisp [3/4]
#+begin_quote
This module extends support for Emacs Lisp in Doom Emacs.
#+end_quote

*** COMMENT Documentation
+ Debugging
  - [[info:eintr#Debugging][Introduction]]
+ Authoring macros
  - [[info:elisp#Problems with Macros][Avoiding common problems]]
    1. Do the "real work" /in the expansion/, not /during expansion/.
    2. Prevent arguments from being evaluated too many times /in the expansion/.
    3. If symbols are created /in the expansion/, even within ~let~ forms, those
       symbols should be created /during expansion/ using ~make-symbol~ to
       prevent namespace collision when the macro is called.
    4. Due to variable scoping issues, do not ~eval~ macro arguments /during
       expansion/. Instead, refer to the argument /in the expansion/.
    5. Avoid side-effects on objects constructed /during expansion/, as this can
       cause issues in byte-compiled code.

*** DONE [#B] Show docstring for thing-at-point without delay :tweak:
I want documentation to update /nearly/ immediately -- basically when I've
stopped moving my cursor. ~emacs-lisp-mode~ can readily handle a delay of even 0
seconds, but it doesn't look very good to me.

#+begin_src emacs-lisp :tangle yes
(setq-hook! 'emacs-lisp-mode-hook
  eldoc-idle-delay 0.1)
#+end_src

*** DONE [#B] Display function docstring along with arguments :feat:
Reference: https://emacs.stackexchange.com/a/55914/21977

#+begin_src emacs-lisp :tangle yes
(defadvice! my/show-function-docstring-a (fn sym &rest r)
  "If SYM is a function, append its docstring."
  :around #'elisp-get-fnsym-args-string
  (concat
   (apply fn sym r)
   (let* ((doc (and (fboundp sym) (documentation sym 'raw)))
          (oneline (and doc (substring doc 0 (string-match "\n" doc)))))
     (and oneline
          (stringp oneline)
          (not (string= "" oneline))
          (concat " | " (propertize oneline 'face 'italic))))))
#+end_src

*** DONE [#C] Filename-mode associations :feat:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist '("Cask\\'" . lisp-data-mode))
#+end_src

*** LOOP [#B] Prepend ";; => " to output in Lisp Interaction Mode :tweak:
https://www.reddit.com/r/emacs/comments/bz9rxn/weekly_tipstricketc_thread/eqrf693?utm_source=share&utm_medium=web2x

*UPDATE*: This doesn't seem to be working for me anymore. All of my output is in
an overlay due to the =eros= package.

#+begin_src emacs-lisp :tangle yes
(defadvice! my/format-result-a (f &rest r)
  "Prepend \";; =>\"."
  :around #'eval-print-last-sexp
  (let ((p (point)))
    (apply f r)
    (save-excursion
      (goto-char p)
      (forward-line 1)
      (insert ";; => "))))
#+end_src

** erlang [0/0] :ARCHIVE:
#+begin_quote
This module provides support [[https://www.erlang.org/][Erlang programming language]]. Support for the
[[https://github.com/erlang/sourcer][sourcer]] language server is optional.
#+end_quote

** ess [0/0] :ARCHIVE:
#+begin_quote
This module adds support for various statistics languages, including R, S-Plus,
SAS, Julia and Stata.
#+end_quote

** factor [0/0] :ARCHIVE:
#+begin_quote
This module adds support to the [[https://github.com/factor/factor][factor]] programming language and its associated
_fuel_ emacs plugin.
#+end_quote

** faust [0/0] :ARCHIVE:
#+begin_quote
Add support to Faust language inside emacs.
#+end_quote

** fsharp [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://fsharp.org/][F#]] support.
#+end_quote

** fstar [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://fstar-lang.org/][F*]] support, powered by [[https://github.com/FStarLang/fstar-mode.el][fstar-mode.el]].
#+end_quote

** gdscript [0/0] :ARCHIVE:
#+begin_quote
This module adds support for GDScript, the scripting language of the [[http://godotengine.org/][Godot]] game
engine, to Doom Emacs, powered by [[https://github.com/GDQuest/emacs-gdscript-mode][gdscript-mode]].
#+end_quote

** go [1/1]
#+begin_quote
This module adds [[https://golang.org][Go]] support, with optional (but recommended) LSP support via
[[https://github.com/golang/tools/blob/master/gopls/README.md][gopls]].
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
Reference the installation code block for Fedora.

#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/go` module
(cd ~/Documents/src/life/stow-dotfiles && make go)
brew install go gopls golangci-lint
# FIXME (see https://github.com/rocky/ssa-interp)
# curl -Lo- https://raw.githubusercontent.com/rocky/ssa-interp/HEAD/gub-installer | bash
go get -v -u github.com/motemen/gore/cmd/gore
go get -v -u github.com/stamblerre/gocode
go get -v -u golang.org/x/tools/cmd/godoc
go get -v -u golang.org/x/tools/cmd/goimports
go get -v -u golang.org/x/tools/cmd/gorename
go get -v -u golang.org/x/tools/cmd/guru
go get -v -u github.com/cweill/gotests/...
go get -v -u github.com/fatih/gomodifytags
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/go` module
(cd ~/Documents/src/life/stow-dotfiles && make go)
export GOPATH=$HOME/go

## Required dependencies
sudo dnf -y install golang
go install golang.org/x/tools/gopls@latest
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest

## Linting
asset=`
    curl -s https://api.github.com/repos/golangci/golangci-lint/releases/latest | jq -r \
    '.assets[] | select(.name | endswith("-linux-amd64.tar.gz")) | .name'
`
github_binary_release \
    --repo golangci/golangci-lint \
    --asset "$asset" \
    --prefix "$HOME/.local/opt/golangci" \
    --path "${asset%*.tar.gz}" \
    --binary golangci-lint

## Debugging
sudo dnf -y install llvm
#+end_src

** haskell [2/2]
#+begin_quote
This module adds [[https://www.haskell.org/][Haskell]] support, powered by either [[https://github.com/jyp/dante][dante]] (the default) or LSP
(haskell-language-server or ghcide).
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
~ghc~, ~stack~, and ~cabal~ can be installed via ~dnf~, which would
significantly speed up execution of the following code block. That said, I have
not investigated ~hls~ installation options outside of ~ghcup~, and it does not
appear to have support through Fedora's official ~dnf~ repos.

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/haskell` module

## Meta package manager
## TODO: Verify GPG signatures (https://www.haskell.org/ghcup/install/#manual-install)
curl --proto '=https' --tlsv1.2 -sSf -Lo "$HOME/.local/bin/ghcup" \
    https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup
chmod +x "$HOME/.local/bin/ghcup"

## Compiler
ghcup install ghc
(
    version=`
        ghcup list \
            --tool ghc \
            --show-criteria installed \
            --raw-format 2>/dev/null |
        tail -1 | awk '{print $2}'
    `
    cd ~/.ghcup/bin
    ln -sf ghc-$version ghc
    ln -sf ghci-$version ghci
)

## Language server
ghcup install hls

## Code formatting
ghcup install stack
stack install brittany # "$HOME/.ghcup/bin" must be in PATH

# Linter and documentation lookup
ghcup install cabal
cabal update           # "$HOME/.ghcup/bin" must be in PATH
cabal install hlint    # "$HOME/.ghcup/bin" must be in PATH
cabal install hoogle   # "$HOME/.ghcup/bin" must be in PATH
#+end_src

*** DONE [#A] Specify desired formatter :feat:
#+begin_src emacs-lisp :tangle yes
(after! lsp-haskell
  (setq lsp-haskell-formatting-provider "brittany"))
#+end_src

** hy [0/0] :ARCHIVE:
** idris [0/0] :ARCHIVE:
#+begin_quote
This module adds rudimentary Idris support.
#+end_quote

** json [1/1]
#+begin_quote
This module provides JSON support.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/json` module
brew install jq
npm install -g vscode-langservers-extracted
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/json` module
dnf -y install jq
npm install -g vscode-langservers-extracted
#+end_src

** java [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.java.com][java]] support to Doom Emacs, including =android-mode= and
=groovy-mode=.
#+end_quote

** javascript [3/3]
:PROPERTIES:
:CATEGORY: doom/ts
:END:
#+begin_quote
This module adds JavaScript and TypeScript support.
#+end_quote

Currently, I am only using TypeScript -- not vanilla JavaScript -- so the
~:CATEGORY:~ property for this subtree is set to ~doom/ts~.

*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/javascript` module
npm install -g typescript typescript-language-server eslint trepan-ni
#+end_src

**** DONE Fedora :hack:
Manual installation of the node debugger is now required
(see <https://github.com/emacs-lsp/dap-mode/issues/554#issuecomment-1171256089>).
This would be a good thing to mention to the Doom maintainers.

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/javascript` module
npm install -g typescript typescript-language-server eslint trepan-ni

## Debugging
(
    set -e
    mkdir -p "$HOME/.local/src/doom" && cd "$HOME/.local/src/doom"
    if [ -d vscode-node-debug2 ]
    then git -C vscode-node-debug2 pull -f
    else git clone --depth=1 --recursive https://github.com/microsoft/vscode-node-debug2
    fi
    cd vscode-node-debug2
    git clean -fd
    npm ci
    npm run package
    set -- *.vsix
    test $# -eq 1
    destdir=$XDG_CONFIG_HOME/emacs/.local/etc/dap-extension/vscode/ms-vscode.node-debug2
    mkdir -p "$destdir"
    unzip -o $1 -d "$destdir"
)
#+end_src

*** DONE [#B] Set up debugging :bug:
#+begin_src emacs-lisp :tangle yes
(after! dap-node
  (defadvice! my/dap-node--populate-start-file-args-a (conf)
    "Fix file paths used by the node debugger.
1. Use absolute paths by wrapping path strings in `expand-file-name'.
2. Prompt for the working directory instead of assuming `default-directory'."
    :override #'dap-node--populate-start-file-args
    (let ((conf (-> conf
                    (dap--put-if-absent :dap-server-path dap-node-debug-program)
                    (dap--put-if-absent :type "node")
                    (dap--put-if-absent :name "Node Debug"))))
      (if (plist-get conf :args)
          conf
        (dap--put-if-absent
         conf :program (expand-file-name
                        (read-file-name "Select the file to run:" nil (buffer-file-name) t)))
        (dap--put-if-absent
         conf :cwd (expand-file-name
                     (read-directory-name "Select the working directory:" nil default-directory t)))))))
#+end_src

*** DONE [#C] Filename-mode associations :feat:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist '("\\.npmignore\\'" . gitignore-mode))
#+end_src

** julia [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://julialang.org/][the Julia language]] to Doom Emacs.
#+end_quote

** kotlin [0/0] :ARCHIVE:
#+begin_quote
This module adds Kotlin support to Emacs.
#+end_quote

** latex [1/2]
#+begin_quote
Provide a helping hand when working with LaTeX documents.
#+end_quote

*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/latex` module
brew install mactex texlab wget
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/latex` module
(cd ~/Documents/src/life/stow-dotfiles && make lua)
sudo dnf -y install texlive-scheme-basic

## Install lsp server: digestif
sudo dnf -y install luarocks lua-devel
luarocks --local install digestif

## Install ulem.sty for org preview
sudo dnf -y install texlive-ulem
#+end_src

*** STRT [#B] Configure LaTeX preview in Org files :tweak:
*NOTE*: Up until now, I've inadvertently been using ~dvisvgm~ instead of
~dvipng~, because I had a customization in my =custom.el=. Let's see if the
following makes a difference now.

#+begin_src emacs-lisp :tangle no
(setq org-preview-latex-default-process 'dvipng)
#+end_src

** lean [0/0] :ARCHIVE:
** ledger [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://www.ledger-cli.org/][ledger]] files. Ledger is a command line double-entry
accounting system that works with simple text files holding transactions.
#+end_quote

** lua [1/2]
#+begin_quote
Adds Lua support to Doom Emacs
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/lua` module
github_binary_release \
    --repo sumneko/lua-language-server \
    --asset 'lua-language-server-.*-linux-x64.tar.gz' \
    --prefix "$HOME/.local/opt/lua-language-server" \
    --path . \
    --binary bin/lua-language-server
#+end_src

*** STRT [#A] Configure ~lua-language-server~ integration :feat:
- [-] ~+lua-lsp-dir~
- [ ] ~lsp-clients-lua-language-server-bin~

#+begin_src emacs-lisp :tangle yes
(after! lua-mode
  (setq lsp-clients-lua-language-server-install-dir
        (concat (file-name-as-directory (getenv "HOME"))
                ".local/opt/lua-language-server")

        lsp-clients-lua-language-server-bin
        (concat (file-name-as-directory lsp-clients-lua-language-server-install-dir)
                "bin/lua-language-server")

        lsp-clients-lua-language-server-main-location
        (concat (file-name-as-directory lsp-clients-lua-language-server-install-dir)
                "main.lua")))
#+end_src

** markdown [9/17]
:PROPERTIES:
:CATEGORY: doom/markdown
:END:
#+begin_quote
This module provides Markdown support for Emacs.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/markdown` module
npm install -g markdownlint-cli marked
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/markdown` module
npm install -g markdownlint-cli marked
pipx install grip

# Install reveal.js for Markdown presentations
# <https://revealjs.com/installation/>
(
    set -e
    mkdir -p "$HOME/.local/src/utils" && cd "$HOME/.local/src/utils"
    if [ -d reveal.js ]
    then git -C reveal.js pull -f
    else git clone --depth=1 https://github.com/hakimel/reveal.js.git
    fi
    cd reveal.js && npm install
)

# Generate a wrapper script for reveal.js
cat > ~/.local/bin/revealjs <<\EOF
#!/usr/bin/env bash
## This file was generated by my private Doom Emacs literate config
set -xe
[[ $# -eq 1 && -f "$1" ]] || {
    echo >&2 'Usage: revealjs HTML_FILE'
    exit 1
}
slides_path=$(realpath "$1")
slides_file=$(basename "$1")
cd ~/.local/src/utils/reveal.js
ln -s "${slides_path}" .
trap "rm '$PWD/${slides_file}'" EXIT
npm start &
sleep 2
xdg-open "http://localhost:8000/${slides_file}"
wait
EOF
chmod +x ~/.local/bin/revealjs
#+end_src

*** DONE [#B] Preview Markdown buffers in an external browser :tweak:
Regardless of what I've set ~browse-url-browser-function~ to, I would like to
preview Markdown rendering in the system browser.

#+begin_src emacs-lisp :tangle yes
(after! markdown
  (defun my/markdown-preview (f &rest r)
    (let ((browse-url-browser-function #'browse-url-default-browser))
      (apply f r)))
  (advice-add 'markdown-preview :around #'my/markdown-preview))
#+end_src

*** DONE [#B] Fontify source blocks :feat:
#+begin_src emacs-lisp :tangle yes
(setq markdown-fontify-code-blocks-natively t)
#+end_src

*** DONE [#B] Show edit buffer in the current window :tweak:
The call stack for =C-c '= is as follows:

- ~markdown-edit-code-block~
  - ~edit-indirect-region~
    - ~edit-indirect--display-buffer~
      - ~display-buffer~
      - ~select-window~

The important function is ~display-buffer~. Its [[help:display-buffer][help text]] describes setting
~display-buffer-alist~ to configure fine-grained window selection (in fact, this
is what Doom Emacs uses for its =popup= module). The help text goes on to
mention the ~display-buffer-overriding-action~ variable, which is given the
highest priority in window selection but is only meant to be set temporarily,
which is perfect for ~:around~ advice:

#+begin_src emacs-lisp :tangle yes
(after! markdown-mode
  (defun my/markdown-edit-code-block (f &rest r)
    (let ((display-buffer-overriding-action (list #'display-buffer-same-window)))
      (apply f r)))
  (advice-add 'markdown-edit-code-block :around #'my/markdown-edit-code-block))

#+end_src

*** DONE [#B] Create a =SPC m .= binding like in Org mode :feat:
#+begin_src emacs-lisp :tangle yes
(cond
 ((modulep! :completion ivy)
  (defalias 'counsel-markdown-goto #'counsel-outline)
  (map! :map markdown-mode-map
        :localleader
        "." #'counsel-markdown-goto))
 ((modulep! :completion vertico)
  (defalias 'consult-markdown-goto #'consult-outline)
  (map! :map markdown-mode-map
        :localleader
        "." #'consult-markdown-goto)))
#+end_src

*** DONE [#B] Disable LateX syntax highlighting by default :tweak:
I am more likely to use literal dollar signs in Markdown files than I am to use
inline LaTeX (for that, I would use Org mode).

#+begin_src emacs-lisp :tangle yes
(setq markdown-enable-math nil)
#+end_src

*** DONE [#B] Select code block at point with =vie= evil binding :feat:
References:
- ~evil-org-inner-element~
- ~markdown-element-textobj~
- ~markdown-edit-code-block~

#+begin_src emacs-lisp :tangle yes
(after! evil-markdown
  (evil-define-text-object my/evil-markdown-inner-element (count &optional beg end type)
    "Inner markdown element.
Currently only includes code blocks."
    (let* ((bounds (markdown-get-enclosing-fenced-block-construct))
           (begin (and bounds (not (null (nth 0 bounds))) (goto-char (nth 0 bounds)) (point-at-bol 2)))
           (end (and bounds (not (null (nth 1 bounds))) (goto-char (nth 1 bounds)) (point-at-bol 1))))
      (list begin end)))
  (evil-define-key '(visual operator) evil-markdown-mode-map
    "ie" #'my/evil-markdown-inner-element))
#+end_src

*** DONE [#C] Filename-mode associations :feat:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist
          '("\\.mdx\\'" . markdown-mode)
          '("/\\.markdownlintrc\\'" . json-mode))
#+end_src

*** DONE [#B] Remove Doom's =M-b= and =M-i= insert state bindings from Markdown :tweak:
#+begin_src emacs-lisp :tangle yes
(after! evil-markdown
  (map! :map evil-markdown-mode-map
        :i "M-b" nil
        :i "M-i" nil))
#+end_src

*** STRT [#B] Extend editing capabilities of code and pre blocks :feat:hack:
- [X] Special recognition of pre blocks
- [X] Editing in indirect buffers
- [X] Automatic indentation/reindirection
- [X] Headerline like org-babel
- [X] Bind keys to jump to next/previous source block
- [-] Adding unindented text to the kill ring
- [-] Sending unindented text to a REPL

#+begin_src emacs-lisp :tangle yes
(after! markdown-mode
  (defun my/markdown-pre-block-bounds ()
    "Return the bounds of a pre block at point.

This is slightly more effective than `markdown-code-block-at-point-p'
at determining bounds for pre blocks containing multiple
consecutive blank lines, and it only returns non-nil when the
block at point is a pre block (as opposed to a code block)."
    (save-excursion
      (let ((pos (point)))
        (while (and (not (bobp))
                    (markdown-cur-line-blank-p))
          (forward-line -1))
        (when-let ((bounds (get-text-property (point) 'markdown-pre))
                   (begin (car bounds))
                   (end (cadr bounds)))
          (when (<= begin pos end)
            bounds)))))

  (defun my/markdown-pre-block-string ()
    "Return string of pre block at point, indentation removed."
    (when-let ((bounds (my/markdown-pre-block-bounds))
               (text (apply #'buffer-substring-no-properties bounds))
               (indentation (length (markdown-pre-indentation (car bounds)))))
      (replace-regexp-in-string (format "^ \\{1,%d\\}" indentation) "" text)))

  (defvar-local my/markdown--indirect-indentation nil)
  (defvar-local my/markdown--indirect-block-type nil)

  (defun my/markdown-edit-pre-block ()
    "Edit Markdown pre block in an indirect buffer."
    (interactive)
    (save-excursion
      (if (fboundp 'edit-indirect-region)
          (if-let ((bounds (my/markdown-pre-block-bounds))
                   (begin (car bounds))
                   (end (cadr bounds))
                   (indentation (length (markdown-pre-indentation begin))))
              (with-current-buffer (edit-indirect-region begin end 'display-buffer)
                (setq my/markdown--indirect-indentation indentation
                      my/markdown--indirect-block-type 'pre)
                (indent-rigidly (point-min) (point-max) (- indentation)))
            (user-error "Not inside a pre block"))
        (warn "Package edit-indirect needed to edit preformatted blocks.")
        nil)))

  ;; HACK Added indentation instrumentation to this function
  (defadvice! my/markdown--edit-code-block-a ()
    :override #'markdown-edit-code-block
    (interactive)
    (save-excursion
      (if (fboundp 'edit-indirect-region)
          (let* ((bounds (markdown-get-enclosing-fenced-block-construct))
                 (begin (and bounds (not (null (nth 0 bounds))) (goto-char (nth 0 bounds)) (point-at-bol 2)))
                 (end (and bounds (not (null (nth 1 bounds)))  (goto-char (nth 1 bounds)) (point-at-bol 1))))
            (if (and begin end)
                (let* ((indentation (and (goto-char (nth 0 bounds)) (current-indentation)))
                       (lang (markdown-code-block-lang))
                       (mode (or (and lang (markdown-get-lang-mode lang))
                                 markdown-edit-code-block-default-mode))
                       (edit-indirect-guess-mode-function
                        (lambda (_parent-buffer _beg _end)
                          (funcall mode)))
                       (indirect-buf (edit-indirect-region begin end 'display-buffer)))
                  ;; reset `sh-shell' when indirect buffer
                  (when (and (not (member system-type '(ms-dos windows-nt)))
                             (member mode '(shell-script-mode sh-mode))
                             (member lang (append
                                           (mapcar (lambda (e) (symbol-name (car e)))
                                                   sh-ancestor-alist)
                                           '("csh" "rc" "sh"))))
                    (with-current-buffer indirect-buf
                      (sh-set-shell lang)))
                  (when (> indentation 0) ;; un-indent in edit-indirect buffer
                    (with-current-buffer indirect-buf
                      (setq my/markdown--indirect-indentation indentation
                            my/markdown--indirect-block-type 'code)
                      (indent-rigidly (point-min) (point-max) (- indentation)))))
              (user-error "Not inside a GFM or tilde fenced code block")))
        (warn "Package edit-indirect needed to edit code blocks.")
        nil)))

  ;; HACK Removed indentation and newline insertion from this hook
  (defadvice! my/markdown--edit-indirect-after-commit-function-a (beg end)
    :override #'markdown--edit-indirect-after-commit-function
    (font-lock-ensure))

  (defun my/markdown-edit-block ()
    "Edit a code or pre block at point in an indirect buffer."
    (interactive)
    (cond
     ((markdown-get-enclosing-fenced-block-construct)
      (markdown-edit-code-block))
     ((my/markdown-pre-block-bounds)
      (my/markdown-edit-pre-block))
     (t
      (message "No block at point can be edited indirectly."))))

  (define-key markdown-mode-map
    [remap markdown-edit-code-block] #'my/markdown-edit-block)

  (defun my/markdown-forward-code-block (&optional count)
    "Move forward COUNT source blocks (default 1)."
    (interactive "p")
    (unless (zerop count)
      (let ((re (format "\\(?:%s\\)\\|\\(?:%s\\)"
                        markdown-regex-gfm-code-block-open
                        markdown-regex-tilde-fence-begin))
            target)
        (save-excursion
          (when-let ((bounds (markdown-code-block-at-point-p))
                     (beg (car bounds))
                     (end (cadr bounds)))
            (goto-char (if (cl-plusp count) end beg)))
          (re-search-forward re nil t (if (cl-plusp count) 1 -1))
          (setq target (car-safe (markdown-code-block-at-point-p))))
        (if target
            (progn
              (goto-char target)
              (my/markdown-forward-code-block
               (funcall (if (cl-plusp count) #'1- #'1+) count)))
          (message "No further code blocks")))))

  (defun my/markdown-backward-code-block (&optional count)
    "Move backward COUNT source blocks (default 1)."
    (interactive "p")
    (my/markdown-forward-code-block (- count)))

  (after! evil-markdown
    (map! :map evil-markdown-mode-map
          :nv "]c" #'my/markdown-forward-code-block
          :nv "[c" #'my/markdown-backward-code-block))

  (defun my/markdown--edit-indirect-before-commit-function-h ()
    "Re-indent indirect buffer before commiting."
    (when (wholenump my/markdown--indirect-indentation)
      (let ((inhibit-redisplay t))
        (indent-rigidly (point-min) (point-max) my/markdown--indirect-indentation))))

  (defun my/markdown--edit-indirect-after-creation-hook-h ()
    "Add buffer-local hooks to indirect buffer."
    (setq header-line-format
      (substitute-command-keys
       "Edit, then exit with `\\[edit-indirect-commit]' or abort with \
`\\[edit-indirect-abort]'"))
    (add-hook 'edit-indirect-before-commit-hook
              #'my/markdown--edit-indirect-before-commit-function-h
              nil 'local))

  (defun my/markdown-edit-indirect-setup-h ()
    "Instrument indirect editing for `markdown-mode' buffers."
    (add-hook 'edit-indirect-after-creation-hook
              #'my/markdown--edit-indirect-after-creation-hook-h
              nil 'local))

  (add-hook! markdown-mode #'my/markdown-edit-indirect-setup-h)

  ;; In case the major mode is changed within the indirect buffer
  (put 'my/markdown--edit-indirect-before-commit-function-h 'permanent-local-hook t)
  (put 'my/markdown--indirect-indentation 'permanent-local t)
  (put 'my/markdown--indirect-block-type 'permanent-local t))
#+end_src

*** STRT [#B] Implement folding of code and pre blocks :feat:
:PROPERTIES:
:issue:    https://github.com/jrblevin/markdown-mode/issues/597
:END:
- [X] GFM blocks
- [ ] Tilde blocks
- [ ] Pre blocks

#+begin_src emacs-lisp :tangle yes
(setq-hook! 'markdown-mode-hook hs-allow-nesting nil)

(after! markdown-mode
  (let* ((start `(,markdown-regex-gfm-code-block-open 5))
         (end markdown-regex-gfm-code-block-close)
         (comment-start nil)
         (forward-sexp-func (lambda (&rest _)
                              (re-search-forward markdown-regex-gfm-code-block-close
                                                 (point-max)
                                                 'ignore)))
         (adjust-beg-func nil)
         (hs-spec `(,start ,end ,comment-start ,forward-sexp-func ,adjust-beg-func)))
    (dolist (mode '(markdown-mode gfm-mode))
      (add-to-list 'hs-special-modes-alist (cons mode hs-spec))))

  (defadvice! my/markdown-looking-at-block-start-a ()
    :before-while #'hs-looking-at-block-start-p
    (or (not (eq major-mode 'markdown-mode))
        (when-let ((bounds (markdown-code-block-at-point))
                   (start (car bounds)))
          (= (line-number-at-pos)
             (line-number-at-pos start)))))

  (defun my/markdown-find-block-start ()
    (when-let ((bounds (markdown-code-block-at-point))
               (start (car bounds)))
      (goto-char start)))

  (defadvice! my/markdown-find-block-start-a (&rest _)
    :before-while #'hs-find-block-beginning
    :after (if (modulep! :editor fold)
               '(+fold/close +fold/open +fold/toggle)
             '(hs-hide-block hs-show-block))
    (or (not (eq major-mode 'markdown-mode))
        (my/markdown-find-block-start)))

  (when (modulep! :editor fold)
    (defadvice! my/+fold-from-eol-a (&rest body)
      :override #'+fold-from-eol
      (macroexp-progn body))))
#+end_src

*** STRT [#B] Associate language names in code block headers with major modes :tweak:
#+begin_src emacs-lisp :tangle yes
(after! markdown-mode
  (pushnew! markdown-code-lang-modes
            '("http" . restclient-mode)
            '("sh" . bash-mode)))
#+end_src

*** STRT [#C] Support reveal.js :feat:
[[https://revealjs.com/markup/][Reveal.js]] can be used to run a local HTTP server to present slides written in
Markdown. Here is the basic structure of such a presentation:

#+begin_src html :tangle no
<html>
  <head>
    <link rel="stylesheet" href="dist/reveal.css">
    <link rel="stylesheet" href="dist/theme/serif.css">
    <!-- See: https://revealjs.com/themes/ -->
  </head>
  <body>
    <div class="reveal">
      <div class="slides">
        <section data-markdown>
          <textarea data-template>
            ## Slide 1
            A paragraph with some text and a [link](https://hakim.se).
            ---
            ## Slide 2
            ---
            ## Slide 3
          </textarea>
        </section>
      </div>
    </div>
    <script src="dist/reveal.js"></script>
    <script src="plugin/markdown/markdown.js"></script>
    <script>
      Reveal.initialize({
        plugins: [ RevealMarkdown ]
      });
    </script>
  </body>
</html>
#+end_src

Once you have your presentation saved to a file (e.g. =slides.html=), run the
following commands to start a local web server on port 8000:

#+begin_src sh :tangle no
cd ~/.local/src/utils/reveal.js
npm start
#+end_src

Now, symlink your slides into place (yes, this is an ugly hack and I hope to
find a better way to do this):

#+begin_src sh :tangle no
ln -s slides.html ~/.local/src/utils/reveal.js/slides.html
#+end_src

View your slideshow by opening http://localhost:8000/slides.html in a browser.
Once finished, remove the symlink of =slides.html= from the =reveal.js=
directory. *NOTE*: This entire process is wrapped by the ~revealjs~ script
generated in the literate prerequisite installation section.

*** TODO [#A] Fix font-lock in Markdown buffers :bug:
If GFM code blocks get too long, font lock no longer works. Additionally, when
lines begin with hash symbols, font lock gets really confused. This is a major
nuisance.

*** LOOP [#B] Disable error reporting in markdown-mode buffers :tweak:
:LOGBOOK:
- Note taken on [2023-02-16 Thu 14:58] \\
  Flycheck gets enabled anyway.
:END:
Reference: [[*Disable error reporting in sh-mode buffers][Disable error reporting in sh-mode buffers]]

#+begin_src emacs-lisp :tangle yes
;; Prevent flycheck from being automatically enabled
(if (or (not (boundp 'flycheck-global-modes))
        (not (eq 'not (car flycheck-global-modes))))
    (setq flycheck-global-modes '(not markdown-mode))
  (let ((modes (cdr flycheck-global-modes)))
    (setcdr flycheck-global-modes (pushnew! modes 'markdown-mode))))

;; Prevent lsp diagnostics from being enabled
(if (boundp 'lsp-diagnostics-disabled-modes)
    (pushnew! lsp-diagnostics-disabled-modes 'markdown-mode)
  (setq lsp-diagnostics-disabled-modes '(markdown-mode)))

;; Don't bother checking for an LSP diagnostics provider in markdown-mode
(setq-hook! 'markdown-mode-hook
  lsp-diagnostics-provider :none)
#+end_src

*** TODO [#B] Transform character sequences in Markdown buffers :tweak:
*UPDATE*: My original solution causes =image-mode= to break (it will not display
images). You should make an effort to replace =font-lock= hiding with native
=markdown-mode= hiding or Doom's =:ui ligatures= module. References:

- ~markdown-toggle-markup-hiding~
- =~/.config/emacs/modules/ui/ligatures/README.org=

| Before      | After |
|-------------+-------|
| \\.         | .     |
| \\(         | (     |
| \\)         | )     |
| \\-         | -     |
| &copy       | ©     |
| <a.*>.*</a> |       |

#+begin_src emacs-lisp :tangle no
;; https://emacs.stackexchange.com/questions/3753/prettify-symbols-mode-character-replacement-regex
(pushnew! font-lock-extra-managed-props 'display)
(font-lock-add-keywords
 'markdown-mode
 '(("\\(\\\\\\)[[().-]" 1 '(face nil display ""))
   ("&copy;" 0 '(face nil display "©"))
   ("<a name=\".*\"></a>" 0 '(face nil display ""))))
#+end_src

**** COMMENT Initial TODO item to fix images in Emacs
_Fix =image-mode= in running instances of Doom Emacs_

At first, I thought that lack of ImageMagick support was to blame, but the
following doesn't seem to make much difference:
#+begin_src emacs-lisp :tangle yes
(unless (member "IMAGEMAGICK" (split-string system-configuration-features))
  (setq imagemagick-types-inhibit t))
#+end_src

Errors include:
#+begin_quote
image-display-size: Invalid image specification: nil
Error during redisplay: (eval (doom-modeline-segment--media-info)) signaled (error "Invalid image specification")
#+end_quote

Function calls:
1. ~image-mode--display~
2. ~image-toggle-display-image~

Interestingly, I can successfully view images when passing the image file path
to a new Emacs instance via ~emacs <file>~ on the command line. It is only when
I have opened Emacs /and then/ attempt to open an image that it will not work. I
am guessing that the problem is caused by lazy-loaded code that has not loaded
yet opening an image file from the command line.

*** TODO [#B] Live-preview Markdown buffers in an external browser :tweak:
Live preview still happens in =eww= buffers.

** nim [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://nim-lang.org][Nim]] support to Emacs.
#+end_quote

** nix [0/0] :ARCHIVE:
#+begin_quote
Adds many tools for [[https://nixos.org/][Nix(OS)]] users in nice package for Doom users.
#+end_quote

** ocaml [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://ocaml.org/][OCaml]] support to Doom Emacs, powered by [[https://github.com/ocaml/tuareg][tuareg-mode]].
#+end_quote

** org [28/55]
:PROPERTIES:
:CATEGORY: doom/org
:COOKIE_DATA: recursive
:END:
#+begin_quote
This module adds org-mode support to Doom Emacs, along with a number of
adjustments, extensions and reasonable defaults to make it more performant and
intuitive out of the box.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/org` module
brew install ditaa gnuplot pandoc graphviz pngpaste
mkdir -p ~/org/roam
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/org` module
sudo dnf -y install ditaa gnuplot pandoc graphviz sqlite-3
pipx install --include-deps jupyter
pipx inject jupyter ipykernel
sudo dnf -y install zeromq-devel libstdc++-static
#+end_src

*** Document Structure [3/5]
**** DONE [#A] Do not indent headlines :hack:
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-hide-leading-stars nil
        org-startup-indented nil
        org-adapt-indentation nil)

  ;; HACK The following `require' line prevents error messages like this:
  ;; Invalid face reference: org-indent
  (require 'org-indent))

(defadvice! my/inhibit-indentation-a (f &rest r)
  "Prevent `org-indent-mode' from running."
  :around #'doom-docs-org-mode
  (letf! ((#'org-indent-mode #'ignore))
    (apply f r)))
#+end_src

**** OKAY [#A] Prevent irreversibly hidden content :bug:
Over the course of a typical editing session, I oftentimes need to kill Org
buffers and re-open the corresponding Org files (especially this one) because
text is hidden and cannot be revealed, even after ~widen~ and switching to
~fundamental-mode~.

Most often, the hidden content is a subtree, but sometimes drawers. In both
cases, I can see the headline, but I cannot open the object to reveal its
content.

This has been going on for so long that my workaround (to kill the buffer and
reload the contents into a fresh buffer) has nearly become muscle memory, but I
really shouldn't have to do this. *UPDATE*: I am not seeing this problem
anymore.

**** DONE [#B] Unbind =C-j= from ~org-down-element~ in Evil insert state
I want =C-j= to simply insert a new line without electric/auto indentation.

#+begin_src emacs-lisp :tangle yes
(after! evil-org
  (map! :map evil-org-mode-map
        :i "C-j" #'+default/newline))
#+end_src

**** STRT [#A] Insert new headlines just how I like them :tweak:
This is mostly done, but I do not want there to be a blank line after drawers or
scheduling information:

+ [ ] ~^:END:$~
+ [ ] ~^\\(?:DEADLINE\\|SCHEDULED\\):~

#+begin_src emacs-lisp :tangle yes
(after! org
  (setcdr (assoc 'heading org-blank-before-new-entry) nil)

  (defun my/org-insert-heading-spacing ()
    "Surround an Org heading with appropriate whitespace.

This is the general idea:

,* A
,* B
Entry content

,** B.1
,** B.2
:PROPERTIES:...

,** B.3
,* C (intentional blank line in entry)

,* D
"
    (let ((inhibit-redisplay t))
      ;; Delete all blank lines following the heading
      (delete-blank-lines)
      ;; Set spacing appropriately before the heading
      (save-excursion
        (forward-line -1)
        ;; What immediately precedes the heading line?
        (cond
         ;; Another heading line (or same heading at beginning of buffer) => do nothing
         ((org-at-heading-p) t)
         ;; Blank line => squeeze consecutive blank lines
         ((looking-at-p "[[:blank:]]*$") (delete-blank-lines))
         ;; Non-blank non-heading line => insert a blank line before the heading
         (t (forward-line 1) (newline))))))

  (defun my/org-insert-heading-visibility ()
    "Redisplay the previous Org heading.

I cannot figure out where the visibility state is saved, so I
just perform a complete cycle of `org-cycle'."
    (let ((inhibit-redisplay t))
      (save-excursion
        (org-previous-visible-heading 1)
        ;; XXX Doom-specific
        (when evil-mode (evil-normal-state))
        (call-interactively #'org-cycle)
        (call-interactively #'org-cycle))))

  (defun my/org-insert-heading-evil-state ()
    "End up with the cursor in 'insert mode' at the end of the Org heading"
    ;; XXX Doom-specific
    (when evil-mode (evil-org-append-line 1)))

  (add-hook! 'org-insert-heading-hook #'my/org-insert-heading-spacing
                                      #'my/org-insert-heading-visibility
                                      #'my/org-insert-heading-evil-state))
#+end_src

**** TODO [#C] Create headline sorting function :feat:
+ Sort by priority, then by by ~TODO~ keyword
+ Reference ~org-sort-entries~

*** Tables [0/0]
*** Hyperlinks [3/6]
**** DONE [#A] Add missing org link (=ol-*=) modules :feat:
References:
+ [[file:~/.config/emacs/modules/lang/org/config.el::(defvar org-modules][~/.config/emacs/modules/lang/org/config.el]]
+ [[file:~/.config/emacs/.local/straight/repos/org/lisp/][~/.config/emacs/.local/straight/repos/org/lisp/]]

#+begin_src emacs-lisp :tangle yes
(after! org
  (pushnew! org-modules 'ol-man 'ol-info 'ol-w3m))
#+end_src

**** DONE [#B] Open file links in another window :tweak:
+ https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
+ [[help:org-link-frame-setup]]

#+begin_src emacs-lisp :tangle yes
(after! org
  (setcdr (assoc 'file org-link-frame-setup) #'find-file-other-window))
#+end_src

**** DONE [#C] Configure how links to man pages are opened :tweak:
#+begin_src emacs-lisp :tangle yes
(setq org-man-command
      (if (and (not IS-MAC) (executable-find "man"))
          #'man
        #'woman))
#+end_src

**** TODO [#B] Create method to open links in specified window :feat:
I have at least four different options:

1. Allow explicit selection via =ace-window=
   - [[help:display-buffer-overriding-action][display-buffer-overriding-action]]
2. Create a command to open =org= links in a window with a specific parameter
   - [[info:elisp#Window Parameters][elisp#Window Parameters]]
   #+begin_src emacs-lisp :tangle no
   ;; Set parameter for current window
   (set-window-parameter (selected-window) 'org-open-link t)

   ;; Get windows with specific parameter
   (mapcar (lambda (window) (window-parameter window 'org-open-link)) (window-list))
   #+end_src
3. Temporarily modify ~display-buffer-alist~
   - [[info:elisp#Frame Layouts with Side Windows][info:elisp#Frame Layouts with Side Windows]]
4. Temporarily instruct Doom's =popup= module

**** TODO [#B] Open specific URLs in specific browsers :tweak:
Currently not tangled, as it breaks certain functionality.

#+begin_src emacs-lisp :tangle no
(after! browse-url
  (setq browse-url-handlers
        '((".*amazon\\.com.*" . #'browse-url-firefox)
          ("awsapps\\.com" . #'browse-url-chrome))))
#+end_src

For example, the following form will error out:

#+begin_src emacs-lisp :tangle no
(browse-url "https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-privatelink-zones/")
#+end_src

#+begin_quote
browse-url: No suitable browser for URL https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-privatelink-zones/
#+end_quote

**** TODO [#C] Create method to store Org links from =eshell= buffers :feat:
Just store the current working directory.

*** Todo Items [2/4]
**** DONE [#A] Inherit priority so that subtasks appear under their parents in the agenda :feat:
#+begin_src emacs-lisp :tangle yes
(after! org
  (defun my/org-inherited-priority (s)
    (cond
     ;; Priority cookie in this heading
     ((string-match org-priority-regexp s)
      (* 1000 (- org-priority-lowest
                 (org-priority-to-value (match-string 2 s)))))
     ;; No priority cookie, but already at highest level
     ((not (org-up-heading-safe))
      (* 1000 (- org-priority-lowest org-priority-default)))
     ;; Look for the parent's priority
     (t
      (my/org-inherited-priority (org-get-heading)))))
  (setq org-priority-get-priority-function #'my/org-inherited-priority))
#+end_src

**** DONE [#C] Insert notes into ~:LOGBOOK:~ drawer without logging state changes :tweak:
#+begin_src emacs-lisp :tangle yes
;; REVIEW See if there is a cleaner way to temporarily set `org-log-into-drawer'
(after! org
  (defun my/org-add-note-advice (f &rest r)
    (let ((restore org-log-into-drawer))
      (setq org-log-into-drawer t)
      (apply f r))
      (setq org-log-into-drawer restore))
  (advice-add 'org-add-note :around #'my/org-add-note-advice))
#+end_src

**** LOOP [#B] Make it easier to jump to headlines across Org buffers :tweak:
:LOGBOOK:
- Note taken on [2022-10-01 Sat 21:19] \\
  Refactor for =vertico= (if needed).
:END:
#+begin_src emacs-lisp :tangle yes
(when (modulep! :completion ivy)
  (setq counsel-org-goto-all-outline-path-prefix 'buffer-name))
#+end_src

**** TODO [#C] Create integration between embedded ~TODO~ and project =todo.org= :feat:
Something like this Atlassian VS Code plugin:
https://support.atlassian.com/bitbucket-cloud/docs/jira-issues-in-vs-code/

+ Embedded ~TODO~ comments:
  + https://github.com/tarsius/hl-todo
  + ~hl-todo-keyword-faces~
  + ~hl-todo-next~, ~hl-todo-previous~, ~hl-todo-occur~
+ Project =todo.org= list:
  + ~org-capture-templates~
  + ~counsel-projectile-org-capture-templates~
  + ~counsel-projectile-org-capture~
+ Integration with Git:
  + https://github.com/alphapapa/magit-todos
  + ~magit-todos-list~

*** Tags [0/0]
*** Properties and Columns [0/1]
**** TODO [#C] Fix emoji display in Org column mode :bug:
:PROPERTIES:
:COLUMNS: %TODO %ITEM %attentive(👂) %diligent(🚜) %inventive(🔧) %astute(🎯) %curious(🔭) %nurturing(💯) %uncompromising(🎖) %visionary(🌎) %daring(🏈) %frugal(💵) %trustworthy(🤝) %probing(🔎) %assertive(☝) %productive(📦)
:END:
| Icon | Property       | Amazon Leadership Principle        |
|------+----------------+------------------------------------|
| 👂   | attentive      | Customer Obsession                 |
| 🚜   | diligent       | Ownership                          |
| 🔧   | inventive      | Invent and Simplify                |
| 🎯   | astute         | Are Right, A Lot                   |
| 🔭   | curious        | Learn and Be Curious               |
| 💯   | nurturing      | Hire and Develop the Best          |
| 🎖   | uncompromising | Insist on the Highest Standards    |
| 🌎   | visionary      | Think Big                          |
| 🏈   | daring         | Bias for Action                    |
| 💵   | frugal         | Frugality                          |
| 🤝   | trustworthy    | Earn Trust                         |
| 🔎   | probing        | Dive Deep                          |
| ☝   | assertive      | Have Backbone; Disagree and Commit |
| 📦   | productive     | Deliver Results                    |

For whatever reason, only the emoji for "uncompromising" and "assertive" are
showing in Org column view when invoked by =C-c C-x C-c= (~org-columns~).
Additionally, the cursor jumps one column to the right when moving to the lines
in the table that contain either of those emoji, somewhat suggesting that they
are one character wider than the others. Unfortunately, when replacing those
"two-character-wide" emoji with alternative "one-character-wide" emoji to
achieve consistent "character width", what happens is that no emoji are
displayed at all.

*** Dates and Times [0/0]
*** Refiling and Archiving [0/1]
**** STRT [#C] Display distinguishable name in refile targets :tweak:
I've accomplished my goal, but I don't like seeing the entire file path.
Instead, I would like to see the file-level Org tag (e.g. "doom" for this file).

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-refile-use-outline-path 'full-file-path))
#+end_src

*** Capture and Attachments [2/3]
**** DONE [#A] Establish agenda file layout :tweak:
Relevant variables:
+ ~org-directory~
+ ~org-agenda-files~
+ ~org-attach-directory~
+ ~org-mobile-directory~

| Candidates          | Buffer or File             | Headline          | Text              |
|---------------------+----------------------------+-------------------+-------------------|
| Current buffer      |                            | org: =SPC m .=    | global: =SPC s s= |
| Org buffers         | org: =SPC m ,=             | org: =SPC m /=    |                   |
| Agenda files        | org: =SPC u SPC u SPC m ,= | global: =SPC n S= |                   |
| Org directory files | global: =SPC n f=          |                   | global: =SPC n s= |

The following is a prerequisite for my organization:
#+begin_src sh :tangle no
mkdir -p ~/org
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq
      ;; Top-level directory (used by `+default/find-in-notes', etc.)
      org-directory "~/org"

      ;; Directories to search for agenda files
      my/org-directories `("work" "life" ,doom-user-dir)
      org-agenda-files (mapcar (lambda (f)
                                 (file-name-as-directory
                                  (if (file-name-absolute-p f) f
                                    (expand-file-name f org-directory))))
                               `("" ,@my/org-directories))

      ;; Only "todo.org" files hold agenda items
      org-agenda-file-regexp "\\`todo.org\\'")
#+end_src

**** DONE [#B] Remove file links from personal org capture templates :tweak:
#+begin_src emacs-lisp :tangle yes
(after! org
  (setcar (nthcdr 4 (assoc "t" org-capture-templates)) "* TODO %?") ;; And replace "[ ]"
  (setcar (nthcdr 4 (assoc "n" org-capture-templates)) "* %u %?")
  (setcar (nthcdr 4 (assoc "j" org-capture-templates)) "* %U %?"))
#+end_src

**** TODO [#A] Fix capturing :bug:
For some reason, ~org-capture~ (invoked with =SPC X=) sometimes fails to save
the file =~/org/todo.org= -- it just hangs. The only way around the issue is to
widen the narrowed capture buffer and save the buffer over =~/org/todo.org=
(e.g. via =evil-ex= command =:w ~/org/todo.org RET=).

*** Agenda Views [2/4]
**** DONE [#A] Widen the agenda prefix and indent subtasks :tweak:
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-prefix-format
      '((agenda  . " %i  %l%-16:c%?-12t% s")
        (todo    . " %i  %l%-16:c")
        (tags    . " %i  %l%-16:c")))
#+end_src

**** DONE [#B] Do not display file tags in the agenda :tweak:
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-hide-tags-regexp "\\`work\\|life\\|doom\\|todo\\'")
#+end_src

**** STRT [#B] Set icons for agenda prefix :feat:
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-category-icon-alist
      `(("/inbox\\'"           (,(all-the-icons-faicon     "inbox"      nil nil :height 1.00 :face 'all-the-icons-dred)))
        ;; work/*
        ("\\`work/admin\\'"    (,(all-the-icons-faicon     "fax"        nil nil :height 0.85 :face 'all-the-icons-lred)))
        ("\\`work/oncall\\'"   (,(all-the-icons-faicon     "users"      nil nil :height 0.80 :face 'all-the-icons-lyellow)))
        ("\\`work/cots\\'"     (,(all-the-icons-faicon     "server"     nil nil :height 0.85 :face 'all-the-icons-dorange)))
        ("\\`work/metrics\\'"  (,(all-the-icons-faicon     "eye"        nil nil :height 0.85 :face 'all-the-icons-dmaroon)))
        ("\\`work/infra\\'"    (,(all-the-icons-faicon     "cubes"      nil nil :height 0.65 :face 'all-the-icons-lorange)))
        ("\\`work/sdlc\\'"     (,(all-the-icons-faicon     "pencil"     nil nil :height 0.95 :face 'all-the-icons-orange)))
        ;; life/*
        ("\\`life/family\\'"   (,(all-the-icons-faicon     "heart"      nil nil :height 0.85 :face 'all-the-icons-red)))
        ("\\`life/money\\'"    (,(all-the-icons-faicon     "money"      nil nil :height 0.80 :face 'all-the-icons-dgreen)))
        ("\\`life/tech\\'"     (,(all-the-icons-faicon     "laptop"     nil nil :height 0.80 :face 'all-the-icons-dsilver)))
        ;; doom/*
        ("\\`doom/upstream\\'" (,(all-the-icons-alltheicon "git"        nil nil :height 0.85 :face 'all-the-icons-lred)))
        ("\\`doom/config\\'"   (,(all-the-icons-fileicon   "emacs"      nil nil :height 0.85 :face 'all-the-icons-purple)))
        ("\\`doom/org\\'"      (,(all-the-icons-fileicon   "org"        nil nil :height 0.90 :face 'all-the-icons-lgreen)))
        ("\\`doom/markdown\\'" (,(all-the-icons-octicon    "markdown"   nil nil :height 0.85 :face 'all-the-icons-maroon)))
        ("\\`doom/yaml\\'"     (,(all-the-icons-faicon     "cogs"       nil nil :height 0.80 :face 'all-the-icons-lsilver)))
        ("\\`doom/python\\'"   (,(all-the-icons-alltheicon "python"     nil nil :height 0.85 :face 'all-the-icons-dblue)))
        ("\\`doom/ts\\'"       (,(all-the-icons-fileicon   "typescript" nil nil :height 0.85 :face 'all-the-icons-blue)))
        ("\\`doom/term\\'"     (,(all-the-icons-faicon     "terminal"   nil nil :height 0.95 :face 'all-the-icons-dgreen)))
        ("\\`doom/misc\\'"     (,(all-the-icons-fileicon   "config"     nil nil :height 0.85 :face 'all-the-icons-lblue)))))
#+end_src

**** TODO [#C] Display weekly/daily agenda view properly :feat:
+ https://www.reddit.com/r/orgmode/comments/6ybjjw/aligned_agenda_view_anyway_to_make_this_more/
+ IIRC, this is called the "fancy diary"

*** Markup for Rich Contents [1/3]
**** DONE [#C] Maintain proper spacing of footnotes :tweak:hack:
I had to override the ~org-footnote-sort~ function to *not* insert a leading
~\n~ before new footnote definitions.

#+begin_src emacs-lisp :tangle yes
(after! org
  (defadvice! my/org-footnote-sort-a (&rest _)
    "Do not insert a leading newline before new footnote definitions."
    :override #'org-footnote-sort
    (let ((references (org-footnote--collect-references)))
      (org-preserve-local-variables
       (let ((definitions (org-footnote--collect-definitions 'delete)))
         (org-with-wide-buffer
          (org-footnote--clear-footnote-section)
          ;; Insert footnote definitions at the appropriate location,
          ;; separated by a blank line.  Each definition is inserted
          ;; only once throughout the buffer.
          (let (inserted)
            (dolist (cell references)
              (let ((label (car cell))
                    (nested (not (nth 2 cell)))
                    (inline (nth 3 cell)))
                (unless (or (member label inserted) inline)
                  (push label inserted)
                  (unless (or org-footnote-section nested)
                    ;; If `org-footnote-section' is non-nil, or
                    ;; reference is nested, point is already at the
                    ;; correct position.  Otherwise, move at the
                    ;; appropriate location within the section
                    ;; containing the reference.
                    (goto-char (nth 1 cell))
                    (org-footnote--goto-local-insertion-point))
                  (insert (or (cdr (assoc label definitions))
                              (format "[fn:%s] DEFINITION NOT FOUND." label))
                          "\n"))))
            ;; Insert un-referenced footnote definitions at the end.
            (pcase-dolist (`(,label . ,definition) definitions)
              (unless (member label inserted)
                (insert definition "\n"))))))))))
#+end_src

**** HOLD [#C] Allow 5 lines of emphasized text :tweak:
This appears to cause freezes. For now, I'll get by without.

#+begin_src emacs-lisp :tangle no
(after! org
  (setcar (nthcdr 4 org-emphasis-regexp-components) 4))
#+end_src

**** TODO [#C] Ignore surrounding tildes for interactive help functions :tweak:
Doom's org markup convention is to surround elisp symbols with tildes. However,
this makes it difficult to use commands such as ~counsel-describe-variable~
(=SPC h v=), ~counsel-describe-function~ (=SPC h f=), and ~find-function~
(custom-mapped to =C-h C-f=) for symbols under point.

The current workaround is to select the "object" under point using =v i e= and
then use the corresponding help command. This works well enough, but is an
annoying extra step.

*** Exporting [2/6]
**** DONE [#A] Do not execute source blocks when exporting :tweak:
If source blocks have results, I just want to export those. I do not want to
execute all source blocks again during export.

#+begin_src emacs-lisp :tangle yes
(setq org-export-babel-evaluate nil)
#+end_src

**** DONE [#A] Support exporting to IPython notebooks :feat:
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :lang org +jupyter)
  (package! ox-ipynb
    :recipe (:host github :repo "jkitchin/ox-ipynb")))
#+end_src

Inspiration taken from the =org= module's =config.el=.
#+begin_src emacs-lisp :tangle yes
(use-package! ox-ipynb
  :when (modulep! :lang org +jupyter)
  :after ox
  :config

  ;; Define an `ox-ipynb' export function that excludes results
  (defun my/ox-ipynb-export-to-ipynb-no-results-file
      (&optional async subtreep visible-only body-only info)
    "Export current buffer to a file. Strip results first.
Optional argument ASYNC to asynchronously export.
Optional argument SUBTREEP to export current subtree.
Optional argument VISIBLE-ONLY to only export visible content.
Optional argument BODY-ONLY export only the body.
Optional argument INFO is a plist of options."
    (let ((ox-ipynb-preprocess-hook
           '((lambda ()
               (org-babel-map-src-blocks nil (org-babel-remove-result))))))
      (ox-ipynb-export-to-ipynb-file)))

  ;; Slightly modified from `ob-ipynb' (added dispatch to new export function)
  (org-export-define-derived-backend 'jupyter-notebook 'org
    :menu-entry
    '(?n "Export to jupyter notebook"
         ((?b "to buffer" ox-ipynb-export-to-ipynb-buffer)
          (?n "to notebook" ox-ipynb-export-to-ipynb-file)
          (?N "to nb (no results)" my/ox-ipynb-export-to-ipynb-no-results-file)
          (?o "to notebook and open" ox-ipynb-export-to-ipynb-file-and-open)
          (?p "to participant nb & open" ox-ipynb-export-to-participant-notebook)
          (?r "to nb (no results) and open" ox-ipynb-export-to-ipynb-no-results-file-and-open)
          (?s "to slides and open" ox-ipynb-export-to-ipynb-slides-and-open))))

  ;; Support exporting to bash kernel notebooks
  (let ((kernelspecs (assoc-delete-all 'sh ox-ipynb-kernelspecs))
        (language-infos (assoc-delete-all 'sh ox-ipynb-language-infos)))
    (setq ox-ipynb-kernelspecs
          (push '(sh . (kernelspec . ((display_name . "Bash")
                                      (language . "bash")
                                      (name . "bash")))) kernelspecs)
          ox-ipynb-language-infos
          (push '(sh . (language_info . ((codemirror_mode . "shell")
                                         (file_extension . ".sh")
                                         (mimetype . "text/x-sh")
                                         (name . "bash")
                                         (pygments_lexer . "bash")))) language-infos)))

  ;; Support exporting from `jupyter-LANG' and `ein-LANG' source blocks
  (dolist (pair '((ipython . "python")
                  (sh . "bash")))
    (let* ((key (car pair))
           (lang (cdr pair))
           (kernelspec (alist-get key ox-ipynb-kernelspecs))
           (language-info (alist-get key ox-ipynb-language-infos))
           (extra-keys (cons (intern (concat "jupyter-" lang))
                             (when (modulep! :tools ein)
                               (list (intern (concat "ein-" lang)))))))
      (dolist (ext-key extra-keys)
        (add-to-list 'ox-ipynb-kernelspecs (cons ext-key kernelspec))
        (add-to-list 'ox-ipynb-language-infos (cons ext-key language-info))))))
#+end_src

**** TODO [#B] Fix bug with output cells in =ox-ipynb= :bug:
Verbatim output from Org source blocks (at least when wrapped in an "example")
contains the ~#+begin~ and ~#+end~ delimiters when output to a Jupyter notebook.

**** TODO [#C] Fix bug with quote cells in =ox-ipynb= :bug:
Currently, when exporting from =ox-ipynb=, quote blocks absorb the paragraph
directly following them. The notebooks still run, but there is a rendering
issue. For now, just avoid quote blocks.

**** TODO [#C] Fix bug with nested markup in =ox-ipynb= :bug:
/*NOTE*: Text like this will not export properly./

**** TODO [#C] Do not wrap output cells in notebooks output by =ox-ipynb= :tweak:
https://stackoverflow.com/questions/53482343/how-to-disable-line-wrapping-in-jupyter-notebook-output-cells

*** Publishing [0/0]
*** Working with Source Code [7/12]
**** DONE [#A] Indent source blocks :tweak:
+ https://emacs.stackexchange.com/a/9483/21977

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0))
#+end_src

**** DONE [#B] Show edit buffer in the current window :tweak:
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-src-window-setup 'current-window)
  (when (modulep! :ui popup)
    (setq +popup--display-buffer-alist
          (delq (assoc "^\\*Org Src" +popup--display-buffer-alist)
                +popup--display-buffer-alist))
    (when (bound-and-true-p +popup-mode)
      (setq display-buffer-alist +popup--display-buffer-alist))))
#+end_src

**** DONE [#B] Add ~bash~ kernel support to ~ob-jupyter~ :feat:
#+begin_src emacs-lisp :tangle yes
(when (modulep! :lang org +jupyter)
  (after! ob-async
    (pushnew! ob-async-no-async-languages-alist "jupyter-bash"))

  (after! org-src
    (cl-pushnew '("jupyter-bash" . bash)
                  org-src-lang-modes :key #'car)))
#+end_src

**** DONE [#A] Add mechanism to override jupyter environment :feat:
#+begin_src emacs-lisp :tangle yes
(defvar my/jupyter-envvars nil
  "List of environment variable overrides for `jupyter'.
This is a list of lists, not a list of cons cells.")

(after! jupyter-env
  (defadvice! my/jupyter-env-a (fn &rest args)
    "Execute jupyter in a modified environment."
    :around '(jupyter-command jupyter-run-repl)
    (eval (macroexpand-1
           `(letenv! ,my/jupyter-envvars
              (apply fn args))))))
#+end_src

**** DONE [#A] Ignore frozen module warnings from jupyter :bug:
If frozen modules are used by the ~jupyter~ system command, the command will
output an error message like this:

#+begin_quote
0.00s - Debugger warning: It seems that frozen modules are being used, which may
0.00s - make the debugger miss breakpoints. Please pass -Xfrozen_modules=off
0.00s - to python to disable frozen modules.
0.00s - Note: Debugging will proceed. Set PYDEVD_DISABLE_FILE_VALIDATION=1 to disable this validation.
#+end_quote

Unfortunately, the ~jupyter-command~ function will not ignore this output and
parsing will fail with an error message like this:

#+begin_quote
json-read: Invalid number format: 5
#+end_quote

Let's fix that:
#+begin_src emacs-lisp :tangle yes
(add-to-list 'my/jupyter-envvars '("PYDEVD_DISABLE_FILE_VALIDATION" "1"))
#+end_src

**** DONE [#A] Run jupyter in its pipx virtualenv :tweak:
#+begin_src emacs-lisp :tangle yes
(defun my/pipx-local-venvs ()
  "Return value of PIPX_LOCAL_VENVS as a directory name."
  (file-name-as-directory
   (string-trim-right
    (shell-command-to-string "pipx environment -v PIPX_LOCAL_VENVS"))))

(let* ((venv (concat (my/pipx-local-venvs) "jupyter"))
       (bindir (concat (file-name-as-directory venv) "bin")))
  (pushnew! my/jupyter-envvars
            (list "VIRTUAL_ENV" venv)
            (list "PATH" (concat bindir (path-separator) (getenv "PATH")))))
#+end_src

**** TODO [#A] Allow =jupyter= source blocks to be edited inline :bug:
When adding a new line (though not when changing an existing line) in a source
block with a language such as ~jupyter-bash~, I get the following error:

#+begin_quote
jupyter-repl-associate-buffer: Cannot associate buffer to REPL.  Wrong ‘major-mode’
#+end_quote

You can experiment with the following source block (note that =C-'= works as
expected; there is only a problem when editing in the Org buffer):

: #+begin_src jupyter-bash :session doom-config :tangle no
: echo 'hello world'
: #+end_src

To kill the session, kill the ~*jupyter-repl[bash nil]-doom-config*~ buffer that
gets created. (This buffer is tied to =ob-jupyter= session and source blocks.)

**** TODO [#A] Fix error output by ~jupyter-run-repl~ with Python 3 kernel :bug:
*NOTE*: This only happens with the Python kernel (Bash works fine).

When running ~jupyter-run-repl~, I get the following error, even through
=~/.local/pipx/venvs/jupyter/lib/python3.11/site-packages/ipykernel_launcher.py=
exists on my system:

#+begin_quote
Kernel process exited:
/usr/bin/python: No module named ipykernel_launcher

Process jupyter-kernel-python3 exited abnormally with code 1
finalizer failed:
(cl-no-primary-method
 jupyter-kill-kernel
 #s(jupyter-kernel-process-manager
     (#<finalizer used>)
     jupyter--kernel-managers
     #s(jupyter-spec-kernel
         (#<finalizer> #<finalizer used>)
         ("python3"
          "/home/eeowaa/.local/pipx/venvs/jupyter/share/jupyter/kernels/python3"
          :argv ["python" "-m" "ipykernel_launcher" "-f" "{connection_file}"]
          :env nil
          :display_name "Python 3 (ipykernel)"
          :language "python"
          :interrupt_mode "signal"
          :metadata (:debugger t))
         #s(jupyter-session
             (:kernel_name "python3"
              :transport "tcp"
              :ip "127.0.0.1"
              :signature_scheme "hmac-sha256"
              :key "ad140b82-add2-47bf-be13-2e430827c54f"
              :hb_port 44171
              :stdin_port 34565
              :control_port 46279
              :shell_port 44141
              :iopub_port 36253)
             "df9493b8-d5a2-4a40-b020-48fb82348f48"
             "ad140b82-add2-47bf-be13-2e430827c54f")
         #<process jupyter-kernel-python3>)
     nil))
#+end_quote

However, ~jupyter-run-repl~ works for me with Python when I start Emacs from
Jupyter's virtualenv like so (I think because Emacs' notion of the "system
python" has changed):

#+begin_src sh :tangle no
cd ~/.local/pipx/venvs/jupyter
. bin/activate
emacs
#+end_src

See also:
- ~jupyter kernelspec list --json~
- ~jupyter-available-kernelspecs~
- ~process-environment~

**** STRT [#A] Fix compilation of =emacs-zmq= :bug:hack:
:LOGBOOK:
- Note taken on [2023-02-07 Tue 10:38] \\
  This has been failing for me lately with the following backtrace:
  #+begin_example
  Debugger entered--Lisp error: (wrong-number-of-arguments (0 . 0) 1)
    (#f(compiled-function () #<bytecode 0xf1450ab544c3e63>) nil)
    (funcall #f(compiled-function () #<bytecode 0xf1450ab544c3e63>) nil)
    (unwind-protect (funcall fn args) (let ((--dolist-tail-- (list (cons :filter-args (ensure-list #'compile)))) targets) (while --dolist-tail-- (setq targets (car --dolist-tail--)) (let ((--dolist-tail-- (cdr targets)) target) (while --dolist-tail-- (setq target (car --dolist-tail--)) (advice-remove target #'my/zmq-compile-a) (setq --dolist-tail-- (cdr --dolist-tail--)))) (setq --dolist-tail-- (cdr --dolist-tail--)))))
    (progn (progn (defalias 'my/zmq-compile-a #'(lambda (command) (let ((configure ...) (make command)) (format "sh -c \"%s && %s" configure make)))) (let ((--dolist-tail-- (list (cons :filter-args (ensure-list ...)))) targets) (while --dolist-tail-- (setq targets (car --dolist-tail--)) (let ((--dolist-tail-- (cdr targets)) target) (while --dolist-tail-- (setq target (car --dolist-tail--)) (advice-add target (car targets) #'my/zmq-compile-a) (setq --dolist-tail-- (cdr --dolist-tail--)))) (setq --dolist-tail-- (cdr --dolist-tail--))))) (unwind-protect (funcall fn args) (let ((--dolist-tail-- (list (cons :filter-args (ensure-list ...)))) targets) (while --dolist-tail-- (setq targets (car --dolist-tail--)) (let ((--dolist-tail-- (cdr targets)) target) (while --dolist-tail-- (setq target (car --dolist-tail--)) (advice-remove target #'my/zmq-compile-a) (setq --dolist-tail-- (cdr --dolist-tail--)))) (setq --dolist-tail-- (cdr --dolist-tail--))))))
    (my/fix-zmq-build-a #f(compiled-function () #<bytecode 0xf1450ab544c3e63>))
    (apply my/fix-zmq-build-a #f(compiled-function () #<bytecode 0xf1450ab544c3e63>) nil)
    (zmq-load)
    (eval-expression (zmq-load) nil nil 127)
    (funcall-interactively eval-expression (zmq-load) nil nil 127)
    (command-execute eval-expression)
  #+end_example
:END:
If you don't have a ZMQ dynamic module built when running ~jupyter-run-repl~,
you will be prompted to build it ("ZMQ module not found. Build it? (y or n)").
~make~ then runs in =~/.config/emacs/.local/straight/build-28.2/zmq/=, but this
fails because ~./configure~ needs to be run in the child =src= directory
(=~/.config/emacs/.local/straight/build-28.2/zmq/src=) first. The workaround is
as follows:

1. Run the following commands:

   #+begin_src :tangle no
   cd ~/.config/emacs/.local/straight/build-28.2/zmq
   make configure && make
   #+end_src

2. Restart Emacs. Until then, you'll see the following error when attempting to
   run =jupyter= source blocks (like ~jupyter-bash~):

   #+begin_quote
   defconst: Symbol’s value as variable is void: zmq-REQ
   #+end_quote

*UPDATE*: The ~zmq-load~ function builds the ZMQ module with this command:
~(compile (concat "make" (when emacs (concat " EMACS=" emacs))))~. Advising the
function allows us to pass ~configure~, as well:

#+begin_src emacs-lisp :tangle yes
(after! zmq
  (defadvice! my/fix-zmq-build-a (fn &rest args)
    :around #'zmq-load
    (letf! (defadvice my/zmq-compile-a (command)
             :filter-args #'compile
             (let ((configure (concat command " configure"))
                   (make command))
               (format "sh -c \"%s && %s" configure make)))
      (funcall fn args))))
#+end_src

This fixes the compilation error, but I still get the following command after
compilation, if that compilation was triggered by executing a ~jupyter-bash~
source block in Org mode:

#+begin_quote
org-babel-jupyter-session-key: Need a valid session and a kernel to form a key
#+end_quote

The workaround is to simply try again. This is not a problem in an interactive
workflow, but it would be a problem if one wanted to jump straight to exporting
an Org file containing ~jupyter-bash~ source blocks to a =.ipynb= file.

**** STRT [#A] Pin =zmq= to fix a bug :bug:hack:
https://github.com/nnicandro/emacs-zmq/issues/21

#+begin_src emacs-lisp :tangle packages.el
;; (package! zmq :pin "00dea2f9f88cd3e723d3b909aea26313dd33f9c6")
(unpin! zmq)
(unpin! jupyter)
#+end_src

**** LOOP [#B] Make it easy to jump between source and tangled file :feat:
Right now, I am only considering tangling to Elisp, since that's what I do most
of the time.

#+begin_src emacs-lisp :tangle yes
(after! projectile
  (pushnew! projectile-other-file-alist
            '("org" "el")
            '("el" "org")))
#+end_src

**** DONE [#C] Show ~dot~ source blocks in ~graphviz-dot-mode~ :feat:module:
#+begin_src emacs-lisp :tangle yes
(after! ob
  (pushnew! org-src-lang-modes
            '("dot" . graphviz-dot)))
#+end_src

*** Miscellaneous [0/1]
**** TODO [#C] Use Org speed keys :feat:
Just apply your old configuration.

*** Contrib [1/2]
**** DONE [#C] Add ~ditaa~ JAR path :feat:
#+begin_src emacs-lisp :tangle yes
(setq org-ditaa-jar-path
      (cond
       (IS-MAC (file-expand-wildcards "/usr/local/Cellar/ditaa/*/libexec/ditaa-*-standalone.jar"))
       ((file-exists-p "/usr/share/java/ditaa.jar") "/usr/share/java/ditaa.jar")))
#+end_src

**** TODO [#C] Configure screenshot attachment :tweak:
By default, =+dragndrop= configures =org-download= to store image links as
attachments rather than hyperlinks. Even after searching on the web, I do not
understand what concrete advantages attachments have over hyperlinks besides
offering more management tools. I would rather be consistent and stick with
hyperlinks for now.

#+begin_src emacs-lisp :tangle yes
(setq org-download-method 'directory
      org-download-image-dir "images")
#+end_src

Note that the following keybindings are very helpful:
+ =SPC m a c= (~org-download-screenshot~) takes a new screenshot and attaches it
+ =SPC m a p= (~org-download-clipboard~) attaches an image from the clipboard

*** Pomodoro [2/3]
**** DONE [#A] Always load =org-pomodoro= :hack:
Would be better to lazy-load this.

#+begin_src emacs-lisp :tangle yes
(require 'org-pomodoro)
#+end_src

**** DONE [#B] Add keybindings for ~org-pomodoro~ and ~org-pomodoro-extend-last-clock~ :feat:
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
      :localleader
      (:when (modulep! :lang org +pomodoro)
       (:prefix ("c" . "clock")
        "p" #'org-pomodoro
        "P" #'org-pomodoro-extend-last-clock)))
#+end_src

**** STRT [#B] Change the chime for =org-pomodoro= :tweak:
:LOGBOOK:
- Note taken on [2022-12-05 Mon 14:00] \\
  Should refactor for Linux.
:END:
It is obnoxiously loud and shrill. For now, I'm OK with just decreasing the
volume. To do this, the various ~org-pomodoro-*-sound-args~ variables should be
set to whatever command-line options(s) should be passed to
~org-pomodoro-audio-player~ (=/usr/bin/afplay= on macOS).

#+begin_src emacs-lisp :tangle yes
(when (equal org-pomodoro-audio-player "/usr/bin/afplay")
  (let ((args '("-v" "0.125")))
    (setq org-pomodoro-start-sound-args args
          org-pomodoro-finished-sound-args args
          org-pomodoro-overtime-sound-args args
          org-pomodoro-ticking-sound-args args
          org-pomodoro-killed-sound-args args
          org-pomodoro-short-break-sound-args args
          org-pomodoro-long-break-sound-args args)))
#+end_src

** php [0/0] :ARCHIVE:
#+begin_quote
This module adds support for PHP 5.3+ (including PHP7).
#+end_quote

** plantuml [0/0] :ARCHIVE:
** purescript [0/0] :ARCHIVE:
** python [6/9]
:PROPERTIES:
:CATEGORY: doom/python
:END:
#+begin_quote
Adds Python support to Doom Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/python` module
brew install python
npm install -g pyright
pipx install pipenv
pipx install pylint
pipx install flake8
pipx install pytest
pipx install nose2
pipx install pyflakes
pipx install isort
pipx install --include-deps jupyter

## Debugging
pip3 install --user debugpy
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/python` module
sudo dnf -y install python3 pipx
npm install -g pyright
pipx install pipenv
pipx install pylint
pipx install flake8
pipx install pytest
pipx install nose2
pipx install pyflakes
pipx install isort
pipx install --include-deps jupyter

## Debugging
pip3 install --user debugpy
#+end_src

*** DONE [#A] Develop and run a simple "Hello World" program :noexport:doc:
More than a simple "Hello World":
+ [[file:~/Documents/src/life/secret-santa/][Secret Santa project]]
+ [[file:~/org/life/notes.org::*Developing with interpreted languages][Notes for developing with interpreted languages]]

*** DONE [#A] Fix quirks with keymaps :bug:tweak:
#+begin_src emacs-lisp :tangle yes
;; Add "pipenv" label to "e" prefix key
(after! pipenv
  (map! :map python-mode-map
        :localleader
        :prefix ("e" . "pipenv")))
#+end_src

*** DONE [#B] Set up fill column for PEP 8 compliance :tweak:
#+begin_src emacs-lisp :tangle yes
(add-hook! python-mode
  (setq fill-column 79)
  (display-fill-column-indicator-mode))
#+end_src

*** DONE [#B] Install texinfo documentation :feat:
#+begin_src emacs-lisp :tangle packages.el
(package! python-info)
#+end_src

*** DONE [#C] Filename-mode associations :feat:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist '("pylint" . conf-mode)
                          '("/activate\\'" . sh-mode))
#+end_src

*** STRT [#B] Discover ~pipx~ virtualenvs with projectile :tweak:
:LOGBOOK:
- Note taken on [2023-05-19 Fri 21:27] \\
  Unfortunately, nested projects can be problematic in my current setup with Doom
  Emacs and =projectile=. I need to revisit my approach here.
:END:
#+begin_src emacs-lisp :tangle yes
(after! projectile
  (add-to-list 'projectile-project-root-files "pyvenv.cfg")
  (add-to-list 'projectile-project-search-path
               `(,(concat (file-name-as-directory (getenv "HOME")) ".local/pipx/venvs") . 1)))
#+end_src

*** STRT [#B] Integrate Pipenv with projectile :bug:
For some reason, the =:lang python= module disables ~pipenv-with-projectile~, so
I want to re-enable that here.

_Notes:_
1. ~use-package-hook!~ is needed to reconfigure the ~use-package!~ block in the
   module's original configuration.
2. The ~:pre-init~ section must return ~nil~ in order to override (rather than
   just append to) the original ~:init~ section.
3. How I have Doom Emacs configured, all ~use-package-hook!~ forms *MUST* be
   tangled to =early-init.el=.

#+begin_src emacs-lisp :tangle no
(use-package-hook! pipenv
  :pre-init
  (setq pipenv-with-projectile t)
  nil)
#+end_src

_Verdict_:
+ Unfortunately, the above does not seem to work for whatever reason.
+ Whenever a project is switched, the ~projectile-after-switch-project-hook~
  should run, but it doesn't seem to.
  - This can be seen in the modeline (the virtual environment is still shown in
    workspaces that do not use Pipenv or even Python).
+ Might need to add hooks for ~persp~ mode
  - Doom Emacs does not utilize ~persp-projectile~, so these hooks must be
    manaully set.
+ See the whole discussion here: https://github.com/hlissner/doom-emacs/issues/1666
  - Might want to just use the =:tools direnv= as Henrik suggested

#+begin_src emacs-lisp :tangle no
(defun pipenv-activate-projectile ()
  "Activate integration of Pipenv with Projectile."
  (add-hook
   'projectile-after-switch-project-hook
   (lambda () (funcall pipenv-projectile-after-switch-function))))
#+end_src

*** HOLD [#C] Set up debugging :feat:
+ Holding until I complete the following: [[*Fix DAP mode error message][Fix DAP mode error message]]
+ https://docs.doomemacs.org/latest/modules/tools/debugger/

#+begin_src emacs-lisp :tangle yes
(after! dap-mode
  (setq dap-python-debugger 'debugpy))
#+end_src

** qt [0/0] :ARCHIVE:
#+begin_quote
This module provides language functionality for [[https://qt.io][Qt]] specific files.
#+end_quote

** racket [1/1]
#+begin_quote
This module provides integration for [[https://github.com/greghendershott/racket-mode][racket-mode]].
#+end_quote

*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/racket` module
brew install --cask racket
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/racket` module
sudo dnf -y install racket
raco pkg install --auto racket-langserver
#+end_src

** raku [0/0] :ARCHIVE:
#+begin_quote
This module adds a major mode and flycheck for Raku.
#+end_quote

** rest [0/0]
#+begin_quote
This module adds [[https://en.wikipedia.org/wiki/Representational_state_transfer][REST]] support.
#+end_quote

** rst [0/0]
** ruby [0/0] :ARCHIVE:
#+begin_quote
This module add Ruby and optional Ruby on Rails support to Emacs.
#+end_quote

** rust [2/3]
#+begin_quote
This module adds support for the Rust language and integration for its tools,
e.g. ~cargo~.
#+end_quote

*** OKAY [#A] Install prerequisites :feat:
**** OKAY macOS
#+begin_src sh :tangle no
# Install prerequisites for `lang/rust` module
#+end_src

**** DONE Fedora
From an official [[https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html][Rust Blog post]] published on July 1, 2022:
#+begin_quote
The Rust Language Server (RLS) is being deprecated in favor of rust-analyzer.
#+end_quote

Unfortunately, ~rust-analyzer~ cannot be installed on Fedora via ~dnf~ or
another packager that can be installed via ~dnf~ (such as ~cargo~). Instead,
~rust-analyzer~ can be installed via ~rustup~, which is officially installed via
a ~curl~-to-~sh~ command line. I really hate that method of software
installation, but there's no easy alternative at the moment.

References:
+ [[https://www.rust-lang.org/tools/install][Official installation documentation for Rust]]
  - [[https://www.reddit.com/r/rust/comments/dk35e6/rusts_install_instructions_of_curltobash_is/][Discussion of Rust installation method on Reddit]]
+ [[https://rust-analyzer.github.io/manual.html#installation][Official installation documentation for rust-analyzer]]

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/rust` module
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
    | sh -s -- --no-modify-path --quiet -y
cargo install cargo-check
rustup component add rustfmt-preview clippy-preview

## rust-analyzer
rustup component add rust-src
rustup +nightly component add rust-analyzer-preview
ln -s ~/.rustup/toolchains/nightly-*/bin/rust-analyzer ~/.cargo/bin
#+end_src

Another snag that I ran into is that =lsp-mode= apparently [[https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#debugger-not-available][does not]] provide
=dap-mode= integration for ~rust-analyzer~, but it [[https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-rls/#debugger-yes][does]] provide =dap-mode=
integration for ~rls~. I would really like a debugger for Rust (especially given
how new I am to the language), so I will also install ~rls~. That said, I'll
still keep ~rust-analyzer~ around so that I can easily switch back to it.

#+begin_src sh :tangle install/fedora.sh
## rls
rustup component add rls rust-analysis rust-src
#+end_src

References:
+ [[https://github.com/rust-lang/rls#setup][Official installation documentation for rls]]

*** DONE [#C] Open =Cargo.lock= files as read-only TOML config files :feat:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist '("/Cargo\\.lock\\'" . conf-toml-mode))
(pushnew! auto-minor-mode-alist '("/Cargo\\.lock\\'" . read-only-mode))
#+end_src

*** TODO [#B] Get debugging to work :feat:
Reference: https://gagbo.net/post/dap-mode-rust/

1. Install =lsp-mode=, =dap-mode=, =gdb=, and =rust-analyzer=
2. Execute the following elisp:
   #+begin_src emacs-lisp :tangle no
   (setq dap-cpptools-extension-version "1.5.1")

   (with-eval-after-load 'lsp-rust
     (require 'dap-cpptools))

   (with-eval-after-load 'dap-cpptools
     ;; Add a template specific for debugging Rust programs.
     ;; It is used for new projects, where I can M-x dap-edit-debug-template
     (dap-register-debug-template "Rust::CppTools Run Configuration"
                                  (list :type "cppdbg"
                                        :request "launch"
                                        :name "Rust::Run"
                                        :MIMode "gdb"
                                        :miDebuggerPath "rust-gdb"
                                        :environment []
                                        :program "${workspaceFolder}/target/debug/hello / replace with binary"
                                        :cwd "${workspaceFolder}"
                                        :console "external"
                                        :dap-compilation "cargo build"
                                        :dap-compilation-dir "${workspaceFolder}")))

   (with-eval-after-load 'dap-mode
     (setq dap-default-terminal-kind "integrated") ;; Make sure that terminal programs open a term for I/O in an Emacs buffer
     (dap-auto-configure-mode +1))
   #+end_src
3. =M-x dap-cpptools-setup=
4. Open a project and =M-x dap-edit-debug-template= to set up the template

** scala [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.scala-lang.org][scala]] and [[https://www.scala-sbt.org/][sbt]] support to Doom Emacs.
#+end_quote

** scheme [0/0] :ARCHIVE:
#+begin_quote
This module provides an environment for hacking and having fun in scheme. It is
powered by [[https://www.nongnu.org/geiser/geiser_1.html#introduction][geiser]].
#+end_quote

** sh [5/9]
#+begin_quote
This module adds support for shell scripting languages.
#+end_quote

*** TODO [#A] Install prerequisites :feat:
Still need to install PowerShell language server. References:

+ =lsp-pwsh=
+ https://emacs-lsp.github.io/lsp-mode/page/lsp-pwsh/
+ https://github.com/PowerShell/PowerShellEditorServices

**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/sh` module
brew install bash zsh fish powershell bashdb zshdb shellcheck
npm install -g bash-language-server
#+end_src

**** STRT Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/sh` module
sudo dnf -y install bash zsh fish powershell ShellCheck
npm install -g bash-language-server

## FIXME bashdb
## This does not work because there is no version of bashdb that matches the
## current version of bash on my system (my bash is too new)
# mkdir -p "$HOME/.local/src/bashdb"
# version=5.0-1.1.2
# [ -d "$HOME/.local/src/bashdb/bashdb-$version" ] || {
#     url=https://sourceforge.net/projects/bashdb/files/bashdb/"$version"/bashdb-"$version".tar.gz/download
#     curl -Lo- "$url" | tar -C "$HOME/.local/src/bashdb" -xzf -
# }

## TODO zshdb
#+end_src

*** DONE [#A] Assume Bourne Shell by default :tweak:
#+begin_src emacs-lisp :tangle yes
(setq-default sh-shell-file "/bin/sh")
#+end_src

*** DONE [#B] Disable error reporting in sh-mode buffers :tweak:
LSP is still useful for other things, but I get annoyed with the error messages
and indicators in ~sh-mode~.

#+begin_src emacs-lisp :tangle yes
;; Prevent flycheck from being automatically enabled
(if (or (not (boundp 'flycheck-global-modes))
        (not (eq 'not (car flycheck-global-modes))))
    (setq flycheck-global-modes '(not sh-mode))
  (let ((modes (cdr flycheck-global-modes)))
    (setcdr flycheck-global-modes (pushnew! modes 'sh-mode))))

;; Prevent lsp diagnostics from being enabled
(if (boundp 'lsp-diagnostics-disabled-modes)
    (pushnew! lsp-diagnostics-disabled-modes 'sh-mode)
  (setq lsp-diagnostics-disabled-modes '(sh-mode)))

;; Don't bother checking for an LSP diagnostics provider in sh-mode
(setq-hook! 'sh-mode-hook
  lsp-diagnostics-provider :none)
#+end_src

*** DONE [#C] Filename-mode associations :tweak:
#+begin_src emacs-lisp :tangle yes
(pushnew! auto-mode-alist
          '("/\\.config/\\(shell\\|bash\\)/.+" . sh-mode)
          '("\\.\\(env\\|cygport\\)\\'" . sh-mode))
#+end_src

*** DONE [#C] Enable ~outline-minor-mode~ in ~sh-mode~ :feat:
~outline-regexp~ is set to ~"###"~ in ~sh-mode~, so by enabling
~outline-minor-mode~, we can fold sections of code delimited by comments
starting with three hash characters (point must be on the header comment).

#+begin_src emacs-lisp :tangle yes
(add-hook 'sh-mode-local-vars-hook #'outline-minor-mode)
#+end_src

*** DONE [#C] Do not run ~lsp!~ in ZSH buffers :bug:
There is no language server for ZSH, so there should be no attempt to activate
LSP in ZSH buffers. The following message always appears when I open ZSH
initialization files (e.g. =~/.config/zsh/.zshrc=) and when editing an
interactive ZSH command line via =emacsclient=:

#+begin_example
LSP :: There are no language servers supporting current mode `sh-mode' registered with `lsp-mode'.
This issue might be caused by:
1. The language you are trying to use does not have built-in support in `lsp-mode'. You must install the required support manually. Examples of this are `lsp-java' or `lsp-metals'.
2. The language server that you expect to run is not configured to run for major mode `sh-mode'. You may check that by checking the `:major-modes' that are passed to `lsp-register-client'.
3. `lsp-mode' doesn't have any integration for the language behind `sh-mode'. Refer to https://emacs-lsp.github.io/lsp-mode/page/languages and https://langserver.org/ .
4. You are over `tramp'. In this case follow https://emacs-lsp.github.io/lsp-mode/page/remote/.
5. You have disabled the `lsp-mode' clients for that file. (Check `lsp-enabled-clients' and `lsp-disabled-clients').
You can customize `lsp-warn-no-matched-clients' to disable this message.
#+end_example

The fix is to only activate LSP when the shell is Bourne or Bash:

#+begin_src emacs-lisp :tangle yes
(after! sh-script
  (when (modulep! :lang sh +lsp)
    (remove-hook 'sh-mode-local-vars-hook #'lsp!)
    (add-hook 'sh-mode-local-vars-hook
              (defun my/sh-mode-lsp-maybe ()
                "Activate LSP in `sh-mode' if possible."
                ;; Taken from `lsp-bash-check-sh-shell'
                (and (memq major-mode '(sh-mode bash-ts-mode))
                     (memq sh-shell '(sh bash))
                     (lsp!)))
              'append)))
#+end_src

*** STRT [#A] Enable ~hs-minor-mode~ in ~sh-mode~ using Vim fold markers :feat:
I personally use Vim fold markers as a folding mechanism in shell scripts. The
two most obvious methods to achieve that using Doom's =:editor fold= module are
as follows:

1. ~vimish-fold-marks~ in =vimish-fold=
2. ~hs-special-modes-alist~ =hideshow=

Doom already appears to be using the second method for ~vimrc-mode~, so I'll do
the same thing for now:

#+begin_src emacs-lisp :tangle yes
(add-to-list 'hs-special-modes-alist
             '(sh-mode "{{{" "}}}" "#"))
#+end_src

Note that this method does *not* allow nested fold markers, even when
~hs-allow-nesting~ is non-nil. Additionally, I have yet to find a way to achieve
folding with numbered fold markers such as ~{{{1~ and ~}}}1~. Ideas include:

1. Advising functionality in =vimish-fold= or =hideshow= (like I did with
   ~markdown-mode~ to support folding code blocks)

2. Add a fourth argument to the ~sh-mode~ entry of ~hs-special-modes-alist~ to
   define a custom ~hs-forward-sexp-func~ (like what Doom did for the
   ~yaml-mode~ entry of ~hs-special-modes-alist~)

3. Install =origami= and define a ~sh-mode~ entry for ~origami-parser-alist~
   (however, I would like to avoid installing another package)

The second option seems the most alluring at the moment. If I get that to work,
I would probably want to refactor how I implemented code block folding for
~markdown-mode~, as well.

*** STRT [#C] Edit the current region in an indirect buffer :feat:
Shell scripts often include nested scripts in subshells, and it would be nice to
have the =C-'= keybinding take you to an indirect buffer to edit the subshell.
Some examples of such subshells are shown below:

#+begin_src sh :eval no :tangle no
(
    echo 'this is a subshell'
)
foo=$(
    echo 'this is a subshell'
)
bar=`
    echo 'this is a subshell'
`
#+end_src

For now, I will just create an =evil= command to edit the current region in an
indirect buffer if one is selected.

#+begin_src emacs-lisp :tangle yes
(map! :v "C-c '" #'edit-indirect-region)
#+end_src

*** TODO [#B] Improve syntax highlighting for ZSH :tweak:
For an example of bad syntax highlighting, open =~/.config/zsh/.zshrc=.

** sml [0/0] :ARCHIVE:
#+begin_quote
This module has no description yet.
#+end_quote

** solidity [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://github.com/ethereum/solidity][Solidity]] support through [[https://github.com/ethereum/emacs-solidity][solidity-mode]]
#+end_quote

** swift [0/0] :ARCHIVE:
** terra [0/0] :ARCHIVE:
** web [1/2]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/web` module
brew install tidy-html5
npm install -g js-beautify stylelint
npm install -g vscode-html-languageserver-bin vscode-css-languageserver-bin
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/web` module
sudo dnf -y install tidy
npm install -g js-beautify stylelint
npm install -g vscode-html-languageserver-bin vscode-css-languageserver-bin
#+end_src

*** TODO [#B] Indent HTML by 2 spaces :tweak:
Currently, I achieve this by adding the following text to an =.editorconfig=
file in directory trees containing HTML files that I want to edit:

#+begin_src editorconfig-conf
[*.html]
indent_style = space
indent_size = 2
#+end_src

However, this solution will not work for HTML buffers that are
non-file-visiting. Review the =editorconfig= package to see how it interprets
indentation parameters for =web-mode=, and do what it does.

** yaml [5/6]
:PROPERTIES:
:CATEGORY: doom/yaml
:END:
#+begin_quote
This module provides support for the [[https://yaml.org/][YAML file format]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/yaml` module
npm install -g yaml-language-server
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/yaml` module
npm install -g yaml-language-server
#+end_src

*** DONE [#A] Download the schema definitions if we don't have them already :feat:
I /think/ this is working. However, I have a note from my "illiterate" config
saying that the implementation of ~lsp-yaml-download-schema-store-db~ is buggy.

#+begin_src emacs-lisp :tangle yes
(after! lsp-yaml
  (let ((f lsp-yaml-schema-store-local-db))
    (unless (file-exists-p f)
      (mkdir (file-name-directory f) t)
      (lsp-yaml-download-schema-store-db))))
#+end_src

*** DONE [#A] Use tree-sitter with YAML :feat:hack:
This currently requires [[*Unpin =tree-sitter-langs=][unpinning tree-sitter-langs]].

#+begin_src emacs-lisp :tangle yes
(add-hook 'yaml-mode-local-vars-hook #'tree-sitter! 'append)
#+end_src

*** DONE [#B] Allow YAML schemas to be decided in .dir-locals.el :tweak:
#+begin_src emacs-lisp :tangle yes
(put 'lsp-yaml-schemas 'safe-local-variable #'always)
#+end_src

*** DONE [#B] Display line numbers in YAML mode :tweak:
~yaml-mode~ is derived from ~text-mode~, not ~prog-mode~, so we need to
explicitly enable line numbers.

#+begin_src emacs-lisp :tangle yes
(setq-hook! 'yaml-mode-hook
  display-line-numbers t)
#+end_src

*** TODO [#A] Fix output from LSP server :bug:
The YAML LSP server is outputting a bunch of entity-encoded characters for some
reason, which is completely unreadable. *UPDATE*: This is only the case with
certain schemas.

** zig [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://ziglang.org/][Zig]] support, with optional (but recommended) LSP support via
[[https://github.com/zigtools/zls][zls]].
#+end_quote

* :email
** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :email
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** mu4e [0/1]
#+begin_quote
This module makes Emacs an email client, using ~mu4e~.
#+end_quote

*** TODO [#B] Set up mu4e with work email :feat:
This should probably be done in a separate gitignored file (=custom.el=) for
security's sake.

** notmuch [0/0] :ARCHIVE:
#+begin_quote
This module turns Emacs into an email client using ~notmuch~.
#+end_quote

** wanderlust [0/0] :ARCHIVE:
* :app
#+begin_quote
Application modules are complex and opinionated modules that transform Emacs
toward a specific purpose. They may have additional dependencies and *should be
loaded last*, before =:config= modules.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :app
#+end_src

** Miscellany [1/5]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `app/Miscellany`
sudo dnf -y install w3m
#+end_src

*** STRT [#A] Install packages :module:
I've started looking through all of the packages in ~package-list-packages~ and
have listed some commented-out packages below that I would like to install.
*UPDATE*: It got late, so I stopped right before the =dired-*= packages.

#+begin_src emacs-lisp :tangle packages.el
;;; Music playback
;;(package! bluesound)
;;(package! bongo)
;;(package! counsel-spotify)
;;(package! dionysos)
;;(package! lyrics)
;;(package! lyrics-fetcher)

;;; Music creation
;;(package! abc-mode)
;;(package! csound-mode)
;;(package! metronome)

;;; Fun and games
;;(package! crossword)
;;(package! dad-joke)
;;(package! dilbert)

;;; Weather
(package! noaa)
;;(package! aqi)

;;; Clocks and timers
;; TODO Configure `world-clock'
;;(package! countdown)

;;; Ebooks
(package! nov)
;;(package! sicp)

;;; Browsing
(package! w3m) ;; Better than `eww' IMO
;;(package! arxiv-mode)
;;(package! devdocs-browser)

;; Packaging
;;(package! archive-rpm)
;;(package! conventional-changelog)

;; System configuration
;;(package! crontab-mode) ;; Beware of existing entry in `auto-mode-alist'
;;(package! daemons)
;;(package! etc-sudoers-mode)
;;(package! su)
;;(package! udev-mode)

;; System
;;(package! backlight)
;;(package! battery-notifier)
;;(package! bluetooth)
;;(package! desktop-environment)

;; External programs
;;(package! desktop-mail-user-agent)

;; Inferior processes
;;(package! detached)

;; Jupyter
;; REVIEW jupytext: https://jupytext.readthedocs.io/en/latest/
;;(package! code-cells)

;; Kubernetes
(package! kubel)      ;; interaction with pods
(package! kubernetes) ;; interaction with a cluster
(when (modulep! :editor evil +everywhere)
  (package! kubel-evil)
  (package! kubernetes-evil))

;; Git
;;(package! blamer)
;;(package! browse-at-remote)
;;(package! magit-annex)
;;(package! magit-lfs)

;; Projects
;;(package! bookmark-in-project)

;; Logging
;;(package! logview)
;;(package! cabledolphin)

;; Test-driven development
;;(package! cov)

;; Diffs
;;(package! diff-ansi)
;;(package! diffview)

;; Self-improvement
;;(package! leetcode)
;;(package! metrics-tracker)

;; Finance
;;(package! ledger-mode)
;;(package! btc-ticker)
;;(package! coin-ticker)

;; Social
;;(package! mastadon)
#+end_src

*** STRT [#A] Configure kubel :feat:module:
+ [X] Open k8s manifest buffers in ~k8s-mode~
+ [X] Activate =kubel-evil= before =kubel=
+ [ ] Scroll to top of resource buffers after they are populated
  - =kubel= attempts to scroll to the top of the buffers before they are
    populated, I end up needing to scroll to the top myself.
  - Might have to wait for a process to finish
    + ~kubel--describe-resource~
    + ~kubel--exec~
    + ~kubel--sentinel~
    + =SPC h i g m elisp RET g m Sentinels RET=

#+begin_src emacs-lisp :tangle yes
;; REVIEW Compare `kubel' with `kubernetes-el'
;; - kubel is great for working with pods (listing, examining, modifying, logging, and interacting)
;; - kubernetes-el might be closer to Lens in terms of functionality, but I have not tried it yet
(use-package! kubel
  :defer t
  :config
  (defadvice! my/activate-k8s-mode-a (&rest _)
    :after #'kubel-yaml-editing-mode
    (k8s-mode)))

(use-package! kubel-evil
  :after kubel
  :when (modulep! :editor evil +everywhere))
#+end_src

*** STRT [#A] Configure kubernetes :feat:module:
+ [X] Activate =kubernetes-evil= before =kubernetes=
+ [X] Display pods that are done executing
+ [-] Do not automatically refresh
  - [X] https://github.com/kubernetes-el/kubernetes-el/issues/100
  - [-] https://github.com/kubernetes-el/kubernetes-el/issues/286
+ [ ] Use similar keybindings that Doom Emacs does for Magit
+ [ ] Compare =kubernetes= to Lens; missing features:
  - Display resources across all namespaces
  - Display the following types of resources:
    - DaemonSets
    - ...

#+begin_src emacs-lisp :tangle yes
(use-package! kubernetes
  :defer t
  :init
  (defvar +kubernetes-workspace-name "*kubernetes*")
  :commands (kubernetes-overview)
  :config
  (setq ;; Disable automatic refresh (call `kubernetes-refresh' manually)
        kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600

        ;; Display pods even if they are done running
        kubernetes-pods-display-completed t)

  (setq-hook! 'kubernetes-overview-mode-hook
    revert-buffer-function (lambda (&rest _) (kubernetes-refresh)))

  (defun =kubernetes ()
    "Activate (or switch to) `kubernetes' in its workspace."
    (interactive)
    (if (modulep! :ui workspaces)
        (progn
          (+workspace-switch +kubernetes-workspace-name t)
          (unless (memq (buffer-local-value 'major-mode
                                            (window-buffer
                                             (selected-window)))
                        ;; TODO Add more major modes
                        '(kubernetes-overview-mode))
            (doom/switch-to-scratch-buffer)
            (kubernetes-overview))
          (+workspace/display))
      (setq +kubernetes--wconf (current-window-configuration))
      (delete-other-windows)
      (switch-to-buffer (doom-fallback-buffer))
      (kubernetes-overview))))

(use-package! kubernetes-evil
  :after kubernetes-modes
  :when (modulep! :editor evil +everywhere))
#+end_src

*** STRT [#C] Configure w3m :tweak:module:
+ [X] Remap =eww= bindings to use =w3m= instead
+ [X] Jump to the next form when entering evil insert state
+ [-] Add mappings for ~w3m-lnum-mode~
  - Can also just use =SPC s l= (~link-hint-open-link~)
  - Only benefit to ~w3m-lnum-mode~ is the inclusion of fields in candidates
+ [-] Redefine some mappings from =evil-collection=
  - [X] Edit the form at point with =i=
  - [ ] Add more...

#+begin_src emacs-lisp :tangle yes
;; Open online documentation in `w3m'
(setq +lookup-open-url-fn #'w3m-browse-url)

(when (modulep! :tools lookup +docsets)
  (setq dash-docs-browser-func #'w3m))

;; Use Google as your home page
(setq w3m-home-page "https://www.google.com/")

;; Do not use tabs
(setq! w3m-display-mode 'plain)

;; Use the header line to display the page title and location
(setq! w3m-use-tab-line nil
       w3m-use-header-line-title t
       w3m-use-header-line t)

;; Reverting the buffer reloads the page
(setq-hook! 'w3m-mode-hook
  revert-buffer-function (lambda (&rest _) (w3m-reload-this-page)))

(defun my/w3m-form-at-point-p ()
  (get-text-property (point) 'w3m-action))

(defun my/w3m-edit-form-at-point ()
  "Edit the form at point"
  (interactive)
  (if (my/w3m-form-at-point-p)
      (w3m-view-this-url)
    (message "No form at point")))

(after! evil-collection-w3m
  (evil-collection-define-key 'normal 'w3m-mode-map
    "i" #'my/w3m-edit-form-at-point))
#+end_src

Now let's make it look pretty:

#+begin_src emacs-lisp :tangle yes
(after! w3m
  (require 'diff)
  (require 'info)
  (custom-set-faces!
    ;; Links
    '(w3m-anchor :inherit link)
    '(w3m-anchor-arrived :inherit link-visited)
    ;; Edited text
    '(w3m-strike-through :inherit diff-removed)
    '(w3m-insert :inherit diff-added)
    ;; Header line
    '(w3m-header-line-background :inherit header-line)
    '(w3m-header-line-content :inherit info-header-xref)
    '(w3m-header-line-title :inherit header-line)
    ;; Images
    '(w3m-image :inherit info-menu-star)
    '(w3m-image-anchor :inherit info-index-match)))

(after! w3m-form
  (require 'custom)
  (custom-set-faces!
    ;; Form fields
    '(w3m-form :inherit widget-field)
    '(w3m-form-inactive :inherit widget-inactive)
    ;; Form buttons
    '(w3m-form-button :inherit custom-button)
    '(w3m-form-button-mouse :inherit custom-button-mouse)
    '(w3m-form-button-pressed :inherit custom-button-pressed)))
#+end_src

** calendar [0/0] :ARCHIVE:
#+begin_quote
This module adds a calendar view for Emacs, with org and google calendar sync
support.
#+end_quote

** emms [0/0] :ARCHIVE:
#+begin_quote
This module enables Emacs to be used as a music player. It uses [[https://www.musicpd.org/][mpd]] as a backend
server and [[https://musicpd.org/clients/mpc/][mpc]] to update your music database.
#+end_quote

** everywhere [0/1]
#+begin_quote
This module adds system-wide popup Emacs windows for quick edits.
#+end_quote

*** TODO [#A] Install prerequisites :feat:
**** WAIT macOS
***** WAIT Create an automator service to run a command
****** DONE Manual instructions
https://support.apple.com/guide/automator/use-a-shell-script-action-in-a-workflow-autbbd4cc11c/mac
#+begin_quote
_Use a shell script action in an Automator workflow on Mac_

You can extend the power of Automator on Mac by using shell commands within a
workflow. For example, you can string several bash shell commands together to
perform complex tasks, and then pass the results to a window.

1. Choose File > New.
2. Select a document type, then click Choose.
3. Type Run Shell Script in the search field, then select Run Shell Script in
   the search results.
4. Drag the Run Shell Script action into your workflow.
5. Click the Shell pop-up menu, then choose the shell environment.
6. Enter your shell commands in the command field.
7. Test your workflow before saving it.
#+end_quote

****** WAIT Use AppleScript to create an Automator Workflow
:LOGBOOK:
- Note taken on [2021-09-28 Tue 11:31] \\
  Waiting for a response on this StackExchange question that I just posted:
  https://apple.stackexchange.com/questions/428066/how-to-create-a-new-automator-workflow-via-applescript
:END:
https://support.apple.com/guide/automator/control-automator-with-scripts-autf238a3e24/2.10/mac/11.0
#+begin_quote
_Control Automator with scripts on Mac_

Automator is a “scriptable” application and can be controlled by AppleScript and
JavaScript for Automation commands. You can execute workflows, create new
workflows, add actions to workflows, get the values that are set within actions,
and much more.

To see Automator commands available to scripts, use Script Editor, included with
macOS.

1. In the Finder, open the Utilities folder in the Applications folder.
2. The Script Editor icon appears in the Utilities folder.
3. Open another Finder window, then open the Applications folder.
4. The Automator icon appears in the Applications folder.
5. Drag the Automator icon onto the Script Editor icon to open the ScriptEditor
   dictionary for Automator.
#+end_quote

Start of my idea for the AppleScript:
#+begin_src applescript :tangle no
on CreateShellScriptAutomatorWorkflow(shell, script, name)
    -- Need to start with Automator closed.
    if running of application "Automator" then
        try
            tell application "Automator" to quit
        on error
            do shell script "killall Automator"
        end try
    end if
    repeat while running of application "Automator" is true
        delay 0.1
    end repeat
    -- Open Automator.
    tell application "Automator"
        activate
        (*
            Now what?
        ,*)
    end tell
end CreateShellScriptAutomatorWorkflow
#+end_src

The following code block should produce the contents of the ~#!/bin/sh~ script:
#+begin_src emacs-lisp :tangle no
(let* ((emacsclient (executable-find "emacsclient"))
       (server-flag (if server-use-tcp "-f" "-s"))
       (server-dir (if server-use-tcp server-auth-dir server-socket-dir))
       (server-file (expand-file-name server-name server-dir)))
  (format "%s %s %s -e '(emacs-everywhere)'" emacsclient server-flag server-file))
#+end_src

***** HOLD Bind the service to a keybinding
****** DONE Manual instructions
https://www.howtogeek.com/286332/how-to-run-any-mac-terminal-command-with-a-keyboard-shortcut/
#+begin_quote
_How to Run Any Mac Terminal Command With a Keyboard Shortcut_
(...)
Save your workflow with a name you’ll recognize, and we’re done with Automator.

Next, head to System Preferences > Keyboard > Shortcuts. In the left panel click
“Services,” and scroll down until you see the service you just created—it should
be under the “General” section.
#+end_quote

****** HOLD Use AppleScript to assign the Workflow to a keybinding
******* DONE Create a script to do this
https://github.com/eeowaa/stow-dotfiles/blob/main/macos/.local/bin/service-shortcut

******* HOLD Call the script
Should eventually tangle to =install/macos.sh= once I have created the Workflow
via AppleScript:

#+begin_src sh :tangle no
service-shortcut 'Emacs everywhere' 4 e # Command+Option+E
#+end_src

**** TODO Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `app/everywhere` module
# XXX This will only work for X sessions (not Wayland)
sudo dnf -y install xclip xdotool xprop xwininfo
#+end_src

***** DONE Get this working on GNOME
When I try this on GNOME, I keep getting messages like this:
: File no longer exists: /tmp/emacs-everywhere-20220715-204508-libreoffice-writer, write buffer to file? (y or n) n

*UPDATE*: It is working for me now on GNOME X11. Maybe it's because I downgraded
to the Emacs 28.1 packaged by Fedora instead of using the COPR repo for Emacs 29
(dev). Still haven't tried with Wayland in a while, though.

***** WAIT Get this working on Wayland
+ Currently a work-in-progress: https://github.com/tecosaur/emacs-everywhere/issues/50
+ I could probably help with this...

***** TODO Automatically map ~doom everywhere~ to a key on GNOME
For now, I just manually mapped it to =Super-D=, but I would like to automate
that. I'm sure it's not too difficult.

** gpt [0/3] :eeowaa:module:
*** TODO Documentation
*** STRT Packages
The two most promising packages at this time seem to be =chatgpt-shell= and
=gptel=. The former is currently more popular, but the latter seems more in line
with my own philosophy of using Emacs.

#+begin_src emacs-lisp :tangle packages.el
(package! gptel)
#+end_src

*** STRT Configuration
#+begin_src emacs-lisp :tangle yes
(use-package! gptel
  :defer t
  :config
  (defun my/gptel-modify-header-line-h ()
    "Replace \"*ChatGPT*\" with \"Status:\" in the header line of a `gptel-mode' buffer."
    (setcar header-line-format
            (concat (propertize " " 'display '(space :align-to 0))
                    "Status:")))

  (defun my/gptel-wrap-lines-h ()
    (if (modulep! :editor word-wrap)
        (+word-wrap-mode)
      (toggle-truncate-lines -1)))

  (add-hook! gptel-mode #'my/gptel-modify-header-line-h
                        #'my/gptel-wrap-lines-h)

  ;; Do not stream responses
  (setq gptel-stream nil)

  (map! :map gptel-mode-map
        "C-c C-g" #'gptel-menu))
#+end_src

** irc [3/5]
#+begin_quote
This module turns Emacs into an IRC client, capable of OS notifications.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `app/irc` module
brew install gnutls
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `app/irc` module
sudo dnf -y install gnutls
#+end_src

*** DONE [#A] Configure =circe= for Libera.Chat :doc:
This should probably be done in a separate gitignored file (=custom.el=) for
security's sake.

*** DONE [#B] Find some interesting channels :doc:
+ Emacs
  - ~#emacs~
  - ~#org-mode~
  - ~#org-roam~
  - ~#systemcrafters~
  - ~#systemcrafters-help~
+ Linux
  - ~#gnu~
  - ~#linux~
  - ~#fedora~
  - ~#systemd~
  - ~#rpm-ecosystem~
+ Programming
  - ~##programming~
  - ~##typescript~
  - ~#python~
  - ~#bash~
  - ~#git~
+ Infrastructure
  - ~##infra-talk~
  - ~##aws~
  - ~#ansible~
  - ~#docker~
  - ~#networking~

*** TODO [#B] Find an easier way to search for channels :tweak:doc:
This is my current method of searching:

1. Manually enter the following query in a Circe Server buffer:
   : /msg alis LIST *searchterm*

2. Switch over to the newly-created ~alis@irc.libera.chat~ buffer to view
   results. From there, I can enter simple queries like this:
   : LIST *searchterm*

3. Use =SPC , alis RET= to return to that buffer when I want to perform another
   search. Back and forth...

I would much prefer a single =circe= command to do this rather than that whole
song and dance. See also: https://libera.chat/guides/findingchannels

*** TODO [#C] Figure out how to display inline images :tweak:
** rss [4/4]
#+begin_quote
Read RSS feeds in the comfort of DOOM (Emacs)
#+end_quote

*** DONE [#A] Automatically update feed when opening =elfeed= :tweak:
#+begin_src emacs-lisp :tangle yes
(after! elfeed
  (add-hook! elfeed-search-mode #'elfeed-update))
#+end_src

*** OKAY [#A] Undo breakage caused by unfortunate pull request :tweak:
[[https://github.com/hlissner/doom-emacs/pull/5523][This PR]] broke my config. Here is the fix:

#+begin_src emacs-lisp :tangle packages.el
(package! elfeed-goodies :disable t)
#+end_src

If [[https://github.com/hlissner/doom-emacs/pull/5603][this other PR]] gets merged, I may be able to remove this. *UPDATE*: The PR got
closed without being merged.

*** DONE [#B] Allow widening of the description column :hack:tweak:
#+begin_src emacs-lisp :tangle yes
(after! elfeed
  ;; Do not truncate RSS entry titles
  (setq elfeed-search-title-max-width 1000)

  ;; Do not truncate RSS entry tags (just need to shift left by 2 characters)
  (defadvice! my/elfeed-format-column-a (str width &optional align)
    "Return STRING truncated or padded to WIDTH - 2 following alignment.
ALIGN should be a keyword :left or :right."
    :override #'elfeed-format-column
    (if (<= width 0)
        ""
      (format (format "%%%s%d.%ds"
                      (if (eq align :left) "-" "")
                      (- width 2)
                      (- width 2))
              str))))
#+end_src

*** DONE [#C] Leave point on the current entry in the ~*elfeed-search*~ buffer :tweak:
By default, point in ~*elfeed-search*~ is always left on the entry /beneath/ the
currently-displayed entry in ~*elfeed-entry*~, regardless of navigation via
=C-j= or =C-k=. This is only annoying because I would like for the current entry
to be highlighted in ~*elfeed-search~ via =hl-line=.

#+begin_src emacs-lisp :tangle yes
(after! elfeed
  (setq elfeed-search-remain-on-entry t))
#+end_src

** twitter [0/0] :ARCHIVE:
#+begin_quote
Enjoy twitter from emacs.
#+end_quote

* :config
#+begin_quote
Modules that configure Emacs one way or another, or focus on making it easier
for you to customize it yourself. It is best to load these last.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :config
#+end_src

** Miscellany [6/6]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Load custom config if present :doc:feat:
=~/.config/doom/custom.el= should look something like this:

#+begin_src emacs-lisp :tangle no
;;; Manual

;; Identifying information
(setq user-full-name "John Doe"
      user-mail-address "johndoe@example.com")

;; Geographic location
(setq calendar-latitude 35.0933
      calendar-longitude -98.2632
      calendar-location-name "Nowhere, OK")

;; RSS feeds
(setq elfeed-feeds
      '("https://example.com/rss.xml"))

;; IRC
(set-irc-server! "irc.libera.chat"
  `(:tls t
    :port 6697
    :nick "johndoe"
    :sasl-password (auth-source-pick-first-password
                    :host "libera.chat"
                    :user "johndoe")
    :channels ("#emacs"
               "#")))

(after! gptel
  (setq gptel-api-key "<redacted>"))

;;; Customize
#+end_src

#+begin_src emacs-lisp :tangle yes
(when (file-exists-p custom-file)
  ;; Protect the file in case it contain sensitive information
  (set-file-modes custom-file #o600)
  (load custom-file))
#+end_src

*** DONE [#A] Detect invalid config before quitting Emacs :feat:
It is very annoying to launch Emacs only to find that your configuration is
broken. In some cases, this can be prevented by warning the user about an
invalid config file before quitting Emacs, giving the user a chance to fix
problem.

#+begin_src emacs-lisp :tangle yes
(add-hook! 'kill-emacs-query-functions
  (defun my/check-config-h ()
    "Check for Doom Emacs config errors before exiting."
    (let ((config-file (expand-file-name "config.el" doom-user-dir)))
      (if (not (file-exists-p config-file))
          (y-or-n-p "WARNING: config.el does not exist! Exit anyway? ")
        (with-current-buffer (find-file-noselect config-file)
          (condition-case _ (check-parens)
            (user-error
             (cond
              ((y-or-n-p "WARNING: config.el contains unbalanced parentheses. Edit file? ")
               (pop-to-buffer (current-buffer)) nil)
              (t t)))
            (:success t)))))))
#+end_src

*** DONE [#B] Enable automatic discovery of project directories :tweak:
Doom disables this feature for performance reasons. Let's re-enable it.

#+begin_src emacs-lisp :tangle yes
(setq projectile-auto-discover t)
#+end_src

*** OKAY [#B] Add search directories for =projectile= :tweak:
Some ideas for more project directories:
- [ ] Doom Emacs source directory
- [ ] System Emacs source directory

#+begin_src emacs-lisp :tangle yes
(setq projectile-project-search-path
      (list
       ;; Standard source directories
       (cons "/usr/src" 2)
       (cons "/usr/local/src" 2)
       (cons (concat (file-name-as-directory (getenv "HOME")) ".local/src") 2)

       ;; Personal source directories
       (cons (concat (file-name-as-directory (xdg-user-dir "DOCUMENTS")) "src/work") 2)
       (cons (concat (file-name-as-directory (xdg-user-dir "DOCUMENTS")) "src/life") 2)))
#+end_src

*** DONE [#B] Remove =straight= package repos from =projectile= :tweak:
Unfortunately, the =~/.config/emacs/.local/straight/repos/*= are creeping back
in, so this isn't finished yet. Check =~/.config/emacs/core/core-projects.el= to
see how Doom configures Projectile. *UPDATE*: The following fix seems to work
again.

#+begin_src emacs-lisp :tangle yes
;; REVIEW See if there is a cleaner way to flatten the `mapcan' list result
(after! projectile
  (eval
   `(pushnew!
     projectile-globally-ignored-directories
     ,@(mapcan
        (lambda (f)
          (when (file-directory-p f)
            (list (abbreviate-file-name f))))
        (directory-files (format "%s/.local/straight/repos" doom-emacs-dir)
                                   t "\\`[^.]")))))
#+end_src

*** DONE [#C] Add ergonomic keybindings for hard-to-reach keys :module:tweak:
I do not like to put undue stress on my pinky fingers while typing, so I often
like to use alternate key chords for the Enter, Backspace, and Tab keys (I have
Control and Alt mapped to thumb keys on my keyboard).

I would like to configure Emacs to use similar key chords as terminal emulators
for these special keys. Here are some options:

+ =RET= (=<return>=)
  - Options:
    + =C-j=: This is for "electric" and "special return" commands
      - Terminal Emacs actually recognizes =C-j= as a distinct key sequence,
        although typical Bourne-compatible shells and Vim do not
      - In my opinion, too much Emacs functionality relies on this sequence and
        there is no other keybinding that does the same thing
    + =C-m=: This already works as expected
      - No configuration necessary AFIAK
+ =DEL= (=<backspace>=)
  - Options:
    + =C-h=: This is just "help", which I can achieve using =SPC h= and =M-SPC h=
      - My muscle memory might make it hard for me to forget this keybinding
      - Terminal Emacs actually recognizes =C-h= as a distinct key sequence,
        although typical Bourne-compatible shells and Vim do not
    + =C-?=: This is just "redo", which I can achieve using =M-_=
      - The corresponding "undo" keybinding is =C-_=
      - =C-x u= runs ~undo-tree-visualize~, which gives a nice interface to this
+ =TAB= (=<tab>=)
  - Options:
    + =C-i=: This is just "jump forward", which I can achieve using =C-M-,=
      - The corresponding "jump backward" keybinding is =M-,=
      - =SPC s j= runs ~+ivy/jump-list~, which gives a nice interface to this
  - Updates:
    + For some reason (either by recently upgrading Doom Emacs or by downgrading
      to Emacs 28.1), =C-M-,= is no longer mapped to ~better-jumper-jump-forward~,
      but I can just manually add this keymapping
    + =C-M-,= does not work in GNOME terminal, but it can probably be fixed
      similarly to how [[https://www.emacswiki.org/emacs/LinuxConsoleKeys][keys can be fixed in the Linux console]]

References:
+ https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-Keymaps.html#Translation-Keymaps
+ https://emacs.stackexchange.com/a/3839
+ http://xahlee.info/emacs/emacs/emacs_key-translation-map.html

#+begin_src emacs-lisp :tangle yes
;; Map C-? to DEL
(define-key key-translation-map (kbd "C-?") (kbd "DEL"))

;; Map C-i to TAB and provide an alternative mapping for `better-jumper-jump-forward'
(define-key key-translation-map (kbd "C-i") (kbd "TAB"))
(global-set-key (kbd "C-M-,") #'better-jumper-jump-forward)
#+end_src

** literate [1/3]
#+begin_quote
This module enables support for a literate config.
#+end_quote

*** DONE [#B] Tangle to =packages.el= :tweak:
I would like to make =packages.el= literate instead of "illiterate". 😉

*** TODO [#C] Link tangled blocks back to source :feat:
Refer to your old config.

*** HOLD [#C] Split up my literate config into separate files :tweak:
This can be done with ~#+INCLUDE~ directives. Doing so might make tangling
faster, but currently I don't have any problems with performance. If and when I
start to notice a problem, I'll revisit this item.

** default [10/11]
#+begin_quote
This module provides a set of reasonable defaults.
#+end_quote

*** DONE [#A] Start with ~smartparens-global-mode~ disabled :tweak:
~smartparens-global-mode~ can be toggled with =SPC t (=.

#+begin_src emacs-lisp :tangle yes
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

*** DONE [#A] Disable =smartparens= in the minibuffer, including the =evil-ex= prompt :tweak:
#+begin_src emacs-lisp :tangle yes
(after! smartparens
  (remove-hook 'eval-expression-minibuffer-setup-hook
               #'doom-init-smartparens-in-eval-expression-h)
  (remove-hook 'minibuffer-setup-hook
               #'doom-init-smartparens-in-minibuffer-maybe-h))
#+end_src

*** DONE [#A] Adjust =which-key= timing :tweak:
The default delay of 1 second is too long for my taste.

#+begin_src emacs-lisp :tangle yes
(setq which-key-idle-delay 0.5
      which-key-idle-secondary-delay 0.1)
#+end_src

*** DONE [#A] Improve builtin help :feat:
In order to increase discoverability of keybindings, I created a function for
describing where all invocations of a key sequence is.

#+begin_src emacs-lisp :tangle yes
(require 'eeowaa-help)
(define-key! help-map
  "C-f" #'find-function         ;; replaces `view-emacs-FAQ' b/c I rarely use it
  "C-l" #'find-library          ;; replaces `describe-language-environment'
  "C-v" #'find-variable
  "C-w" #'eeowaa-alternate-keys ;; replaces `describe-no-warranty' b/c I never use it
  "C-c" #'eeowaa-find-command)  ;; replaces `describe-coding-system' b/c I never use it
#+end_src

*** DONE [#B] Do not display line numbers in text mode :tweak:
#+begin_src emacs-lisp :tangle yes
(remove-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

*** DONE [#B] Do not display line numbers in lisp interaction mode :tweak:
#+begin_src emacs-lisp :tangle yes
(setq-hook! '(lisp-interaction-mode-hook doom-sandbox-emacs-lisp-mode-hook)
  display-line-numbers nil)
#+end_src

*** DONE [#B] Normalize the behavior of toggling line numbers :tweak:bug:
~doom/toggle-line-numbers~ is inconsistent with how it cycles through line
numbers, depending on whether the function has been called in the current buffer
yet. I believe this is due to how ~doom--line-number-style~ is assigned ~t~ by
default, yet gets set to ~display-line-numbers-type~ upon the first call of
~doom/toggle-line-numbers~.

I work around this issue by defining my own line-number-toggling function and
aliasing ~doom/toggle-line-numbers~ to it.

#+begin_src emacs-lisp :tangle yes
(defun my/toggle-line-numbers ()
  "Toggle line numbers.

Cycles through regular, relative and no line numbers. If you're
using Emacs 26+, and `visual-line-mode' is on, this skips relative
and uses visual instead."
  (interactive)
  (cond
   ((not display-line-numbers)
    (setq display-line-numbers t)
    (message "Switched to normal line numbers"))
   ((memq display-line-numbers '(visual relative))
    (setq display-line-numbers nil)
    (message "Switched to disabled line numbers"))
   (visual-line-mode
    (setq display-line-numbers 'visual)
    (message "Switched to visual line numbers"))
   (t
    (setq display-line-numbers 'relative)
    (message "Switched to relative line numbers"))))

(define-key! doom-leader-toggle-map
  ;; replaces `doom/toggle-line-numbers'
  "l" #'my/toggle-line-numbers)
#+end_src

*** DONE [#B] Define additional Doom search functions :feat:
#+begin_src emacs-lisp :tangle yes
(defun my/doom-help-search-source (&optional initial-input)
  "Perform a text search across all files in `doom-emacs-dir'."
  (interactive)
  (funcall (cond ((fboundp '+ivy-file-search)
                  #'+ivy-file-search)
                 ((fboundp '+vertico-file-search)
                  #'+vertico-file-search)
                 (t
                  #'ignore))
    :query initial-input
    :in doom-emacs-dir
    :prompt (format "Search source for: ")))

(defun my/doom-help-search-modules (&optional initial-input)
  "Perform a text search across all files in `doom-modules-dir'."
  (interactive)
  (funcall (cond ((fboundp '+ivy-file-search)
                  #'+ivy-file-search)
                 ((fboundp '+vertico-file-search)
                  #'+vertico-file-search)
                 (t
                  #'ignore))
    :query initial-input
    :in doom-modules-dir
    :prompt "Search modules for: "))

(define-key! help-map
  "de" #'my/doom-help-search-source
  "dM" #'my/doom-help-search-modules)
#+end_src

*** DONE [#B] Add additional file keybindings :feat:
*NOTE*: This might only work with Emacs 29+.

#+begin_src emacs-lisp :tangle yes
(when (fboundp 'find-sibling-file)
  ;; Same directory, same base file name, different extension
  (pushnew! find-sibling-rules '("\\([^/]+\\)\\..*\\'" "\\1\\..*\\'"))
  (define-key! doom-leader-file-map
    "o" #'find-sibling-file)
  (after! which-key
    (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
      (cl-pushnew `((,(format "\\`%s f o\\'" prefix-re)) nil . "Find other file")
                  which-key-replacement-alist))))
#+end_src

*** OKAY [#A] Prevent the =which-key= popop from "bouncing" :bug:doc:
:LOGBOOK:
- Note taken on [2023-01-22 Sun 16:48] \\
  I have set ~which-key-popup-type~ to ~minibuffer~ for compatibility with my new
  window management system (powered by my custom =:ui buffer-group= module). This
  had the incidental benefit of "fixing" the window bouncing, although the problem
  would probably still exist for me if I were to go back to Doom's way of
  displaying the =which-key= popup window.
:END:
**** Description
- Sometimes the window overshoots its height and settles back down to where it
  should be. This is an annoying visual distraction.
- The problem resides either within Doom's popup system or Emacs' side window
  system, and only seems to happen when the ~window-height~ or ~size~ element of
  ~display-buffer-alist~ or Doom's corresponding ~+popup--display-buffer-alist~
  is set a to a resize function such as ~fit-window-to-buffer~ or Doom's
  ~+popup-shrink-to-fit~.
- Here is the function call sequence for displaying =which-key= buffers:
  1. ~(which-key--create-buffer-and-show)~
  2. ~(which-key--show-page)~
  3. ~(which-key--show-popup act-popup-dim)~
  4. ~(funcall which-key-custom-show-popup-function act-popup-dim)~
     - lambda defined in =~/.config/emacs/modules/ui/popup/+hacks.el=
  5. ~(which-key--show-buffer-side-window act-popup-dim)~
  6. ~(+popup-display-buffer-stacked-side-window-fn ...)~
     - overrides ~display-buffer-in-side-window~
     - alist defined in ~which-key-custom-show-popup-function~ lambda and in
       ~which-key--show-buffer-side-window~:
       #+begin_src emacs-lisp :tangle no
       `((vslot . -9999)
         (select . t)
         (window-width .  ,which-key--fit-buffer-to-window-horizontally)
         (window-height . (lambda (w) (fit-window-to-buffer w nil 1)))
         (side . ,which-key-side-window-location)
         (slot . ,which-key-side-window-slot))
       #+end_src
  7. ~(window--display-buffer)~

**** Debugging ideas
- Use the Emacs debugger to step through
  ~+popup-display-buffer-stacked-side-window-fn~ when it is called. You should
  see the =which-key= window displayed at a taller height before being shrunk.
- Disable the =:ui popup= module and try to replicate the issue (if you can't,
  then the problem probably resides in Doom and not Emacs)
- Try experimenting with ~which-key-side-window-*-height~ variables

*** STRT [#B] Add additional toggle keybindings :tweak:module:
#+begin_src emacs-lisp :tangle yes
(defun my/toggle-sentence-end-double-space ()
  "Toggle 1 or 2 spaces at the end of sentences."
  (interactive)
  (if (not sentence-end-double-space)
      (progn
        (setq-local sentence-end-double-space t)
        (message "Sentences end with 2 spaces"))
    (setq-local sentence-end-double-space nil)
    (message "Sentences end with 1 space")))

;; TODO Toggle cursor hover for other tooltip applications
(defun my/toggle-cursor-hover ()
  "Toggle cursor hover to activate tooltips."
  (interactive)
  (when lsp-ui-doc-mode
    (unless (setq lsp-ui-doc-show-with-cursor
                  (not lsp-ui-doc-show-with-cursor))
      (lsp-ui-doc-hide))))

(map! :leader
      (:prefix-map ("t" . "toggle")
       :desc "Whitespace mode"       "SPC" #'whitespace-mode
       :desc "Smartparens"           "("   #'smartparens-global-mode
       :desc "Sentence spacing"      "."   #'my/toggle-sentence-end-double-space
       :desc "Auto fill"             "a"   #'auto-fill-mode
       :desc "Battery indicator"     "B"   #'display-battery-mode
       :desc "Fill column indicator" "c"   #'display-fill-column-indicator-mode
       :desc "Column highlight"      "C"   #'column-highlight-mode

       ;; FIXME The description text of "Evil goggles" is not replaced
       :desc "Cursor hover"          "g"   #'my/toggle-cursor-hover

       :desc "Hard newlines"         "h"   #'use-hard-newlines
       :desc "Line highlight"        "L"   #'hl-line-mode
       :desc "Menu bar"              "M"   #'menu-bar-mode
       :desc "Overwrite"             "o"   #'overwrite-mode
       :desc "Truncate lines"        "t"   #'toggle-truncate-lines
       :desc "Tab bar"               "T"   #'tab-bar-mode
       :desc "Visual fill column"    "|"   #'visual-fill-column-mode
       :desc "Page break lines"      "C-l" #'page-break-lines-mode

       ;; TODO: Make sure that the display text is correct
       ;; (currently, it is "Visible mode", probably put there by Doom)
       (:when (modulep! :ui vc-gutter +diff-hl)
        :desc "VCS gutter"            "v"   #'diff-hl-mode)))
#+end_src

* Footers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
