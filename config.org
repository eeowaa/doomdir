#+TITLE: Doom Emacs Literate Config
#+STARTUP:      overview
#+FILETAGS:     :doom:
#+EXCLUDE_TAGS: SCAFFOLDING ARCHIVE noexport
* Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.


;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;(package! some-package)
#+end_src

* Miscellany
** Install prerequisites [2/2]
:PROPERTIES:
:header-args: :noweb yes
:END:
#+name: github_binary_release
#+begin_src sh :exports none
github_binary_release() {
    local func='github_binary_release'
    local repo= asset= prefix= root= binary=
    while [ $# -gt 0 ]
    do
        case $1 in
        --repo)
            # A "<user>/<repo>" string to identify a GitHub repo
            repo=$2 ;;
        --asset)
            # An anchored regular expression used by `jq` for a named tarball
            asset=$2 ;;
        --prefix)
            # Directory to pass to `tar -C`
            prefix=$2 ;;
        --path)
            # Directory path within the tarball to the data root
            # NOTE: This variable cannot be named `path` due to conflict with ZSH
            root=$2 ;;
        --binary)
            # Path relative to the data root to the executable file
            binary=$2 ;;
        esac
        shift; shift
    done
    for arg in "$repo" "$asset" "$prefix" "$root" "$binary"
    do
        [ "X$arg" = X ] && {
            echo >&2 "ERROR: $func: missing argument"
            return 1
        }
    done
    local url=`
        curl -s https://api.github.com/repos/$repo/releases/latest | jq -r \
        '.assets[] | select(.name | test("^'"$asset"'$")) | .browser_download_url'
    `
    [ "X$url" = X ] && {
        echo >&2 "ERROR: $func: could not find URL"
        return 1
    }
    local canonical_path=`readlink -m "$prefix/$root"`
    [ -e "$canonical_path" ] && {
        printf "\
$func: found existing: $canonical_path
$func: (recursively) delete? [y/N]: "
        read delete
        case $delete in
        [yY]*)
            rm -rf "$canonical_path" ;;
        ,*)  echo >&2 "ERROR: $func: refusing to download"
            return 1 ;;
        esac
    }
    mkdir -p "$prefix" "$HOME/.local/bin"
    curl -Lo- "$url" | tar -C "$prefix" -xzf -
    [ -x "$canonical_path/$binary" ] || {
        echo >&2 "ERROR: $func: not an executable file: $canonical_path/$binary"
        return 1
    }
    ln -sf "$canonical_path/$binary" "$HOME/.local/bin"
}
#+end_src

*** DONE macOS
#+begin_src sh :tangle install/macos.sh
#!/bin/sh

# Install Homebrew to install packages
curl -Lo- https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash

# Install NVM to install packages
curl -Lo- https://raw.githubusercontent.com/nvm-sh/nvm/HEAD/install.sh \
    | env PROFILE=/dev/null bash

# Function to install a binary asset from the latest release of a GitHub repo
brew install jq
<<github_binary_release>>
#+end_src

*** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
#!/bin/sh

# Install NVM to install packages
curl -Lo- https://raw.githubusercontent.com/nvm-sh/nvm/HEAD/install.sh \
    | env PROFILE=/dev/null bash

# Install pipx to install packages
sudo dnf -y install pipx

# Function to install a binary asset from the latest release of a GitHub repo
sudo dnf -y install jq
<<github_binary_release>>
#+end_src

* :input
** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :input
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** chinese [0/0] :ARCHIVE:
#+begin_quote
This module adds support for traditional Chinese script by introducing two input
methods: Pinyin and Wubi.
#+end_quote

** japanese [0/0] :ARCHIVE:
#+begin_quote
This module adds support for Japanese script.
#+end_quote

** layout [0/0] :ARCHIVE:
#+begin_quote
This module provides barebones support for using Doom with non-qwerty layouts.
#+end_quote

* :completion
#+begin_quote
Modules that provide new interfaces or frameworks for completion, including code
completion.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :completion
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** company [1/1]
#+begin_quote
This module provides code completion, powered by [[https://github.com/company-mode/company-mode][company-mode]]. It is required
for code completion in many of Doom's :lang modules.
#+end_quote

*** DONE [#B] Never start completion automatically (require =C-SPC=)
#+begin_src emacs-lisp :tangle yes
(setq company-idle-delay nil)
#+end_src

This was born from a desire to prevent autocompletion of ordinary words in Org
buffers, but I decided that I don't really need autocompletion anywhere. The
following are the notes I took when pursuing my original plan:

#+begin_quote
=M-x company-capf= gives ~company-ispell~ as one completion backend in Org
buffers. I guess I'd like to have spelling completion as an option that I could
invoke using =C-SPC= (~+company/complete~), but not something that just pops up
on its own.
#+end_quote

** helm [0/0] :ARCHIVE:
#+begin_quote
This module provides Helm integration for a variety of Emacs commands, as well as
a unified interface for project search and replace, powered by ripgrep.
#+end_quote

** ido [0/0] :ARCHIVE:
** ivy [2/2] :ARCHIVE:
#+begin_quote
This module provides Ivy integration for a variety of Emacs commands, as well as
a unified interface for project search and replace, powered by [[https://github.com/BurntSushi/ripgrep/][ripgrep]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `completion/ivy` module
brew install ripgrep
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `completion/ivy` module
sudo sudo dnf -y install ripgrep
#+end_src

*** DONE [#A] Make it easier to jump to headlines across Org buffers
#+begin_src emacs-lisp :tangle yes
(setq counsel-org-goto-all-outline-path-prefix 'buffer-name)
#+end_src

** vertico [2/2]
#+begin_quote
This module enhances the Emacs search and completion experience, and also
provides a united interface for project search and replace, powered by [[https://github.com/BurntSushi/ripgrep/][ripgrep]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `completion/vertico` module
brew install ripgrep
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `completion/vertico` module
sudo sudo dnf -y install ripgrep
#+end_src

*** DONE [#B] Replace =ivy= with =vertico=
- [X] Enable in =init.el=
- [X] Refactor for =vertico=

* :ui
#+begin_quote
Aesthetic modules that affect the Emacs interface or user experience.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :ui
#+end_src

** Miscellany [6/11]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Install packages
#+begin_src emacs-lisp :tangle packages.el
(package! col-highlight)
(package! page-break-lines)
(package! imenu-list)

;; More pretty themes by prot
(package! ef-themes)
#+end_src

*** DONE [#B] Dedicate windows
#+begin_src emacs-lisp :tangle yes
(defun my/toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another
buffer in current window."
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "%s: Can't touch this!"
     "%s is up for grabs.")
   (current-buffer)))

(define-key! evil-window-map
  ;; replaces `+workspace/close-window-or-workspace'
  "d" #'my/toggle-window-dedicated)
#+end_src

*** DONE [#B] Add key binding for Ilist
#+begin_src emacs-lisp :tangle yes
;; NOTE For whatever reason, I cannot use :defer to lazy-load `imenu-list'
;; without it breaking
(use-package! imenu-list
  :init
  (define-key! doom-leader-open-map "i" #'imenu-list-minor-mode)
  :after imenu)

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`%s o i\\'" prefix-re)) nil . "Ilist")
                which-key-replacement-alist)))
#+end_src

*** DONE [#C] Keep icons small by default
#+begin_src emacs-lisp :tangle yes
(setq all-the-icons-scale-factor 1.0)
#+end_src

*** DONE [#C] Don't suggest abbreviations for long command names
#+begin_src emacs-lisp :tangle yes
(setq extended-command-suggest-shorter nil)
#+end_src

*** DONE [#C] Create a function to set frame transparency
https://www.emacswiki.org/emacs/TransparentEmacs
#+begin_src emacs-lisp :tangle yes
(defun my/transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque: ")
  (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

*** TODO [#C] Always display Imenu for current buffer in Ilist
If the current buffer does not have Imenu entries, I do not want old ones to
persist in the Ilist, because I find that confusing. Actually, maybe I just want
Ilist to display entries for the list selected buffer (in the current workspace)
that is derived from ~prog-mode~.

In any case, the following does *not* work, because it causes Ilist to update
(and display nothing) when I am just doing stuff in the minibuffer (or within
Ilist itself!), and I'd like to keep it displaying what it had before in those
obvious cases:

#+begin_src emacs-lisp :tangle no
(setq imenu-list-persist-when-imenu-index-unavailable nil)
#+end_src

*** TODO [#C] Keep Ilist the same same size as before when opening and closing it
Could hook into ~imenu-list-quit-window~ and save a variable such as
~my/imenu-list--popup-size~, and then default to that when opening back up.

*** TODO [#C] Disable the cursor in Ilist buffers (like Treemacs)
*** TODO [#C] Remap "<" and ">" to window resize functions in Ilist
Right now, those keys are not being used.

*** TODO [#C] Use a different line truncate character than "$" in Ilist
This is especially annoying when lines get truncated despite the text being
scaled down, because the "$" character is full-sized.

** deft [0/0] :ARCHIVE:
#+begin_quote
[[https://jblevins.org/projects/deft/][Deft]] is a major mode for browsing and filtering notes written in plain text
formats, such as org-mode, markdown, and LaTeX.
#+end_quote

** doom [4/4]
#+begin_quote
This module gives Doom its signature look: powered by the =doom-one= theme
(inspired by Atom's One Dark theme) and =solaire-mode=.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `ui/doom` module
brew install font-terminus

# TODO: Comic Mono
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `ui/doom` module
sudo dnf -y install terminus-fonts

## Comic Mono
## <https://dtinth.github.io/comic-mono-font>
## <https://docs.fedoraproject.org/en-US/quick-docs/fonts/#unpackaged>
npm install -g comic-mono
mkdir -p "$XDG_DATA_HOME/fonts"
ln -s "`npm root -g`/comic-mono" "$XDG_DATA_HOME/fonts"

## Iosevka Comfy
if [ -e "$XDG_DATA_HOME/fonts/iosevka-comfy/.git" ]
then
    git -C "$XDG_DATA_HOME/fonts/iosevka-comfy" pull
else
    git clone --depth 1 \
        'https://git.sr.ht/~protesilaos/iosevka-comfy' \
        "$XDG_DATA_HOME/fonts/iosevka-comfy"
fi

## Update fonts
fc-cache -v
#+end_src

*** DONE [#A] Never hide the modeline
Without a modeline, the only way to see a clear distinction between the bottom
of a window without a modeline and the top of another window is by using certain
themes in GUI Emacs.

#+begin_src emacs-lisp :tangle yes
;; `always' is just a no-op that returns `t'
(defadvice! my/never-hide-modeline-a (&rest _)
  "Never hide the modeline"
  :around 'hide-mode-line-mode
  #'always)

(after! doom-themes-ext-treemacs
  (defadvice! my/show-treemacs-modeline-a (&rest _)
    "Show the treemacs modeline"
    :around 'doom-themes-hide-modeline
    #'always))

(remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)
#+end_src
#+end_src

**** COMMENT Other ways to disable modeline hiding
In the end, I prefer the heavy-handed approach and like to see modelines beneath
all windows. The consistently clear distinction between windows is worth the
exchange of screen real estate.

#+CAPTION: Disable modeline hiding in all popup buffers
#+begin_src emacs-lisp :tangle no
(remove-hook '+popup-buffer-mode-hook #'+popup-set-modeline-on-enable-h)
#+end_src

#+CAPTION: Disable modeline hiding by default in popup buffers
#+begin_src emacs-lisp :tangle no
(plist-put +popup-defaults :modeline t)
#+end_src

#+CAPTION: Disable modeline hiding in specific modes
#+begin_src emacs-lisp :tangle no
;; Not an exhuastive list of hooks
(remove-hook! '(shell-mode-hook
                term-mode-hook
                vterm-mode-hook
                eshell-mode-hook)
              #'hide-mode-line-mode)
#+end_src

*** DONE [#C] Set the theme
There are literally only two custom themes (~doom-badger~ and ~doom-rouge~) that
satisfy the following requirements /without modification/ when running in a
256-color terminal:

1. Files and directories have different colors in Treemacs
2. Buffers and modelines have noticeably different background colors even in
   unselected windows
3. The background color of the current selection in the completion framework is
   never the same as the foreground color of any part of the selection

For a 256-color terminal, ~doom-badger~ is OK, but I prefer ~doom-henna~.
Unfortunately, it does not satisfy the 3rd requirement, so I made a patched copy
of the theme called ~eeowaa-henna~ that fixes the problem. Note that I created a
new theme instead of customizing ~doom-henna~ because I prefer ~doom-henna~ over
~eeowaa-henna~ in GUI Emacs and like using it sometimes.

As for GUI Emacs, I love ~doom-outrun-electric~ for its clear separation between
windows and for its cool color palette. However, the background color of the
selected item in Treemacs is nearly the same as the regular background color (a
problem that [[https://www.reddit.com/r/DoomEmacs/comments/pfp39u/customizing_doomtheme/][others have experienced]]), so it is hard to tell what is currently
selected. To fix the problem, I customized the theme to use the same background
color as the face used for the current selection in the completion framework.
Note that this fix also modifies the background color of highlighted lines in
other windows that use =solaire-mode=.

#+begin_src emacs-lisp :tangle yes
(setq doom-theme
      (if initial-window-system
          'doom-outrun-electric
        'eeowaa-henna))

(after! (:and solaire-mode (:or vertico ivy))
  (let ((face (cond
               ((facep 'vertico-current) 'vertico-current)
               ((facep 'ivy-current-match) 'ivy-current-match)
               (t (error "Could not determine face")))))
    (custom-theme-set-faces! 'doom-outrun-electric
      `(solaire-hl-line-face :background
                             ,(face-attribute face :background)))))
#+end_src

Some other themes that I enjoy in GUI Emacs include:
- ~doom-tokyo-night~ (good dark theme that is easy on the eyes and brain)
- ~doom-gruvbox-light~ (good light theme for working in direct sunlight)
- ~doom-tomorrow-day~ (good light theme to go with Comic Mono font)
- ~doom-plain~ and ~doom-plain-dark~ (good monochrome themes to focus on text)

*** DONE [#C] Set the font
At least on Linux, you can list available fonts like this:

#+begin_src sh :tangle no :results verbatim
fc-list | sed 's/[^:].*: //' | sort -u     # all fonts
fc-list :spacing=mono family style | sort  # just monospace
#+end_src

Some of my favorite free and open-source fonts include:
- ~Iosevka Comfy~ (good spacing)
- ~Source Code Pro~ (well-rounded)
- ~Terminus~ (crisp)
- ~Comic Mono~ (fun)

#+begin_src emacs-lisp :tangle yes
;; Define fonts that I like
(setq my/fonts '(("Iosevka Comfy Fixed" ;; Remove " Fixed" if you want ligatures
                  :variable-pitch "Iosevka Comfy Duo"
                  :serif "Iosevka Comfy Motion Fixed"
                  :default-size 22)
                 ("Source Code Pro"
                  :default-size 22)
                 ("Terminus"
                  :default-size 30)
                 ("Comic Mono"
                  :variable-pitch "Comic Neue"
                  :default-size 24)))

;; Helper function to read a positive integer from the minibuffer
(defun my/read-positive-int (&optional prompt default)
  "Read a positive integer from the minibuffer.
PROMPT defaults to \"Positive integer: \""
  (let ((number (read-number (or prompt "Positive integer: ") default)))
    (if (and (integerp number) (> number 0))
        number
      (message "Please enter a positive integer.")
      (sit-for 1)
      (my/read-positive-int prompt))))

;; Define a fuction to change the fonts
(defun my/select-font (font &optional size)
  "Change the current fonts to a collection in `my/fonts'.
If SIZE is omitted, the default will be used.
When called interactively, reload the fonts in the current session."
  (interactive (list (completing-read "Font family: "
                                      (mapcar #'car my/fonts) nil t)
                     nil))
  (let* ((f (lambda (x y) (and x y (font-spec :family x :size y))))
         (p (or (alist-get font my/fonts nil nil #'string=)
                (error "\"%s\" not found in `my/fonts'" font)))
         (variable-pitch-font (plist-get p :variable-pitch))
         (serif-font (plist-get p :serif))
         (default-size (plist-get p :default-size)))
    (unless size
      (setq size (if (interactive-p)
                     (my/read-positive-int "Font size: " default-size)
                   default-size)))
    (setq doom-font                (funcall f font size)
          doom-variable-pitch-font (funcall f variable-pitch-font size)
          doom-serif-font          (funcall f serif-font size)))
  (and (interactive-p) (doom/reload-font)))

;; Set the font
(my/select-font "Iosevka Comfy Fixed")
#+end_src

** doom-dashboard [0/0] :ARCHIVE:
#+begin_quote
This module adds a minimalistic, Atom-inspired dashboard to Emacs.
#+end_quote

** doom-quit [0/0] :ARCHIVE:
#+begin_quote
A silly module that prompts you with messages when you try to quit, like DOOM
did. Some quotes are from Doom's quit-message list. Others are random, nerdy
references that no decent human being has any business recognising.
#+end_quote

** emoji [2/2]
#+begin_quote
Displays and inserts emojis (ASCII, Github style, unicode).
#+end_quote

*** DONE [#A] Do not prompt to download emojis
The prompt to download emojis happens during Doom startup and puts it in an
unactionable, unrecoverable state. Obviously, I'd prefer to avoid that! Instead,
I would like to simply download emojis if they are missing from the expected
location.

#+begin_src emacs-lisp :tangle yes
(setq emojify-download-emojis-p t)
#+end_src

*** DONE [#C] Enable emojis (just for =SPC i e=)
This is done in =doom/init.el=.

** hl-todo [1/1]
#+begin_quote
This module adds syntax highlighting for TODO/FIXME/NOTE tags in programming
major-modes.
#+end_quote

*** DONE [#B] Add a few different tags to highlight in programming major-modes
#+begin_src emacs-lisp :tangle yes
(after! hl-todo
  (setq hl-todo-keyword-faces
        (append '(("TESTME" font-lock-constant-face bold)
                  ("PREREQ" font-lock-doc-face bold)
                  ("DEBUG" font-lock-preprocessor-face bold))
                hl-todo-keyword-faces)))
#+end_src

** hydra [5/7]
#+begin_quote
This module adds hydra to Doom Emacs, as well as a few custom built hydras to
start with.
#+end_quote
*** COMMENT Documentation
+ [[doom-modules:ui/hydra/README.org][ui/pdf module documentation]]
+ [[doom:.local/straight/repos/hydra/README.md][hydra package README]]

*** OKAY [#A] Write macros to help create hydras
Room for improvement:

1. Use ~(["key"] cmd "hint")~ instead of ~(my/hydra-key "key" cmd "hint")~ in
   ~my/defhydra~ (look for a vector as the first argument in each head). This is
   just nice shorthand. It will also allow me to get rid of ~my/hydra-key~
   altogether.

2. Show values instead of just propertizing the hint. This is because not every
   value being set is a boolean.

3. Support full hydra head syntax in ~my/hydra-key~ (or the resulting code after
   implementing the first improvement in this list).

#+begin_src emacs-lisp :tangle yes
(defmacro my/defhydra (name body &optional docstring &rest heads)
  "Define a hydra, expanding `my/hydra-key' forms in HEADS.
See the help text for `defhydra' for a description of arguments."
  (declare (indent defun) (doc-string 3))
  (let ((heads (mapcar (lambda (head)
                         (if (eq (car head) 'my/hydra-key)
                             (macroexpand head)
                           head))
                       heads)))
    `(defhydra ,name ,body ,docstring ,@heads)))

(defmacro my/hydra-key (key cmd hint &optional predicate)
  "Add a key to a hydra defined by `my/defhydra'.
Press KEY to eval CMD described by HINT.

If PREDICATE is `nil', do not propertize the text.

If PREDICATE is `t', then propertize the text according to the
variable whose symbol name equals that of CMD. (This is often
useful when CMD is a function that toggles a minor mode.)

If PREDICATE is any other non-`nil' value, then propertize the
text according to that value at runtime.

In order to propertize text, the DOCSTRING argument in the
`my/defhydra' should contain a \"_KEY_: ?LABEL?\" string
corresponding those arguments of this macro. For example:

  (my/defhydra hydra-minor-modes (:hint nil)
    \"_v_: ?v?, _r_: ?r?\"
    (my/hydra-key \"v\" view-mode \"View\" t)
    (my/hydra-key \"r\"
                  (read-only-mode 'toggle)
                  \"Read-Only\"
                  buffer-read-only)"
  (if (null predicate)
      `(,key ,cmd ,hint)
    `(,key ,cmd (propertize ,hint
                            'face
                            (if ,(if (eq t predicate)
                                     cmd
                                   predicate)
                                'bold
                              'italic)))))
#+end_src

*** DONE [#A] Add a hydra for projectile run commands
#+begin_src emacs-lisp :tangle yes
(after! projectile
  (global-set-key (kbd "C-c r") 'hydra-run/body)
  (defhydra hydra-run (:color blue :hint none)
    "
confi_g_ure -> ?g?
_c_ompile ---> ?c?
_t_est ------> ?t?
_r_un -------> ?r?
_i_nstall ---> ?i?
_p_ackage ---> ?p?
"
    ("g" (let ((compilation-read-command)) (funcall #'projectile-configure-project nil))
     (format "%s" projectile-project-configure-cmd))
    ("c" (let ((compilation-read-command)) (funcall #'projectile-compile-project nil))
     (format "%s" projectile-project-compilation-cmd))
    ("t" (let ((compilation-read-command)) (funcall #'projectile-test-project nil))
     (format "%s" projectile-project-test-cmd))
    ("r" (let ((compilation-read-command)) (funcall #'projectile-run-project nil))
     (format "%s" projectile-project-run-cmd))
    ("i" (let ((compilation-read-command)) (funcall #'projectile-install-project nil))
     (format "%s" projectile-project-install-cmd))
    ("p" (let ((compilation-read-command)) (funcall #'projectile-package-project nil))
     (format "%s" projectile-project-package-cmd))))
#+end_src

*** DONE [#C] Add a hydra for games
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c g") 'hydra-game/body)
(defhydra hydra-game (:color blue :hint nil)
  "
^Arcade^      ^Puzzle^        ^Board^          ^Text^        ^Self-Playing^
^-^-----------^-^--------------------------------------------^-^-----------
_t_: Tetris   _5_: 5x5        _g_: Gomoku      _a_: Dunnet   _l_: Life
_s_: Snake    _b_: Blackbox   _i_: Solitaire   _d_: Doctor   _h_: Hanoi
_p_: Pong     _m_: Mpuz       ^ ^              ^ ^           _z_: Zone
^ ^           _o_: Bubbles
"
  ;; Arcade
  ("t" tetris)
  ("s" snake)
  ("p" pong)

  ;; Puzzle
  ("5" 5x5)
  ("b" blackbox)
  ("m" mpuz)
  ("o" bubbles)

  ;; Board
  ("i" solitaire)
  ("g" gomoku)

  ;; Text
  ("a" dunnet)
  ("d" doctor)

  ;; Self-Playing
  ("l" life)
  ("h" hanoi)
  ("z" zone)

  ;; Other
  ("q" nil))
#+end_src

*** DONE [#C] Add a hydra for counsel-spotify
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c s") 'hydra-spotify/body)
(defhydra hydra-spotify (:color blue :hint nil)
  "
^Playback control^   ^Collection^     ^Song^           ^Open Spotify^
^---^----------------^-^--------------^-^-------------------------------
_SPC_: Play/Pause    _l_: Playlist    _s_: By name     _o_: Application
  _n_: Next          _a_: Artist      _A_: By artist   _w_: Web player
  _p_: Previous      _r_: Record      _R_: By record   _i_: Integrations
"
  ;; Playback Control
  ("SPC" counsel-spotify-toggle-play-pause :color red)
  ("n" counsel-spotify-next :color red)
  ("p" counsel-spotify-previous :color red)

  ;; Collection
  ("l" counsel-spotify-search-playlist)
  ("a" counsel-spotify-search-artist)
  ("r" counsel-spotify-search-album)

  ;; Song
  ("s" counsel-spotify-search-track)
  ("A" counsel-spotify-search-tracks-by-artist)
  ("R" counsel-spotify-search-tracks-by-album)

  ;; Open Spotify
  ("o" (cond
        (IS-MAC (call-process "open" nil nil nil "-a" "spotify"))
        (IS-LINUX (call-process "xdg-open" nil nil nil "spotify"))
        (t (user-error! "Unsupported operating system"))))
  ("w" (browse-url "https://open.spotify.com"))
  ("i" (browse-url "https://developer.spotify.com/my-applications"))

  ;; Other
  ("q" nil))
#+end_src

*** DONE [#C] Add a hydra for timeclock
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c c") 'hydra-timeclock/body)
(defhydra hydra-timeclock (:color blue)
  "Timeclock"
  ("i" timeclock-in "In")
  ("o" timeclock-out "Out")
  ("c" timeclock-change "Change")
  ("e" timeclock-visit-timelog "Edit")
  ("g" timeclock-reread-log "Reload")
  ("s" timeclock-status-string "Status")
  ("r" timeclock-generate-report "Report")
  ("q" nil "Quit"))
#+end_src

*** STRT [#A] Add a hydra for debugging elisp
- [X] Setting and unsetting entrypoints
- [ ] Interface to =debug= (reference ~debugger-mode-map~)
- [ ] Interface to =edebug= (reference ~edebug-mode-map~)

#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c d") 'hydra-debug/body)
(defhydra hydra-debug ()
  "Debug"
  ("d" hydra-debug-debugger/body "Debugger" :exit t)
  ("b" hydra-debug-breakpoints/body "Breakpoints" :exit t)
  ("w" hydra-debug-watchpoints/body "Watchpoints" :exit t)
  ("t" hydra-debug-traps/body "Traps" :exit t)
  ("SPC" ignore nil :color red))
#+end_src

**** STRT Debugger
The only problem is that the commands for stepping cause the hydra window to
disappear. I tried the following potential workarounds to no avail:

1. Use ~message~ or ~posframe~ instead of ~lv~ for ~hydra-hint-display-type~
2. Add ~hydra-debug-debugger/body~ to ~debugger-mode-hook~

For now, I have specified ~:exit t~ for those heads, to prevent confusion. Each
time you step, you must open the hydra again via =C-c d d=. That said, each of
the binds in this hydra correspond to bindings in ~debugger-mode-map~, so if you
have memorized the hydra binds, then you can still use them without the hydra.

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-debug-debugger (:color pink)
  ;; Stepping
  ("d" debugger-step-through "step in" :exit t :column "run")
  ("J" debugger-jump "step out" :exit t)
  ("c" debugger-continue "continue" :exit t)

  ;; Breakpoints
  ("gb" debugger-frame "set" :column "break")
  ("u" debugger-frame-clear "unset")
  ("gl" debugger-list-functions "list")

  ;; Evaluation
  ("E" debugger-eval-expression "print" :column "sexp")
  ("R" debugger-record-expression "record")
  ("RET" backtrace-help-follow-symbol "follow")

  ;; Visibility
  ("zo" backtrace-multi-line "open" :column "fold")
  ("zc" backtrace-single-line "close")
  ("." backtrace-expand-ellipses "expand")

  ;; Toggles
  ("p" backtrace-toggle-locals "locals" :column "toggle")
  (":" backtrace-toggle-print-gensym "uninterned")
  ("#" backtrace-toggle-print-circle "circular")

  ;; Exiting
  ("q" debugger-quit "toplevel nonstop" :column "exit")
  ("r" debugger-return-value "return with value")
  ("SPC" hydra-debug/body "Menu" :exit t)
  ("C-g" ignore nil :exit t))

; Unassigned:
;   backtrace-forward-frame
;   backtrace-backward-frame
#+end_src

**** TODO Edebug
References:
+ https://github.com/rgrinberg/edebug-hydra/blob/master/edebug-hydra.el
+ edebug-mode-map:
  #+begin_example
  =                           edebug-temp-display-freq-count
  ?                           edebug-help
  B                           edebug-next-breakpoint
  C                           edebug-Continue-fast-mode
  C-M-i                       completion-at-point
  C-M-q                       indent-pp-sexp
  C-M-q                       indent-sexp
  C-M-q                       prog-indent-sexp
  C-M-x                       eval-defun
  C-c C-c                     edebug-go-mode
  C-c C-d                     edebug-unset-breakpoint
  C-c C-l                     edebug-where
  C-c C-n                     edebug-next-mode
  C-c C-s                     edebug-step-mode
  C-c C-t                     #<anonymous-function>
  C-x C-a C-c                 edebug-go-mode
  C-x C-a C-l                 edebug-where
  C-x C-a C-n                 edebug-next-mode
  C-x C-a C-s                 edebug-step-mode
  C-x C-a RET                 edebug-set-initial-mode
  C-x C-e                     edebug-eval-last-sexp
  C-x SPC                     edebug-set-breakpoint
  D                           edebug-toggle-disable-breakpoint
  DEL                         backward-delete-char-untabify
  E                           edebug-visit-eval-list
  G                           nil
  I                           edebug-instrument-callee
  P                           edebug-view-outside
  Q                           edebug-top-level-nonstop
  S                           edebug-stop
  SPC                         edebug-step-mode
  T                           edebug-Trace-fast-mode
  U                           edebug-unset-breakpoints
  W                           edebug-toggle-save-windows
  X                           edebug-set-global-break-condition
  a                           abort-recursive-edit
  b                           edebug-set-breakpoint
  c                           edebug-continue-mode
  d                           edebug-pop-to-backtrace
  e                           edebug-eval-expression
  f                           edebug-forward-sexp
  g                           nil
  h                           nil
  i                           edebug-step-in
  n                           edebug-next-mode
  o                           edebug-step-out
  p                           edebug-bounce-point
  q                           top-level
  r                           edebug-previous-result
  t                           edebug-trace-mode
  u                           edebug-unset-breakpoint
  v                           edebug-view-outside
  w                           edebug-where
  x                           edebug-set-conditional-breakpoint
  #+end_example

**** DONE Breakpoints
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-debug-breakpoints ()
  "Breakpoints"
  ("b" debug-on-entry "Set")
  ("u" cancel-debug-on-entry "Unset")
  ("l" (message "%s" (debug--function-list)) "List")
  ("SPC" hydra-debug/body "Menu" :exit t))
#+end_src

**** DONE Watchpoints
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-debug-watchpoints ()
  "Watchpoints"
  ("s" debug-on-variable-change "Set")
  ("u" cancel-debug-on-variable-change "Unset")
  ("l" (message "%s" (debug--variable-list)) "List")
  ("SPC" hydra-debug/body "Menu" :exit t))
#+end_src

**** DONE Traps
Note that ~debug-on-next-call~ is impossible to set within the hydra without
immediately triggering the debugger.

#+begin_src emacs-lisp :tangle yes
(my/defhydra hydra-debug-traps ()
  "Traps"
  (my/hydra-key
   "e" toggle-debug-on-error "Error" debug-on-error)
  (my/hydra-key
   "q" toggle-debug-on-quit "Quit (C-g)" debug-on-quit)
  (my/hydra-key
   "u" (lambda (event)
         (interactive `(,(intern (completing-read "Signal: " '(sigusr1 sigusr2 nil)))))
         (setq debug-on-event event))
   "User event" debug-on-event)
  (my/hydra-key
   "s" (lambda ()
         (interactive)
         (setq debug-on-signal (not debug-on-signal))
         (message "Debug on Signal %s globally"
                  (if debug-on-signal "enabled" "disabled")))
   "Signal" debug-on-signal)
  (my/hydra-key
   "m" (lambda (regexp)
         (interactive `(,(read-regexp "Message regexp: ")))
         (setq debug-on-message regexp))
   "Message" (not (or (null debug-on-message) (string-empty-p debug-on-message))))
  ("SPC" hydra-debug/body "Menu" :exit t))
#+end_src

*** STRT [#B] Add a hydra for table.el
#+begin_src emacs-lisp :tangle yes
(global-set-key (kbd "C-c t") 'hydra-table/body)
(defhydra hydra-table ()
  "table.el"
  ("n" hydra-table-navigate/body "Navigate" :exit t)
  ("i" hydra-table-insert/body "Insert" :exit t)
  ("d" hydra-table-delete/body "Delete" :exit t)
  ("s" hydra-table-span-or-split/body "Span or Split" :exit t)
  ("r" hydra-table-resize/body "Resize" :exit t)
  ("j" hydra-table-justify/body "Justify" :exit t)
  ("e" hydra-table-export/body "Export" :exit t)
  ("SPC" ignore nil :color red))
#+end_src

**** TODO Capture and Release
**** TODO Recognize and Unrecognize
**** STRT Navigate
I want "fbnp" or "hjkl" navigation between cells, but table.el does
not provide such functions, so I'll need to implement them myself
using regexps.  Looking at the table.el source code might provide some
inspiration (look for [[help:table-forward-cell][table-forward-cell]] and [[help:table-backward-cell][table-backward-cell]]
implementations).

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-navigate ()
  "Navigation"
  ("1" (progn (table-goto-top-left-corner)
              (forward-char) (forward-line)))
  ("2" (progn (table-goto-top-right-corner)
              (backward-char) (forward-line)))
  ("3" (progn (table-goto-bottom-left-corner)
              (forward-char) (forward-line -1)))
  ("4" (progn (table-goto-bottom-right-corner)
              (backward-char) (forward-line -1)))
  ("f" table-forward-cell)
  ("b" table-backward-cell)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Insert
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-insert ()
  "Insert"
  ("t" table-insert "table")
  ("r" table-insert-row "row")
  ("c" table-insert-column "column")
  ("s" table-insert-sequence "sequence")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Delete
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-delete ()
  "Delete"
  ("r" table-delete-row "row")
  ("c" table-delete-column "column")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Span or Split
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-span-or-split ()
  "Span or Split"
  ("h" (table-span-cell 'left))
  ("j" (table-span-cell 'below))
  ("k" (table-span-cell 'above))
  ("l" (table-span-cell 'right))
  ("|" table-split-cell-horizontally)
  ("-" table-split-cell-vertically)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Resize
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-resize ()
  "Resize"
  ("}" table-heighten-cell "heighten")
  ("{" table-shorten-cell "shorten")
  (">" table-widen-cell "widen")
  ("<" table-narrow-cell "narrow")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** DONE Justify
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify ()
  "Justify"
  ("a" hydra-table-justify-cell/body "Cell" :exit t)
  ("r" hydra-table-justify-row/body "Row" :exit t)
  ("c" hydra-table-justify-column/body "Column" :exit t)
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

***** ~a~: Cell
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify-cell ()
  "Justify Cell"
  ("h" (table-justify-cell 'left))
  ("j" (table-justify-cell 'bottom))
  ("k" (table-justify-cell 'top))
  ("l" (table-justify-cell 'right))
  ("c" (table-justify-cell 'center) "center")
  ("m" (table-justify-cell 'middle) "middle")
  ("n" (table-justify-cell 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

***** ~r~: Row
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify-row ()
  "Justify Row"
  ("h" (table-justify-row 'left))
  ("j" (table-justify-row 'bottom))
  ("k" (table-justify-row 'top))
  ("l" (table-justify-row 'right))
  ("c" (table-justify-row 'center) "center")
  ("m" (table-justify-row 'middle) "middle")
  ("n" (table-justify-row 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

***** ~c~: Column
#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-justify-column ()
  "Justify Column"
  ("h" (table-justify-column 'left))
  ("j" (table-justify-column 'bottom))
  ("k" (table-justify-column 'top))
  ("l" (table-justify-column 'right))
  ("c" (table-justify-column 'center) "center")
  ("m" (table-justify-column 'middle) "middle")
  ("n" (table-justify-column 'none) "none")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

**** STRT Export
I just need to test this functionality.

#+begin_src emacs-lisp :tangle yes
(defhydra hydra-table-export ()
  "Export to"
  ("h" (table-generate-source 'html) "HTML")
  ("l" (table-generate-source 'latex) "LaTeX")
  ("c" (table-generate-source 'cals) "CALS")
  ("SPC" hydra-table/body "Menu" :exit 1))
#+end_src

** indent-guides [0/0] :ARCHIVE:
** ligatures [1/1]
#+begin_quote
This module enables ligatures and arbitrary symbol substitutions with
~mac-auto-operator-composition-mode~ (on supported macOS systems) or composition
tables (harfbuzz on Emacs 28), falling back on ~prettify-symbols-mode~
otherwise.
#+end_quote

*** DONE [#C] Only enable ligatures in Org mode (for now)
#+begin_src emacs-lisp :tangle yes
(setq +ligatures-in-modes '(org-mode)
      +ligatures-extras-in-modes '(org-mode))
#+end_src

** minimap [0/0]
#+begin_quote
This module adds a minimap to the right side of Emacs, similar to the feature
found in many other editors.
#+end_quote

** modeline [1/1]
#+begin_quote
This module provides an Atom-inspired, minimalistic modeline for Doom Emacs,
powered by [[https://github.com/seagle0128/doom-modeline][the doom-modeline package]] (where you can find screenshots).
#+end_quote

*** DONE [#C] Use 1-based column numbering in modeline
#+begin_src emacs-lisp :tangle yes
(setq column-number-indicator-zero-based nil)
#+end_src

** nav-flash [0/0] :ARCHIVE:
#+begin_quote
This module flashes the line around the cursor after any significant motion, to
make it easy to follow after big operations.
#+end_quote

** neotree [0/0] :ARCHIVE:
#+begin_quote
This module brings a side panel for browsing project files, inspired by vim's
NERDTree.
#+end_quote

** ophints [0/0]
#+begin_quote
This module provides op-hints (operation hinting), i.e. visual feedback for
certain operations. It highlights regions of text that the last operation (like
yank) acted on.
#+end_quote

** popup [4/7]
#+begin_quote
This module provides a customizable popup window management system.
#+end_quote

*** DONE [#B] Add a terminal-friendly keybinding for ~+popup/raise~
I've defined a global keybinding for this:
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Raise popup"
      "^" #'+popup/raise)
#+end_src

Ideally, I'd just modify the ~popup-mode~ keymap, but the following doesn't seem
to work:
#+begin_src emacs-lisp :tangle no
(map! :map +popup-buffer-mode-map
      "SPC ^" #'+popup/raise)
#+end_src

*** DONE [#B] Configure Man for AWS CLI man pages
#+begin_src emacs-lisp :tangle yes
;; Allow any letter to be used a manual section for Man (AWS CLI uses "a")
(setq Man-section-regexp "[a-zA-Z0-9+]+")

;; Consider "AVAILABLE.*" page sections to be "SEE ALSO"
(setq Man-see-also-regexp
      (format "\\(%s\\)"
              (string-join '("SEE ALSO"
                             "VOIR AUSSI"
                             "SIEHE AUCH"
                             "VÉASE TAMBIÉN"
                             "VEJA TAMBÉM"
                             "VEDERE ANCHE"
                             "ZOBACZ TAKŻE"
                             "İLGİLİ BELGELER"
                             "参照"
                             "参见 SEE ALSO"
                             "參見 SEE ALSO"
                             "AVAILABLE.*") ;; For AWS CLI man pages
                           "\\|")))

;; Allow buttons to be properly overlayed on AWS CLI man page references
(after! man
  (setq
   Man-reference-regexp
   (concat
    ;; Ignore bullet points
    "\\(?:^\\.IP \\\\(bu 2\\n\\|o \\)?"
    ;; This is the <name> part
    "\\(" Man-name-regexp
         "\\("
              ;; This allow line-continuations for long man page names
              ;;
              ;; SEE ALSO
              ;;     foo(1), bar(1), line-
              ;;     continuation(1)
              ;;
              "\\([-‐]\n\\)?"
              "[ \t]+" Man-name-regexp
         "\\)*"
    "\\)"
    ;; This is the (<section>) part
    "[ \t]*(\\(" Man-section-regexp "\\))")))
#+end_src

*** DONE [#C] Open man pages in the current window
#+begin_src emacs-lisp :tangle yes
(setq Man-notify-method 'pushy)
#+end_src

*** DONE [#C] Do not restrict (Wo)Man buffer width
#+begin_src emacs-lisp :tangle yes
(setq Man-width-max nil
      woman-fill-frame t)
#+end_src

To redisplay with new width, call ~Man-update-manpage~ in a =Man= buffer (or
just wait a few seconds after resizing a window for it to get called
automatically) or call ~woman-reformat-last-file~ in a =woman= buffer (bound to
=R= in Emacs evil state).

*** STRT [#B] Add popup rule for Ilist
- [ ] Display a similar modeline to that of Treemacs
- [ ] Use the same popup window as Treemacs (only display one at a time)
  - I would rather not take up too much screen real estate
  - I normally only need to see one of those at a time (because I'm either
    focused on file operations or on operations within a single file)

#+begin_src emacs-lisp :tangle yes
(after! imenu-list
  (set-popup-rule! "^\\*Ilist\\*"
    :side 'right :size 35 :modeline "Ilist")
  (remove-hook 'imenu-list-major-mode-hook #'imenu-list--set-mode-line))
#+end_src

*** TODO [#B] Configure WoMan for AWS CLI man pages
** tabs [0/0] :ARCHIVE:
#+begin_quote
This module adds an Atom-esque tab bar to the Emacs UI.
#+end_quote

** treemacs [5/7]
#+begin_quote
[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a file and project explorer similar to NeoTree or vim’s NerdTree,
but largely inspired by the Project Explorer in Eclipse. It shows the file
system outlines of your projects in a simple tree layout allowing quick
navigation and exploration, while also possessing basic file management
utilities.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `ui/treemacs` module
brew install python3
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `ui/treemacs` module
sudo dnf -y install python3
#+end_src

*** DONE [#A] Allow resizable fonts
Right now, =C--= (~text-scale-decrease~) and =C-== (~text-scale-increase~) are
unmapped, but I can still use =C-x C--= or =C-x C-== to invoke
~text-scale-adjust~. However, before incorporating the following code snippet,
only the icons get resized, not the text itself.

#+begin_src emacs-lisp :tangle yes
(setq doom-themes-treemacs-enable-variable-pitch nil)
#+end_src

The culprit seems to have been that ~doom-themes-treemacs-enable-variable-pitch~
was enabled, so the file/directory labels were using the face specified by
~doom-themes-treemacs-variable-pitch-face~, which is currently ~variable-pitch~
(see =SPC h F variable-pitch RET= to get information on the face). Basically,
the face did not get resized.

The only downside right now is that Treemacs only uses fixed-width fonts right
now, which makes certain things harder to read. Overall, however, I think it
looks better.

See also:
+ [[help:doom-variable-pitch-font][doom-variable-pitch-font]]
+ [[doom:.local/straight/repos/themes/extensions/doom-themes-ext-treemacs.el][doom-themes-ext-treemacs.el]]
+ =M-x customize-group doom-themes-treemacs RET=

*** DONE [#B] Fix ace-window keybindings :hack:
This slows down startup a bit, but whatever (I'm not obsessed with startup):
#+begin_src emacs-lisp :tangle yes
(require 'ace-window)
#+end_src

Reference: https://github.com/hlissner/doom-emacs/issues/4555

*** KILL [#B] Fix size of NPM logo
I am no longer seeing this issue as of [2021-01-11 Mon].

*** DONE [#C] Add keybindings to visit adjacent files
I'd prefer my functions to use ~treemacs-peek~ instead of
~treemacs-visit-node-no-split~, but for whatever reason, ~treemacs-peek~ does
not work in the lisp functions.

#+begin_src emacs-lisp :tangle yes
(after! treemacs-evil
  (defun my/treemacs-visit-next ()
    "Open the next node in another window."
    (interactive)
    (treemacs-next-line 1)
    (treemacs-visit-node-no-split 1))
  (defun my/treemacs-visit-previous ()
    "Open the previous node in another window."
    (interactive)
    (treemacs-previous-line 1)
    (treemacs-visit-node-no-split 1))
  (define-key! evil-treemacs-state-map
    "J" #'my/treemacs-visit-next
    "K" #'my/treemacs-visit-previous))
#+end_src

*** TODO [#A] Prevent Treemacs from scrolling seemingly at random
I don't know why this is happening, but it is very annoying. To debug, I could
start by setting a watchpoint on a variable that keeps track of the Treemacs
buffer's vertical position (~eeowaa-watchpoint-set~).

*** TODO [#B] Display "+" and "-" icons in tty emacs
https://github.com/hlissner/emacs-doom-themes/issues/489

** unicode [0/0] :ARCHIVE:
#+begin_quote
This module extends Doom's ability to display non-English unicode. It is
primarily useful for non-English Emacs users, for whom Doom's built-in unicode
support in insufficient.
#+end_quote

** vc-gutter [1/2]
*** KILL [#C] Bind ~+vc/gutter-hydra/body~ to another key
:LOGBOOK:
- Note taken on [2022-09-02 Fri 01:09] \\
  Sadly, Henrik removed the hydra in commit ~27a448b04b~. The =hydra= module is
  now deprecated (I didn't notice), so I guess I can't count on this ever coming
  back. I'll keep this Org entry around for a while just in case.
:END:
Currently, ~+vc/gutter-hydra/body~ gets bound to =SPC g .=, but that binding
gets overridden by ~magit-file-dispatch~ in =+evil-bindings.el= (located in the
=:config default= module). A better (unused) binding would be =SPC g v=.

To get started on this, open =+evil-bindings.el= by searching for it with
~doom/find-file-in-emacsd~ (=SPC f e=) and then search for
"+vc/gutter-hydra/body" in the file.

#+begin_src emacs-lisp :tangle no
(when (and (modulep! :ui vc-gutter)
           (modulep! :ui hydra))

  (define-key! doom-leader-git-map
    "v" #'+vc/gutter-hydra/body)

  (after! which-key
    (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
      (cl-pushnew `((,(format "\\`%s g v\\'" prefix-re)) nil . "VCGutter")
                  which-key-replacement-alist))))
#+end_src

*** TODO [#B] Enable toggling of vcs diff in the fringe
Unfortunately, when the =vc-gutter= module is enabled, I have found no way to
persistently disable =git-gutter= in a buffer.

** vi-tilde-fringe [0/0]
#+begin_quote
Displays a tilde(~) in the left fringe to indicate an empty line, similar to Vi.
#+end_quote

** window-select [1/1]
#+begin_quote
This module provides several methods for selecting windows without the use of
the mouse or spatial navigation (e.g. =C-w {h,j,k,l}=).
#+end_quote

*** KILL [#C] Add an =ace-window= keybinding to close windows
:LOGBOOK:
- Note taken on [2022-09-16 Fri 22:15] \\
  I forgot to mention =C-w C-c=, yet another way to close windows.
- Note taken on [2022-07-18 Mon 11:10] \\
  =C-w C-w x= already does exactly what I want. Not sure if this functionality was
  added later or if I was just unaware of it.
:END:
Currently, I can use =C-w C-w e <window> C-w c= to close a window, but the
cursor may switch to another window after this operation. I would rather create
a keybinding like =C-w C-w x <window>= that closes the window that I select
/without/ moving the cursor.

** workspaces [3/4]
#+begin_quote
This module adds support for workspaces, powered by persp_mode, as well as a API
for manipulating them.
#+end_quote

*** COMMENT Vim documentation
#+begin_quote
REORDERING TAB PAGES:

:tabm[ove] [N]                                          :tabm :tabmove
:[N]tabm[ove]
                Move the current tab page to after tab page N.  Use zero to
                the move, thus if the second tab is the current one,
                :tabmove 1 and :tabmove 2  have no effect.
                Without N the tab page is made the last one.
                    :.tabmove   " do nothing
                    :-tabmove   " move the tab page to the left
                    :+tabmove   " move the tab page to the right
                    :0tabmove   " move the tab page to the beginning of the tab
                                " list
                    :tabmove 0  " as above
                    :tabmove    " move the tab page to the last
                    :$tabmove   " as above
                    :tabmove $  " as above
                    :tabmove #  " move the tab page after the last accessed
                                " tab page

:tabm[ove] +[N]
:tabm[ove] -[N]
                Move the current tab page N places to the right (with +) or to
                the left (with -).
                    :tabmove -  " move the tab page to the left
                    :tabmove -1 " as above
                    :tabmove +  " move the tab page to the right
                    :tabmove +1 " as above


Note that although it is possible to move a tab behind the N-th one by using
:Ntabmove. And move it by N places by using :+Ntabmove. For clarification what
+N means in this context see [range].
#+end_quote

*** DONE [#A] Bind ~+workspace/swap-left~ and ~+workspace/swap-right~ to keys
#+begin_src emacs-lisp :tangle yes
(map! :leader
      (:when (modulep! :ui workspaces)
       (:prefix-map ("TAB" . "workspace")
        :desc "Move left"  "H" #'+workspace/swap-left
        :desc "Move right" "L" #'+workspace/swap-right)))
#+end_src

*** TODO [#B] Create a ~:tabmove~ command for Evil mode
Reference:
+ ~+workspace/swap-left~
+ ~+workspace/swap-right~
+ ~my/evil-quit~

#+begin_src emacs-lisp :tangle yes
(evil-define-command my/workspace-move (&optional index)
  "Move the current workspace to zero-based INDEX.
Without INDEX, move to the end."
  (interactive "<c>")
  (let* ((current-name (+workspace-current-name))
         (index (cl-position current-name persp-names-cache :test #'equal))
         (names (remove current-name persp-names-cache)))
    (unless names
      (user-error "Only one workspace"))
    (let ((index (min (max 0 index) (length names))))
      (setq persp-names-cache
            (append (cl-subseq names 0 index)
                    (list current-name)
                    (cl-subseq names index))))
    (when (called-interactively-p 'any)
      (+workspace/display))))

(evil-ex-define-cmd "tabm[ove]" #'my/workspace-move)
#+end_src

*** KILL [#A] Uniquify buffer names using file paths
This is done by setting the ~uniquify-buffer-name-style~ variable to ~forward~,
which Doom does by default in =core/core-ui.el=. However, when the =workspaces=
module is enabled, Doom makes sure that the =uniquify= package does not modify
buffer names, as it breaks =persp-mode= (what powers the =workspaces= module).

Visit the source code of ~+workspaces-init-persp-mode-h~ for more detail.

*** DONE [#B] Give ~persp-keymap-prefix~ binding to =projectile=
By default, =C-c p= is used as the prefix for ~persp-mode-map~, but I would
prefer to save that prefix for =projectile= commands. I will do what Doom does
for standard Emacs bindings (snippet from =+emacs-bindings.el=):

#+begin_src emacs-lisp :tangle early-init.el
(use-package-hook! persp-mode
  :pre-init (setq persp-keymap-prefix (kbd "C-c w")))
#+end_src

#+begin_src emacs-lisp :tangle yes
(after! projectile
  (define-key! projectile-mode-map
    "C-c p" #'projectile-command-map))
#+end_src

** zen [1/1]
#+begin_quote
This module provides two minor modes that make Emacs into a more comfortable
writing or coding environment. Folks familiar with "distraction-free" or "zen"
modes from other editors -- or [[https://github.com/rnkn/olivetti][olivetti]], [[https://github.com/zk-phi/sublimity][sublimity]], and [[https://github.com/IdoMagal/Tabula-Rasa][tabula-rasa]] (Emacs
plugins) -- will feel right at home.
#+end_quote

*** DONE [#C] Unclutter the interface in additional ways
#+begin_src emacs-lisp :tangle yes
(after! writeroom-mode

  (defvar my/zen--old-display-line-numbers nil)
  (defvar my/zen--old-hl-line-mode nil)
  (defvar my/zen--old-column-highlight-mode nil)
  (defvar my/zen--old-display-fill-column-indicator-mode nil)
  (defvar my/zen--old-vi-tilde-fringe-mode nil)

  (add-hook! 'writeroom-mode-hook :append
    (defun my/zen-toggle-h ()
      "Toggle distracting features."
      (if writeroom-mode
          (progn
            ;; Save settings
            (setq my/zen--old-display-line-numbers
                  (bound-and-true-p display-line-numbers)
                  my/zen--old-hl-line-mode
                  (bound-and-true-p hl-line-mode)
                  my/zen--old-column-highlight-mode
                  (bound-and-true-p column-highlight-mode)
                  my/zen--old-display-fill-column-indicator-mode
                  (bound-and-true-p display-fill-column-indicator-mode)
                  my/zen--old-vi-tilde-fringe-mode
                  (and (modulep! :ui vi-tilde-fringe) (bound-and-true-p vi-tilde-fringe-mode)))

            ;; Remove distractions
            (setq display-line-numbers nil)
            (hl-line-mode -1)
            (column-highlight-mode -1)
            (display-fill-column-indicator-mode -1)
            (vi-tilde-fringe-mode -1))

        ;; Restore previous state
        (setq display-line-numbers my/zen--old-display-line-numbers)
        (if my/zen--old-hl-line-mode (hl-line-mode +1))
        (if my/zen--old-column-highlight-mode (column-highlight-mode +1))
        (if my/zen--old-display-fill-column-indicator-mode (display-fill-column-indicator-mode +1))
        (if my/zen--old-vi-tilde-fringe-mode (vi-tilde-fringe-mode +1))))))
#+end_src

* :editor
#+begin_quote
Modules that affect and augment your ability to manipulate or insert text.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :editor
#+end_src

** Miscellany [2/3]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Configure line-feed behavior
#+begin_src emacs-lisp :tangle yes
;; Display ^L characters as horizontal lines
(use-package! page-break-lines
  :config (global-page-break-lines-mode))

;; Have C-l send the current line to the top of the window
(setq recenter-positions '(top bottom middle))

;; Perform a line feed after jumping to a ^L character
(defadvice! my/recenter-top-a (&rest _)
  "Perform a line feed after jumping to a ^L character"
  :after #'forward-page
  (recenter 0))
#+end_src

*** DONE [#C] Allow easy input of accented and special characters via =C-\=
#+begin_src emacs-lisp :tangle yes
(setq default-input-method "latin-postfix")
#+end_src

*** STRT [#B] Truncate lines by default
This doesn't appear to be working...
https://emacs.stackexchange.com/questions/51989/how-to-truncate-lines-by-default

#+begin_src emacs-lisp :tangle yes
(setq-default truncate-lines t)
#+end_src

** evil [6/7]
#+begin_quote
This holy module brings the vim experience to Emacs.
#+end_quote

*** KILL [#A] Fix ~evil-visual-block~ in =org= buffers
:LOGBOOK:
- Note taken on [2022-09-25 Sun 20:27] \\
  After installing gccemacs, this problem went away.
:END:
Oddly, this is a problem I've only encountered in =org= buffers, but when I use
=C-v= in ~normal~ state (/not/ =C-x SPC= in ~emacs~ state) the visual block
extends up and/or down further than what I've actually selected. This doesn't
appear to just be a visual artifact, either, since sometimes (but not always),
the action that I take on what I've actually selected extends to at least some
of the visually-highlighted text that I did not select.

To attempt to fix this problem, I performed a fresh install of Doom Emacs and
all its packages. However, it looks like maybe I need to install a different
version of Emacs (I have ~HEAD~ of Emacs 28), or just wait until =evil=, =org=
(or =evil-org=?) gets updated.

*** DONE [#A] Redefine ~:q~ and ~:wq~ semantics
+ Where applicable, integrate with ~server-edit~ (bound to =C-x #=)
+ Do not ever use to exit Emacs; just for writing and closing buffers

#+begin_src emacs-lisp :tangle yes
(evil-define-command my/evil-quit (&optional force)
  "Mark the current buffer as \"Done\" when performing a server
edit; otherwise, just kill the current buffer. Prompt to save the
current buffer first unless the `force' argument is given."
  :repeat nil
  (interactive "<!>")
  (if (and (boundp 'server-buffer-clients)
           (fboundp 'server-edit)
           (fboundp 'server-buffer-done)
           server-buffer-clients)
      (if force
          (server-buffer-done (current-buffer))
        (server-edit))
    (when force
      (set-buffer-modified-p nil))
    (kill-current-buffer)))

;; Works for all variations of `:q'
(advice-add 'evil-quit :override #'my/evil-quit)
#+end_src

*** DONE [#B] Define modes that should always come up in Emacs state
#+begin_src emacs-lisp :tangle yes
(pushnew! evil-emacs-state-modes 'noaa-mode)
#+end_src

*** DONE [#B] Do not recenter windows after splitting :hack:
I wanted to use ~:around~ advice with ~cl-flet~ to temporarily redefine the
~recenter~ function to do nothing, but couldn't quite get that to work (perhaps
due to complications arising from ~evil-define-command~ and its ~interactive~
form). Using ~:override~ advice in this case seems brittle, but works for now.

*NOTE*: If this breaks someday, look into Doom's ~letf!~ macro.

#+begin_src emacs-lisp :tangle yes
(evil-define-command my/evil-window-split-a (&optional count file)
  "Same as `+evil-window-split-a', but does not recenter the window."
  :repeat nil
  (interactive "P<f>")
  (let ((origwin (selected-window))
        window-selection-change-functions)
    (select-window (split-window origwin count 'below))
    (unless evil-split-window-below
      (select-window origwin)))
  (run-hook-with-args 'window-selection-change-functions nil)
  (when (and (not count) evil-auto-balance-windows)
    (balance-windows (window-parent)))
  (if file (evil-edit file)))

(evil-define-command my/evil-window-vsplit-a (&optional count file)
  "Same as `+evil-window-vsplit-a', but does not recenter the window."
  :repeat nil
  (interactive "P<f>")
  (let ((origwin (selected-window))
        window-selection-change-functions)
    (select-window (split-window origwin count 'right))
    (unless evil-vsplit-window-right
      (select-window origwin)))
  (run-hook-with-args 'window-selection-change-functions nil)
  (when (and (not count) evil-auto-balance-windows)
    (balance-windows (window-parent)))
  (if file (evil-edit file)))

(advice-add #'+evil-window-split-a :override #'my/evil-window-split-a)
(advice-add #'+evil-window-vsplit-a :override #'my/evil-window-vsplit-a)
#+end_src

*** DONE [#C] Define Vim bindings for games
=evil-collection= already defines Vim bindings for Tetris, but not for any other
builtin game.

#+begin_src emacs-lisp :tangle yes
(after! 5x5
  (map! :mode 5x5-mode
    :e "k" #'5x5-up
    :e "j" #'5x5-down
    :e "h" #'5x5-left
    :e "l" #'5x5-right))

(after! blackbox
  (map! :mode blackbox-mode
    :e "k" #'bb-up
    :e "j" #'bb-down
    :e "h" #'bb-left
    :e "l" #'bb-right))

(after! bubbles
  (map! :mode bubbles-mode
    :e "k" #'previous-line
    :e "j" #'next-line
    :e "h" #'backward-char
    :e "l" #'forward-char))

(after! pong
  (defadvice! my/pong-emacs-evil-state-a (&rest _)
    "Use Emacs evil state in `pong'"
    :after #'pong-init
    (evil-emacs-state))
  (map! :map pong-mode-map
    :e "k" #'pong-move-up
    :e "j" #'pong-move-down
    :e "h" #'pong-move-left
    :e "l" #'pong-move-right))

(after! snake
  (map! :mode snake-mode
    :e "l" #'snake-move-right
    :e "h" #'snake-move-left
    :e "k" #'snake-move-up
    :e "j" #'snake-move-down))

(after! solitaire
  (map! :mode solitaire-mode
    :e "l" #'solitaire-right
    :e "h" #'solitaire-left
    :e "k" #'solitaire-up
    :e "j" #'solitaire-down
    :e "L" #'solitaire-move-right
    :e "H" #'solitaire-move-left
    :e "K" #'solitaire-move-up
    :e "J" #'solitaire-move-down))
#+end_src

*** KILL [#C] Bind ~helpful-update~ to an Evil Normal state key
:LOGBOOK:
- Note taken on [2022-09-25 Sun 20:27] \\
  This is now bound to =g r= in Evil Normal state.
:END:
~helpful-update~ is the function that is used to redisplay help buffers (useful
for when a value changes). Currently, I need to switch to Emacs state via =C-z=
and then hit =g=, finally switching back to Normal state via =C-z=.

Options to look at:
+ ~evil-collection-helpful-maps~
+ ~helpful-mode-map~

*** TODO [#B] Improve visual line navigation
I would like to use the standard =gj= and =gk= Vim bindings to navigate between
wrapped visual lines, but a lot of other modes wrap those bindings. An
altnerative solution would be to enable ~evil-respect-visual-line-mode~ in
=DOOMDIR/init.el=, but apparently there are problems with doing so. See this
open issue in Doom Emacs: https://github.com/doomemacs/doomemacs/issues/2447

A temporary workaround is to switch to Emacs state using =C-z= and then use
=C-n= and =C-p= to navigate between visual lines. Once finished, use =C-z= again
to exit Emacs state.

** file-templates [2/2]
#+begin_quote
This module adds file templates for blank files, powered by yasnippet.
#+end_quote

*** DONE [#A] Figure out how to override existing templates
The function ~+file-templates-check-h~ determines if the current buffer is a
candidate for file template expansion, so its source code is probably the best
place to determine how this works.

Digging deeper, it looks like the following form in ~+file-templates-check-h~ is
what actually determines which, if any, template applies to the current buffer:

#+begin_src emacs-lisp :tangle no
(when-let (rule (cl-find-if #'+file-template-p +file-templates-alist))
  (apply #'+file-templates--expand rule))
#+end_src

For a buffer visiting a file named =foo.sh=, the ~rule~ symbol in the ~when-let~
form in the above code block would be assigned the value ~(sh-mode)~, a member
of ~+file-templates-alist~.

Now the important thing is how ~+file-templates--expand~ actually works.
*Potentially-important note*: ~yas_snippets-dirs~ contains ~+snippets-dir~, which
evaluates to =DOOMDIR/snippets/=.

From https://tecosaur.github.io/emacs-config/config.html#file-templates:
#+begin_src emacs-lisp :tangle no
(set-file-template! "\\.tex$" :trigger "__" :mode 'latex-mode)
(set-file-template! "\\.org$" :trigger "__" :mode 'org-mode)
(set-file-template! "/LICEN[CS]E$" :trigger '+file-templates/insert-license)
#+end_src

*** DONE [#B] Simplify the file template for =sh-mode=
Doom Emacs' builtin file template for =sh-mode= is not suitable for portable
shell scripts, so I created my own:
#+begin_src snippet :tangle snippets/sh-mode/__
#!/bin/sh
$0
#+end_src

** fold [0/3]
#+begin_quote
This module marries hideshow, vimish-fold and outline-minor-mode to bring you
marker, indent and syntax-based code folding for as many languages as possible.
#+end_quote

Emacs has a lot of different packages available for folding, for example:

+ =hideshow=
+ =yafolding=
+ =origami=
+ =outline-minor-mode=
+ =vimish-fold=

I'm not convinced that Doom utilizes Emacs folding to its full potential.

*** Vim help text for folding :noexport:
This only contains the relevant commands and nothing Vim-internal.

**** Creating and deleting folds
***** zf{motion} or {Visual}zf - Operator to create a fold
This only works when 'foldmethod' is "manual" or "marker". The new fold will be
closed for the "manual" method. 'foldenable' will be set.

***** zF - Create a fold for [count] lines
Works like "zf".

***** zd - Delete one fold at the cursor
When the cursor is on a folded line, that fold is deleted. Nested folds are
moved one level up. In Visual mode one level of all folds (partially) in the
selected area are deleted. Careful: This easily deletes more folds than you
expect and there is no undo for manual folding. This only works when
'foldmethod' is "manual" or "marker".

***** zD - Delete folds recursively at the cursor
In Visual mode all folds (partially) in the selected area and all nested folds
in them are deleted. This only works when 'foldmethod' is "manual" or "marker".

***** zE - Eliminate all folds in the window
This only works when 'foldmethod' is "manual" or "marker".

**** Opening and closing folds
***** zo - Open one fold under the cursor
When a count is given, that many folds deep will be opened. In Visual mode one
level of folds is opened for all lines in the selected area.

***** zO - Open all folds under the cursor recursively
Folds that don't contain the cursor line are unchanged. In Visual mode it opens
all folds that are in the selected area, also those that are only partly
selected.

***** zc - Close one fold under the cursor
When a count is given, that many folds deep are closed. In Visual mode one level
of folds is closed for all lines in the selected area. 'foldenable' will be set.

***** zC - Close all folds under the cursor recursively
Folds that don't contain the cursor line are unchanged. In Visual mode it closes
all folds that are in the selected area, also those that are only partly
selected. 'foldenable' will be set.

***** za - Toggle fold
When on a closed fold: open it. When folds are nested, you may have to use "za"
several times. When a count is given, that many closed folds are opened.

When on an open fold: close it and set 'foldenable'. This will only close one
level, since using "za" again will open the fold. When a count is given that
many folds will be closed (that's not the same as repeating "za" that many
times).

Open just enough folds to make the line in which the cursor is located not
folded.

***** zm - Fold more
Subtract ~v:count1~ from 'foldlevel'. If 'foldlevel' was already zero nothing
happens. 'foldenable' will be set.

***** zM - Close all folds
Set 'foldlevel' to 0. 'foldenable' will be set.

***** zr - Reduce folding
Add ~v:count1~ to 'foldlevel'.

***** zR - Open all folds
This sets 'foldlevel' to highest fold level.

**** Moving over folds
***** [z - Move to the start of the current open fold
If already at the start, move to the start of the fold that contains it. If
there is no containing fold, the command fails. When a count is used, repeats
the command [count] times.

***** ]z - Move to the end of the current open fold
If already at the end, move to the end of the fold that contains it. If there is
no containing fold, the command fails. When a count is used, repeats the command
[count] times.

***** zj - Move downwards to the start of the next fold
A closed fold is counted as one fold. When a count is used, repeats the command
[count] times. This command can be used after an |operator|.

***** zk - Move upwards to the end of the previous fold
A closed fold is counted as one fold. When a count is used, repeats the command
[count] times. This command can be used after an operator.

*** TODO [#A] Enable fine-grained folding for YAML mode
Play around with folding in the following code block and just /try/ to suppress
your annoyance:

#+begin_src yaml :tangle no
foo:
  bar:
    - 1
    - 2
    - 3
  baz:
    - 4
    - 5
    - 6
quz:
  - hello
  - goodbye
#+end_src

My mind can't even comprehend how broken this is.

*** TODO [#A] Enable fine-grained folding for JSON mode
Play around with folding in the following code block and just /try/ to suppress
your annoyance:

#+begin_src json :tangle no
{
  "foo": {
    "bar": [
      1,
      2,
      3
    ]
    "baz": [
      4,
      5,
      6
    ]
  },
  "quz": [
    "hello",
    "goodbye"
  ]
}
#+end_src

My mind can't even comprehend how broken this is.

*** TODO [#A] Enable Vim fold markers
References:
+ https://www.reddit.com/r/emacs/comments/5ei7wa/awesome_vimlike_folding_for_evilmode_with_markers/
+ https://emacs.stackexchange.com/questions/37363/vim-triple-braces-code-folding-in-emacs

** format [0/0] :ARCHIVE:
#+begin_quote
This module integrates code formatters into Emacs.
#+end_quote

** god [0/0] :ARCHIVE:
** lispy [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://github.com/noctuid/lispyville][lispy]] key functionality in Lisp languages.
#+end_quote

** multiple-cursors [0/0] :ARCHIVE:
** objed [0/0] :ARCHIVE:
#+begin_quote
This modules adds [[https://github.com/clemera/objed][objed]], a global minor-mode for navigating and manipulating
text objects. It combines the ideas of versor-mode and other editors like Vim or
Kakoune and tries to align them with regular Emacs conventions.
#+end_quote

** parinfer [0/0] :ARCHIVE:
#+begin_quote
Parinfer is a proof-of-concept editor mode for Lisp programming languages. It
will infer some changes to keep Parens and Indentation inline with one another.
#+end_quote

** rotate-text [0/0] :ARCHIVE:
** snippets [1/1]
#+begin_quote
This module adds snippets to Emacs, powered by yasnippet.
#+end_quote

*** DONE [#B] Fix ~projectile-edit-dir-locals~
Technically, ~projectile-edit-dir-locals~ is implemented via =skeleton=, not
=yasnippet=. However, I don't have a better place in my literate config to place
this fix.

The problem is that there is no clear way to exit the interactive session
started by ~projectile-edit-dir-locals~, at least not without removing
everything that was inserted into the =.dir-locals.el= buffer.

The following code fixes the problem, allowing =C-g= to exit the session while
keeping the contents of the buffer.

#+begin_src emacs-lisp :tangle yes
(after! projectile

  (defun my/projectile-skel-variable-cons ()
    "Insert a variable-name and a value in a cons-cell.

This function is better than `projectile-skel-variable-cons'
because it allows `keyboard-quit' to exit skeleton insertion
without deleting what has already been inserted. Additionally,
this function constructs cons cells atomically (both the car and
cdr must be present), and a newline is inserted after each cons
cell for better formatting at the end of the skeleton inserted by
`my/projectile-skel-dir-locals'."
    (condition-case err
        (let* ((variable (projectile-read-variable))
               (value (string-trim (read-from-minibuffer
                                    (format "Value of [%s]: " variable)))))
          (format "(%s . %s)\n" variable value))
      (quit nil)))

  (define-skeleton my/projectile-skel-dir-locals
    "Insert a .dir-locals.el template.

This function fixes `projectile-skel-dirs-locals' by relying on
`my/projectile-skel-variable-cons' for cons insertion, allowing
for atomic insertion of cons cells and escaping at any time via
`keyboard-quit' (\\[keyboard-quit]).

Furthermore, trailing parentheses at the end of the lisp data are
properly inserted without a leading linebreak. This is acheived
by using the `>' skeleton token in conjunction with literal
newlines (rather than the `\\n' skeleton token), and then
deleting the final newline before inserting the \")))\"."
    nil
    ;; Ensure that EOL is represented by "\n" in this buffer
    '(setq buffer-file-coding-system 'utf-8-unix)
    "((nil . ("
    ("" > (skeleton-read #'my/projectile-skel-variable-cons nil t))
    & -1 ;; If any cons cells were inserted, remove the previous "\n"
    ")))")

  (advice-add 'projectile-skel-dir-locals
              :override #'my/projectile-skel-dir-locals))
#+end_src

** word-wrap [0/0]
#+begin_quote
This module adds a minor-mode ~+word-wrap-mode~, which intelligently wraps long
lines in the buffer without modifying the buffer content.
#+end_quote

* :emacs
#+begin_quote
Modules that reconfigure or augment packages or features built into Emacs.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :emacs
#+end_src

** Miscellany [7/15]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Enable all disabled commands
#+begin_src emacs-lisp :tangle yes
(setq disabled-command-function nil)
#+end_src

*** DONE [#A] Configure native compilation
#+begin_src emacs-lisp :tangle yes
(when (featurep 'native-compile)
  (setq native-comp-speed 2
        package-native-compile t))
#+end_src

*** DONE [#B] Fix ~doom/sudo-find-file~ and ~doom/sudo-this-file~ :hack:
The resulting ~/sudo:root@localhost:/path/to/file~ string does not work for me,
so I replaced ~"localhost"~ in the original ~doom--sudo-file-path~ with
~tramp-system-name~.

This solves the problem for me and allows me to run =SPC f u=
(~doom/sudo-find-file~) and =SPC f U= (~doom/sudo-this-file~).

#+begin_src emacs-lisp :tangle yes
(defadvice! my/doom--sudo-file-path-a (file)
  "Use `tramp-system-name' instead of \"localhost\" as the hostname"
  :override #'doom--sudo-file-path
  (let ((host (or (file-remote-p file 'host) tramp-system-name)))
    (concat "/" (when (file-remote-p file)
                  (concat (file-remote-p file 'method) ":"
                          (if-let (user (file-remote-p file 'user))
                              (concat user "@" host)
                            host)
                          "|"))
            "sudo:root@" host
            ":" (or (file-remote-p file 'localname)
                    file))))
#+end_src

*** DONE [#C] Don't prompt about killing running processing when quitting
#+begin_src emacs-lisp :tangle yes
(setq confirm-kill-processes nil)
#+end_src

*** DONE [#C] Add aliases for common commands
I'll keep adding more as I need them.

#+begin_src emacs-lisp :tangle yes
(defalias 'ps 'list-processes)
#+end_src

*** DONE [#C] Use elisp formatting for debugger stack trace
I prefer ~(this format)~ over ~that(format)~, since most of the function calls
in the stack trace are elisp functions (not C functions).

#+begin_src emacs-lisp :tangle yes
(setq debugger-stack-frame-as-list t)
#+end_src

*** KILL [#C] Suppress warning for ~Package cl is deprecated~
Like Henrik said, there is nothing we can do about this:
https://github.com/hlissner/doom-emacs/issues/3372

*** TODO [#A] Make windows behave more like ~tmux~ panes
I would like for Emacs to obey the following precepts:

1. *Always* open buffers in the [[help:selected-window][selected-window]] (i.e. current window).
2. *Never* create, split, resize, move, or select windows automatically.

Override mechanisms should be in place for both precepts, but the ultimate goal
is that I never want to be surprised by the window layout. The [[info:elisp#Windows][windows section]]
in the elisp manual should contain information on how to implement all of this.

*** TODO [#A] Implement overarching ~tmux~-like behavior
Additionally, I would like to implement the following behaviors:

1. Do not allow splits when the current window is maximized.
   - On second thought, this behavior could actually be pretty annoying.
   - It is not so annoying with ~tmux~ for a couple of reasons:
     * I can still perform ~vim~ window splits in a maximized pane.
     * I can move panes to a new ~tmux~ window and split from there.
   - Maybe a good middle ground would be to allow window splits in a maximized
     window, but to restore the previous window state (layout and buffers) when
     undoing maximization. Splits in the maximized window would be discarded.
     * This could be achieved by saving the window state when maximizing.
     * A stack data structure could be used for undoing maximization of a split
       window within an already-maximized window.

2. Enable persistent display of "status line" across the entire frame.
   - Could use [[help:tab-bar-mode][tab-bar-mode]]. See also: [[info:emacs#Tab Bars][emacs#Tab Bars]].
     * Should integrate with Doom workspaces.
       + Doom configures =persp-mode= in a handy way that I don't want to
         reimplement (I've struggled with this in the past with vanilla Emacs).
       + I would like to keep the order of workspaces and the order of tabs in
         sync with each other.
       + Could potentially propose a reimplementation of the =:ui tabs= module
         to use builtin tabs by default, with a new =+centaur= module flag to
         keep the current behavior.
   - The status line would display arbitrary global information.
     * Could use [[help:tab-bar-format][tab-bar-format]] to specify what to display and how.
     * Do not want to clutter the modeline with global information.
       + Horizontal screen real estate is limited in the modeline, especially
         when the window is split to take up a fraction of the frame width.
     * Information should include:
       + Doom "workspaces"
         - Could use [[help:tab-bar-tab-name-format-function][tab-bar-tab-name-format-function]].
         - I find it incredibly annoying to always have to press =SPC TAB TAB= in
           order to view my workspaces.
         - When juggling a lot of tasks, the constant display of ~tmux~ windows
           reminds me of the various contexts that I'm working with.
       + Dynamic data
         - Current date and time
         - Battery indicator
         - System load averages
         - Alerts from the OS and Emacs modes
   - Sometimes it would nice to hide the "status line", so the ability to toggle
     its display would be nice. This is what ~tmux~ does.
     * Could use [[help:toggle-frame-tab-bar][toggle-frame-tab-bar]].

3. Allow tabs within a given window, just like ~tmux~ panes displaying ~vim~ or
   nested ~tmux~ sessions.
   - Could use [[help:tab-line-mode][tab-line-mode]].
   - Would like to limit the available buffers when opening new tabs.
     * Could use =persp-mode=.
     * Could use the [[info:elisp#Window History][window history]].
       + Could reimplement the ~:ls~ evil-ex command to use window history, as
         well. This would be closer to a vim/tmux workflow.

*** TODO [#B] Attempt to open a file with ~sudo~ if needed
I might be able to wrap ~find-file~ in a ~condition-case~ form (via ~:around~
advice) that catches errors like this:

: File is not readable: /path/to/file

See the definition of ~evil-quit~ for an example of ~condition-case~.

It might also be possible to add a function to ~+lookup-file-functions~ to
identify files that require elevated privileges to open.

*** TODO [#B] Prevent AWS credentials from being written to ~doom-env-file~
- [ ] Look at recent changes to =core/cli/= and =core/core-cli-lib.el= to fix
  this problem and others in =DOOMDIR/cli.el=.

# :tangle early-init.el
#+begin_src emacs-lisp :tangle no
(when noninteractive
  ;; FIXME This variable is not defined
  (pushnew! doom-env-deny
            "^AWS_ACCESS_KEY_ID$"
            "^AWS_SECRET_ACCESS_KEY$"
            "^AWS_SESSION_TOKEN$"))
#+end_src

*** LOOP [#B] Always trust file-location and directory-local variables
:LOGBOOK:
- Note taken on [2022-07-14 Thu 10:37] \\
  This stopped working for me at some point. Need to revisit.
:END:
For now, just trust ~projectile-*~ variables as long as they apply to files in
=XDG_DOCUMENTS_DIR= or =DOOMDIR=.

#+begin_src emacs-lisp :tangle yes
(after! projectile
  ;; For each atom in `obarray'
  (mapatoms
   (lambda (symbol)
     ;; When the atom is a `projectile' variable
     (when
         (and (boundp symbol)
              (not (keywordp symbol))
              (string-prefix-p "projectile-" (symbol-name symbol)))
       ;; The variable is safe when ...
       (put symbol 'safe-local-variable
            (lambda (_)
              (when
                  ;; ... we are in either XDG_DOCUMENTS_DIR or DOOMDIR
                  ;; TODO See about using `projectile-project-search-path'
                  (-select
                   (lambda (dir)
                     (string-match-p dir (expand-file-name default-directory)))
                   (list (file-name-as-directory (xdg-user-dir "DOCUMENTS"))
                         doom-user-dir))
                t)))))))
#+end_src

*** TODO [#B] Add BitWarden as ~auth-source~ backend
https://github.com/seanfarley/emacs-bitwarden

*** TODO [#B] Figure out the autosave and backup situation for Doom Emacs
Compare with my old config and try to match it.

*** HOLD [#A] Override builtin ~restart-emacs~ function
:LOGBOOK:
- Note taken on [2022-07-29 Fri 18:51] \\
  This only matters in Emacs 29, which I am no longer using (I'm back at 28.1, the
  latest stable version as of now).

  Just a few days ago, Fedora started packaging Emacs 28.1, while before, they
  were back at an older version that did not support native compilation. I was
  using a COPR repo that supports native comp, which also happens to use the
  development version of Emacs. A recent commit added the builtin ~restart-emacs~
  function. Rather than fight with that, I'll fall back to Fedora's new package.
:END:
- Emacs 29 introduced the ~restart-emacs~ function
  - ~emacs-version~ has the version string, but I believe that it was introduced
    in a random commit not really associated with a specific version
  - Probably need to check for the existence of a builtin ~restart-emacs~
    function instead of checking the version string, and then work around it
  - The function is defined in =/usr/share/emacs/29.0.50/lisp/files.el.gz=
- Doom uses the ~restart-emacs~ function defined in the =restart-emacs= package
  - The package is declared in a ~package!~ form in =~/.config/emacs/core/packages.el=
  - The ~package!~ form sets up an autoload for ~restart-emacs~
  - User-defined ~package!~ forms go in =~/.config/doom/packages.el=
- Reference information about autoloads:
  - ~autoload~ (also check the Info documentation)
  - ~load-path~
  - ~lisp-directory~ (=/usr/share/emacs/29.0.50/lisp=)
- Can undefine a function using ~fmakunbound~
- In =~/.config/emacs/core/core.el=, the following comment explains how Doom
  starts up, which may be helpful in solving this problem:
  #+begin_src emacs-lisp :eval no :tangle no
  ;; The overall load order of Doom is as follows:
  ;;
  ;;   $EMACSDIR/early-init.el
  ;;   $EMACSDIR/core/core.el
  ;;   $DOOMDIR/init.el
  ;;   {$DOOMDIR,~/.emacs.d}/modules/*/*/init.el
  ;;   `doom-before-init-modules-hook'
  ;;   {$DOOMDIR,~/.emacs.d}/modules/*/*/config.el
  ;;   `doom-init-modules-hook'
  ;;   $DOOMDIR/config.el
  ;;   `doom-after-init-modules-hook'
  ;;   `after-init-hook'
  ;;   `emacs-startup-hook'
  ;;   `doom-init-ui-hook'
  ;;   `window-setup-hook'
  #+end_src

** dired [1/1]
#+begin_quote
This module provides configuration for dired.
#+end_quote

*** DONE Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `emacs/dired` module
brew install coreutils
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `emacs/dired` module
sudo dnf -y install coreutils
#+end_src

** electric [0/0]
** ibuffer [0/0]
#+begin_quote
This module augments ibuffer.
#+end_quote

** undo [0/1]
#+begin_quote
This module augments Emacs' built-in undo system to be more intuitive and to
persist across Emacs sessions.
#+end_quote

*** STRT [#A] Enable ~undo-tree~
Sometimes this doesn't seem to work.

#+begin_src emacs-lisp :tangle yes
;; This should already be enabled by emacs/undo/config.el
(global-undo-tree-mode)

;; Not sure what the best way is to add this hook
(add-hook 'evil-local-mode-hook #'turn-on-undo-tree-mode)
#+end_src

** vc [2/2]
#+begin_quote
This module augments Emacs builtin version control support and provides better
integration with git.
#+end_quote

*** DONE [#B] Do not prompt when the commit message is too long
#+begin_src emacs-lisp :tangle yes
(after! git-commit
  (delq! 'overlong-summary-line git-commit-style-convention-checks))
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("/git/config\\.d/.+" . gitconfig-mode))
(add-to-list 'auto-mode-alist '("\\.gitignore\\'" . gitignore-mode))
#+end_src

* :term
#+begin_quote
Modules that offer terminal emulation.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :term
#+end_src

** Miscellany [1/1]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE Define a helper function to wrap calls to ~with-editor-export-editor~
#+begin_src emacs-lisp :tangle yes
(defun my/with-editor-export ()
  "Run `with-editor-export-editor' for all envvars that I care about"
  (dolist (var '("EDITOR" "VISUAL"))
    (with-editor-export-editor var)))
#+end_src

** eshell [7/7]
#+begin_quote
This module provides additional features for the built-in [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Emacs Shell]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `term/eshell` module
brew install fish
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `term/eshell` module
sudo dnf -y install fish
#+end_src

*** DONE [#B] Define aliases
#+begin_src emacs-lisp :tangle yes
(set-eshell-alias!
  ;; C-x [0123]
  "0" "delete-window"
  "1" "delete-other-windows"
  "2" "split-window-below"
  "3" "split-window-right"

  ;; find-file
  "e"  "find-file $1"
  "4e" "find-file-other-window $1"
  "5e" "find-file-other-frame $1"

  ;; find-file-read-only
  "r"  "find-file-read-only $1"
  "4r" "find-file-read-only-other-window $1"
  "5r" "find-file-read-only-other-frame $1"

  ;; view-file
  "v"  "view-file $1"
  "4v" "view-file-other-window"
  "5v" "view-file-other-frame"

  ;; eww-open-file
  "w" "eww-open-file $1"

  ;; shell commands
  "git" "git --no-pager -c color.ui=always -c interactive.singleKey=false $*"
  "f"   "cd $1 && ls")
#+end_src

*** DONE [#B] Do not scroll after every command
#+begin_src emacs-lisp :tangle yes
(after! eshell
  (setq eshell-scroll-show-maximum-output nil))
#+end_src

*** DONE [#B] Make ^L simply scroll (not insert a bunch of blank lines
As long as the first element of ~recenter-positions~ is ~top~ (which is
how I have things configured), the following works great.

#+begin_src emacs-lisp :tangle yes
(after! eshell
  (advice-add 'eshell/clear :override #'recenter-top-bottom))
#+end_src

*** DONE [#B] Export ~$EDITOR~ to =eshell=
*NOTE*: At one point, I was hesistant to do this (see quote), but I cannot
figure out how to replicate the problem, nor can I prove that the problem
doesn't exist. In any case, it works perfectly with =git=, and that's all I
really care about.

#+begin_quote
Unlike with =vterm=, we currently do not export ~$EDITOR~ to =eshell=. This is
to avoid a dangerous situation in which =C-c C-k= not only returns an error code
to =eshell=, it forcefully clears the file on disk.
#+end_quote

#+begin_src emacs-lisp :tangle yes
(add-hook! eshell-mode #'my/with-editor-export)
#+end_src

*** KILL [#B] Fix ANSI escape codes
:LOGBOOK:
- Note taken on [2022-07-15 Fri 19:40] \\
  This doesn't seem to be a problem for me anymore on Fedora.
:END:
When there is a lot of colorized output (for example, the output of ~git log -p~
on a big repo), eventually ANSI escape codes do not get interpreted. Here is an
example from ~doom doctor~:
#+begin_example
[33mThere are 4 warnings![0m
[32m✓ Finished in 7.4969s[0m
#+end_example

*** KILL [#B] Fix terminal type
:LOGBOOK:
- Note taken on [2022-07-15 Fri 20:09] \\
  This is no longer a problem now that I have removed TERM=eterm-color
  from the git eshell alias
:END:
Sometimes ~git~ will spit the following:
#+begin_example
tput: unknown terminal "eterm-color"
#+end_example

** shell [0/0] :ARCHIVE:
** term [0/0] :ARCHIVE:
** vterm [5/8]
#+begin_quote
This module provides a terminal emulator powered by libvterm. It is still in
alpha and requires a component be compiled (=vterm-module.so=).
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `term/vterm` module
brew install libvterm cmake
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `term/vterm` module
sudo dnf -y install libvterm cmake
#+end_src

*** DONE [#B] Export editor variables to =vterm=
#+begin_src emacs-lisp :tangle yes
(add-hook! vterm-mode #'my/with-editor-export)
#+end_src

*** DONE [#B] Let =C-m= send =<return>=
#+begin_src emacs-lisp :tangle yes
(after! vterm
  (defalias 'vterm-send-C-m #'vterm-send-return))
#+end_src

*** DONE [#B] Let =C-j= and =<M-backspace>= pass through in Evil insert state
#+begin_src emacs-lisp :tangle yes
(after! evil-collection-vterm
  (dolist (key '("C-j" "<M-backspace>"))
    (evil-collection-define-key 'insert 'vterm-mode-map
      (kbd key) 'vterm--self-insert)))
#+end_src

*** DONE [#B] Define aliases
These depend on the existence of a ~vterm_cmd~ function. See the =README.md= for
=vterm= for more information.

#+begin_src emacs-lisp :tangle yes
(after! vterm

  ;; This function is to be called in shell configuration to obtain the
  ;; directory in which to read aliases
  (defun my/vterm--write-user-emacs-directory (tmpfile)
    "Write the string evaluation of `user-emacs-directory' to TMPFILE."
    (f-write user-emacs-directory 'utf-8 tmpfile))
  (add-to-list 'vterm-eval-cmds '("my/vterm--write-user-emacs-directory"
                                  my/vterm--write-user-emacs-directory))

  (defun my/set-vterm-alias (&rest aliases)
    "Define aliases for vterm.

ALIASES is a flat list of alias -> command pairs. e.g.

  (my/set-vterm-alias
    \"e\" \"find-file\"
    \"r\" \"find-file-read-only\")"
    (or (cl-evenp (length aliases))
        (signal 'wrong-number-of-arguments (list 'even (length aliases))))
    (with-temp-file (concat user-emacs-directory "vterm-aliases.sh")
      (while aliases
        (let ((alias (pop aliases))
              (command (pop aliases)))
          (add-to-list 'vterm-eval-cmds (list command (intern command)))
          (insert (format "alias %s='vterm_cmd %s'\n" alias command))))))

  (my/set-vterm-alias
    ;; Define aliases to open files in Emacs
    "e"  "find-file"
    "4e" "find-file-other-window"
    "5e" "find-file-other-frame"

    ;; Define aliases to open files in Emacs (read-only)
    "r"  "find-file-read-only"
    "4r" "find-file-read-only-other-window"
    "5r" "find-file-read-only-other-frame"

    ;; Define aliases to prevent issues with recursive editing
    "vi"    "find-file"
    "vim"   "find-file"
    "emacs" "find-file"

    ;; Define aliases for standalone commands that have Emacs equivalents
    "man"  "man"
    "info" "info"

    ;; Define aliases for special Emacs functionality
    "w"    "eww-open-file"
    "gg"   "magit-status"))
#+end_src

*** STRT [#A] Get =vterm= working with ~kubectl~
This seems to work with =kubel= as long as no =vterm= buffers exist:

#+begin_src emacs-lisp :tangle yes
(after! vterm
  (let ((alist (assoc-delete-all "kubectl" vterm-tramp-shells)))
    (setq vterm-tramp-shells
          (push '("kubectl" "sh -c \"clear; (bash || ash || sh)\"") alist))))
#+end_src

The above code block is necessary, but I also need to do one or more of the
following (I had done everything listed when I got it working once before):

1. Prevent =with-editor= export to =vterm= (although this should theoretically
   work with remote containers over TRAMP)
2. Set ~vterm-use-vterm-prompt-detection-method~ to ~nil~
3. Bypass =$HOME/.environ.d/vterm.sh=

So far, the only remote shell method that's working for me is ANSI Term (=term=)
via =kubel=, though ideally I'd use =vterm= with =kubernetes= and get rid of
=kubel= altogether (the working remote shell capability is the only reason why
I'm keeping that package around).

*** HOLD [#A] Allow scrolling back while output is being written
https://github.com/akermu/emacs-libvterm/issues/397

Right now, =C-c C-t= (~vterm-copy-mode~) can be used to toggle output being
written to the buffer. When there is no output being written, you can freely
scroll back in the buffer. Unfortunately there is no better way to do this at
the moment, but it works pretty well anyway.

*** TODO [#C] Prevent ~git-graph~ cutoff
The last character ("o" in this case) gets hidden:
#+begin_example
$ git graph
,* 65a8a6b6da9176bea78eb78c604120714207bcc5 Initial commit  eeowaa   3 weeks ag
#+end_example

I say "hidden" instead of "truncated" because if you kill the line and yank it
into another buffer, you can see the "o". *Note that this is only a problem in
GUI Emacs, not terminal Emacs. Also, this is only a problem in popup buffers.*

* :checkers
** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :checkers
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** syntax [2/4]
*** DONE [#A] Disable flycheck in all Org source blocks :hack:
References:
+ [[help:flycheck-may-enable-mode]]
+ [[help:flycheck-ephemeral-buffer-p]]
+ [[info:elisp#Buffer Names][elisp#Buffer Names]]
+ [[info:elisp#Advice Combinators][elisp#Advice Combinators]]

~flycheck-global-mode~ only enables ~flycheck-mode~ in a buffer when
~flycheck-may-enable-mode~ returns ~t~. One predicate considered by
~flycheck-may-enable-mode~ is ~flycheck-ephemeral-buffer-p~, whose
implementation determines that a buffer is ephemeral only if its name begins
with a space. However, I also consider Org source buffers to be ephemeral,
despite their names not starting with a space.

By advising ~flycheck-ephemeral-buffer-p~ to also consider Org source buffers as
ephemeral, I can achieve my goal of disabling flycheck in all Org source
buffers. The reason why I do this is because Org source buffers are most often
snippets of a wider context (e.g. literate programs, interpreter sessions) and
are therefore very prone to syntax errors when viewed independently; *these
errors should not be reported*.

#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (defadvice! my/org-src-a (&rest _)
    "Consider Org Src buffers as ephemeral (do not enable flycheck)."
    :after-until #'flycheck-ephemeral-buffer-p
    (string-prefix-p "*Org Src" (buffer-name))))
#+end_src

*** KILL [#B] Disable flycheck in Emacs Lisp config files
:LOGBOOK:
- Note taken on [2022-09-22 Thu 20:31] \\
  The following commit removes ~+emacs-lisp-disable-flycheck-in-dirs~:
  https://github.com/doomemacs/doomemacs/commit/afa154db27fc5ff710e8c76061c7579eee2cd918
:END:
#+begin_src emacs-lisp :tangle no
(mapc (lambda (config-file-dir)
        (add-to-list '+emacs-lisp-disable-flycheck-in-dirs config-file-dir))
      ;; Unique directory components of canonical config file paths
      (delete-dups
       (mapcar (lambda (config-file)
                 (file-name-directory (file-chase-links config-file)))
               ;; Config file paths in canonical config directories
               (mapcan (lambda (config-dir)
                         (directory-files config-dir t "\\.el"))
                       (list (file-truename doom-emacs-dir)
                             (file-truename doom-user-dir))))))
#+end_src

*** STRT [#A] Allow dynamic changing of error levels displayed
I have created a couple commands (~my/flycheck-set-level~ and
~my/flycheck-reset-level~) as an interface to Flycheck's error-level toggling
functionality. (Note that Flycheck is missing the capability to hide errors in
the source buffer by error level, and after a bit of digging, it seems too
difficult to implement myself.)

However, when toggling the Flycheck buffer using =SPC c x=, the buffer-local
value of ~flycheck-error-list-minimum-level~ gets reset in the error list, while
it (and the buffer-local value of ~flycheck-navigation-minimum-level~) remain
unchanged in the source buffer. This creates a mismatch that must be resolved by
running ~my/flycheck-set-level~ again. Due to this problem, I've decided to
temporarily keep the two new commands unbound to any keys.

#+begin_src emacs-lisp :tangle yes
(after! flycheck
  (defun my/flycheck-set-level (level)
    "Set the Flycheck error level"
    (interactive
     (list (flycheck-read-error-level
            "Minimum error level (errors at lower levels will be hidden): ")))
    (when (and level (not (flycheck-error-level-p level)))
      (user-error "Invalid level: %s" level))

    ;; Hide errors in the error list that have a level lower than `level'
    (flycheck-error-list-set-filter level)
    (with-current-buffer (or flycheck-error-list-source-buffer (current-buffer))
      (setq-local flycheck-error-list-minimum-level level)

      ;; Only navigate between errors in the source buffer than have a level of
      ;; at least `level' (other errors will still be displayed)
      (setq-local flycheck-navigation-minimum-level level)))

  (defun my/flycheck-reset-level (&optional refresh)
    "Reset the Flycheck error level"
    (interactive '(t))

    ;; Refresh the error list according to the global value of
    ;; `flycheck-error-list-minimum-level'
    (flycheck-error-list-reset-filter refresh)
    (with-current-buffer (or flycheck-error-list-source-buffer (current-buffer))
      (kill-local-variable 'flycheck-error-list-minimum-level)

      ;; Refresh navigation between errors in the source buffer according to the
      ;; global value of `flycheck-navigation-minimum-level'
      (kill-local-variable 'flycheck-navigation-minimum-level))))
#+end_src

*** STRT [#B] Show error indicators in the margin when in terminal Emacs
Terminal Emacs does not have fringes -- only margins -- so when Emacs is run in
nongraphical mode, I would like for Flycheck to use the right margin instead of
the right fringe for error indicators. As far as I can tell, the right margin is
not used for anything, so Flycheck should be free to use it.

Unfortunately, when I change ~flycheck-indication-mode~ to ~right-margin~ and
then run ~flycheck-refresh-fringes-and-margins~, nothing displays in the right
margin. This happens in both TUI and GUI Emacs. Also, just as a test, I tried
changing the setting to ~left-margin~, but that did not work, either (note that
the left margin is currently used by =:ui vc-gutter=).

I should probably use ~doom/sandbox~ (=SPC h d x=) to try this in vanilla Emacs
and see if Doom is to blame.

** spell [3/5]
#+begin_quote
This modules provides spellchecking powered by =aspell=, =hunspell= or =enchant=.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macoS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `checkers/spell` module
brew install aspell
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `checkers/spell` module
sudo dnf -y install aspell
#+end_src

*** DONE [#A] Prevent ~spell-fu-mode~ from being enabled by default
I like having the option, but I would prefer to enable it manually per buffer.

#+begin_src emacs-lisp :tangle yes
(when (and (modulep! :checkers spell)
           (not (modulep! :checkers spell +flyspell)))
  (remove-hook 'text-mode-hook 'spell-fu-mode))
#+end_src

**** COMMENT My initial stab at this
:LOGBOOK:
- Note taken on [2021-05-28 Fri 15:22] \\
  This was very convoluted and unnecessary, but I learned a lot during this
  process, so I want to save my work for future reference.
:END:
Unfortunately, ~use-package-hook!~ cannot be used to remove ~spell-fu-mode~ from
~text-mode-hook~ as set in the ~:hook~ section of the ~use-package!~ declaration
for =spell-fu= in the =checkers/spell= Doom module. (See [[https://emacs.stackexchange.com/questions/64395/how-to-override-the-hook-section-of-a-use-package-declaration][this post on Emacs
StackExchange]] for confirmation.)

Instead, I have decided to advise the ~add-hook~ function to prevent specific
functions from being added to specific hooks.

Note that I tangle to =early-init.el= (which I ~load!~ at the start of
=init.el=) so that the ~add-hook~ advice can be in place before the ~doom!~
block loads the =checkers/spell= module, which is what sets the hook.

: #+begin_src emacs-lisp :tangle early-init.el
#+begin_src emacs-lisp :tangle no
(setq my/hook-deny-list
      '((text-mode-hook . spell-fu-mode)))

(defun my/hook-denied-p (&rest r)
  (let ((hook (car r))
        (func (cadr r)))
    (member (cons hook func) my/hook-deny-list))

(advice-add 'add-hook :before-until #'my/hook-denied-p)
#+end_src

*** DONE [#B] Prevent =which-key= errors related to =spell-fu= :hack:
If I press =]= before =spell-fu= has been loaded and wait for a =which-key=
popup, I get the following error:

: Error running timer ‘which-key--update’: (void-function +spell/next-error)

Considering that the function /should/ be autoloaded in =+spell-fu.el= (see code
snippet below), I don't know why I'm getting that error.

#+begin_src emacs-lisp :tangle no
;;;###autoload (defalias '+spell/next-error #'spell-fu-goto-next-error)
#+end_src

Regardless, I just want to fix the issue. A manual workaround is to execute
=SPC t s= (~spell-fu-mode~) twice: the first time to load =spell-fu= and the
second time to disable it. For now, I'll just always require it:

#+begin_src emacs-lisp :tangle yes
(require 'spell-fu)
#+end_src

*** TODO [#B] Fix ~+spell/add-word~
~+spell/correct~ (=zg=) spits the following error:
#+begin_quote
Cannot add "<word>" to any active dictionary.
#+end_quote

Reference:
- ~ispell-personal-dictionary~
- ~spell-fu-word-add~
- ~spell-fu-dictionaries~

*** HOLD [#B] Fix ~+spell/correct~
:LOGBOOK:
- Note taken on [2021-06-25 Fri 11:13] \\
  I am no longer seeing this error and cannot replicate it.
:END:
~+spell/correct~ (=z==) spits the following error on macOS:
#+begin_quote
Starting new Ispell process aspell with english dictionary...done
ispell-init-process: Error: /Users/eeowaa/.config/emacs/.local/etc/ispell/english.pws: The language "english" is not known. This is probably because: the file "/usr/local/Cellar/aspell/0.60.8/lib/aspell-0.60/english.dat" can not be opened for reading.
#+end_quote

*UPDATE*: After running the following, it worked for me:
#+begin_src sh :tangle no
rm -rf ~/.config/emacs/.local/etc/ispell
#+end_src

I also ran the following, but I'm not sure if it made a difference:
#+begin_src emacs-lisp :tangle yes
(setq ispell-dictionary "english")
#+end_src

**** TODO Prevent this from happening
I don't know why, but this problem reappears on me.

**** TODO Make spelling corrections match recommendations
The =company= backend that provides spelling recommendations (via =C-SPC=) must
use a different dictionary than the =spell= module that highlights errors and
provides corrections. For example, the word "fluctuant" is highlighted as a
spelling error by the =spell= module but is a completion for "flu" (just type
=C-SPC= in Evil insert state with the cursor positioned after the "u" in "flu").

** grammar [1/1] :ARCHIVE:
#+begin_quote
This module adds grammar checking to Emacs to aid your writing by combining
=lang-tool= and =writegood-mode=.
#+end_quote

*** STRT [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `checkers/grammar` module
brew install languagetool
sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk
#+end_src

**** STRT Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `checkers/grammar` module
curl -L https://raw.githubusercontent.com/languagetool-org/languagetool/master/install.sh | sudo bash
# TODO: See if the following command is needed
# sudo ln -sfn /usr/local/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk
#+end_src

* :tools
#+begin_quote
Small modules that give Emacs access to external tools & services.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :tools
#+end_src

** Miscellany [1/4]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE Configure =eeowaa-project= package
#+begin_src emacs-lisp :tangle yes
(setq eeowaa-project-init-files-alist
      '(;; Git
        (".gitignore")
        (".gitattributes")

        ;; Documentation
        ("README.md")
        ("LICENSE")
        ("todo.org")

        ;; Dev tooling
        (".envrc")
        (".editorconfig")))
#+end_src

*** TODO Add templates for each file in =eeowaa-project=
*** TODO Add support to =eeowaa-project= for language-specific files
+ =.gitignore= (steal from https://github.com/github/gitignore.git)
+ Packaging (e.g. =package.json=, =Dockerfile=)
+ Execution (e.g. =package.json=, =docker-compose.yml=)
+ =.dir-locals.el= (for =projectile= configuration)
+ =todo.org= (for language-specific boilerplate tasks)

Could add templates under =stow-dotfiles/<lang>/.local/etc/skel/= (this is what
I'm currently doing with Python). I could also create subdirectories under
=skel/= specific to certain project types.

*** TODO Add support to =eeowaa-project= for environment-specific files
+ CI/CD (e.g. steal from https://github.com/Microsoft/azure-pipelines-yaml)
+ PR templates (e.g. =.azuredevops/pull_request_template.md=)

** ansible [1/1]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/ansible` module
brew install ansible
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/ansible` module
pipx install ansible-core
ansible-galaxy collection install community.general
#+end_src

** debugger [1/3]
Reference: https://docs.doomemacs.org/latest/modules/tools/debugger/

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/debugger` module
# https://stackoverflow.com/questions/18423124/please-check-gdb-is-codesigned-see-taskgated8-how-to-get-gdb-installed-w
brew install gdb
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/debugger` module
sudo dnf -y install lldb gdb unzip
nvm install node
#+end_src

*** LOOP [#A] Configure Realgud
See the section for "Realgud" on [[https://docs.doomemacs.org/latest/modules/tools/debugger/][this web page]].

#+begin_src emacs-lisp :tangle no
(after! dap-mode
  (dap-gdb-lldb-setup))
#+end_src

*** TODO [#A] Fix DAP mode error message
I get this error when I visit a file that invokes ~lsp!~:
#+begin_example
(doom-hook-error lsp!
  (error Recursive load
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/dap-mode/dap-mode.el
    ~/.config/emacs/.local/straight/build-28.0.50/lsp-mode/lsp-mode.el))
#+end_example

For now, I might just want to unset ~lsp-enable-dap-auto-configure~ and see if
that prevents errors. Worst case, I could disable =debugger=.

*UPDATE*: Unfortunately I was unable to resolve this quickly and opted to
disable =debugger= for the time being (it's not super-important for me right
now, anyway).

** direnv [1/4]
:LOGBOOK:
- Note taken on [2022-08-11 Thu 17:08] \\
  I have re-enabled this module and things seem to be working OK so far. That
  said, I don't have any complicated use cases right now.
:END:
#+begin_quote
This module integrates direnv into Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/direnv` module
brew install direnv
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/direnv` module
sudo dnf -y install direnv
#+end_src

*** TODO [#A] See why =direnv= prevents envvars from propagating between buffers
This is the original reason why I disabled this module.

*UPDATE*: It looks like the =envrc= package is used by the =direnv= module.
According to the =envrc= project's [[https://github.com/purcell/envrc][documentation]]:

#+begin_quote
This library is like the direnv.el package, but sets all environment variables
buffer-locally, while direnv.el changes the global set of environment variables
after each command.
#+end_quote

So environment variables are set buffer-locally. I wonder if I can exclude
certain environment variables (such as AWS credentials) from this rule, or if I
can somehow set them in a global location to get pulled in by all "dir
environments". Maybe there is a rule for that.

For the sake of debugging, you might want to try the following function:

#+begin_src emacs-lisp :tangle yes
(defun my/aws-envvars ()
  "Print the values of AWS environment variables"
  (interactive)
  (dolist (var (seq-filter
                (lambda (s) (string-match "\\`AWS_" s))
                (sort process-environment #'string<)))
    (princ (concat var "\n"))))
#+end_src

*** TODO [#A] Understand how Emacs handles environment variables
+ [ ] Play around with the following Lisp Interaction buffer
  #+begin_src lisp-interaction :tangle no
  ;; Variables
  initial-environment
  process-environment
  exec-path
  doom-env-file

  ;; Function calls
  (getenv "PATH")
  (getenv "PATH" (selected-frame))
  (getenv-internal "PATH")
  (doom/reload-env)
  (doom-load-envvars-file)
  #+end_src
+ [ ] Consult the documentation for all of those variables and functions
+ [ ] See how Doom Emacs uses those functions and variables (=SPC h d e=)
+ [ ] See how =envrc= uses those functions and variables (=C-h C-l envrc RET=)
  - [ ] Retrieve =envrc= source (=M-x package-install RET envrc RET=)

*** TODO [#B] Try =direnv.el= instead of =envrc=
https://github.com/wbolster/emacs-direnv

However, be wary of @purcell's comments on =direnv.el=:
#+begin_quote
+ When switching to a buffer that is not "inside" a project with an =.envrc= file,
  the buffer will see the last project's environment. I would prefer it to see
  the default Emacs environment.

+ When =direnv= fails to execute in the course of switching to a buffer in a new
  project with an =.envrc= file (e.g. because that =.envrc= file is disallowed),
  buffers in the new project will see the environment variables from the
  previous project.

+ Background buffers from a previous project will start seeing the new project's
  environment, so any processes they launch asynchronously after the switch will
  use the wrong environment. (This is probably quite rare in practice.)
#+end_quote

** docker [2/2]
#+begin_quote
This module allows you to manipulate Docker images, containers & more from
Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/docker` module
brew install docker
npm install -g dockerfile-language-server-nodejs
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/docker` module
sudo dnf -y install shadow-utils fuse-overlayfs iptables
sudo systemctl disable --now docker.service docker.socket
dockerd-rootless-setuptool.sh install
curl -fsSL https://get.docker.com/rootless | sh
cat >"$HOME/.profile.d/docker-rootless.sh" <<\EOF
export PATH=$HOME/bin:$PATH
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
EOF
. "$HOME/.profile.d/docker-rootless.sh"
systemctl --user start docker.service
sudo loginctl enable-linger `whoami`
npm install -g dockerfile-language-server-nodejs
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("/Containerfile\\'" . dockerfile-mode))
#+end_src

** editorconfig [1/1]
#+begin_quote
This module integrates [[https://editorconfig.org/][EditorConfig]] into Emacs, allowing users to dictate code
style on a per-project basis with an =.editorconfig= file ([[https://editorconfig-specification.readthedocs.io/][formal
specification]]).
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/editorconfig` module
brew install editorconfig
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/editorconfig` module
sudo dnf -y install editorconfig
#+end_src

** ein [3/4]
#+begin_quote
Adds Jupyter notebook integration into emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/ein` module
brew install python
pipx install --include-deps jupyter
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/ein` module
sudo dnf -y install python3 pipx
pipx install --include-deps jupyter
#+end_src

*** DONE [#B] Display inline images in output
#+begin_src emacs-lisp :tangle yes
(setq ein:output-area-inlined-images t)
#+end_src

*** DONE [#B] Configure =ob-ein=
#+begin_src emacs-lisp :tangle yes
;; HACK The machinery provided by `ob-ein-languages' and `ob-ein--babelize-lang'
;; is insufficient for bash, so we do it by hand.
(after! ob
  (add-to-list 'org-babel-load-languages '(ein . t))
  (require 'ob-ein)

  ;; Execute in an anonymous local session by default
  (setq ob-ein-default-header-args:ein
        '((:session . "localhost")))

  ;; This does two things:
  ;; 1. Allows the correct kernel to be selected for execution
  ;; 2. Enables bash-specific features in the source buffer
  (when (not (fboundp 'bash-mode))
    (define-derived-mode bash-mode sh-mode "Bash-script"
      "Major mode for editing bash scripts."
      (sh-set-shell "bash" nil nil)))
  (add-to-list 'org-src-lang-modes '("ein-bash" . "bash"))

  ;; Send output from `ein-bash' source blocks back to org buffer
  (let ((alist (assoc-delete-all :results ob-ein-default-header-args:ein)))
    (setq org-babel-default-header-args:ein-bash
          (push '(:results . "output verbatim") alist)))

  ;; Function to execute `ein-bash' source blocks with
  (defun org-babel-execute:ein-bash (body params)
    (require 'ob-shell nil t)
    ;; hack because ob-ein loads independently of ein
    (custom-set-variables '(python-indent-guess-indent-offset-verbose nil))
    (let ((parser 'org-babel-variable-assignments:bash))
      (ob-ein--execute-body
       (if (fboundp parser)
           (org-babel-expand-body:generic
            body params (funcall (symbol-function parser) params))
         body)
       params))))
#+end_src

*** TODO [#C] Exclude result names from =ox-ipynb= output
In the following example, ~a34ef92b-1a76-41b3-a410-79bdac3f55e9~ would appear
after the output block of the resulting IPYNB buffer:

#+begin_src org :eval no
,#+NAME: a34ef92b-1a76-41b3-a410-79bdac3f55e9
,#+begin_src ein-bash
echo "Hi, ${name}!"
,#+end_src

,#+RESULTS: a34ef92b-1a76-41b3-a410-79bdac3f55e9
: Hi, Mom!
#+end_src

A workaround is to simply *not export* the results.

** evay [0/0]
** gist [0/0] :ARCHIVE:
** lookup [1/4]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/lookup` module
brew install ripgrep sqlite3
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/lookup` module
sudo dnf -y install ripgrep sqlite-3
#+end_src

*** STRT [#A] Automatically install missing docsets
For whatever reason, this is not working (does not get called upon entering a
mode derived from ~prog-mode~, even though ~prog-mode-hook~ does get updated).

#+begin_src emacs-lisp :tangle yes
(when (modulep! :tools lookup +docsets)
  (defun my/ensure-docsets ()
    (dolist (docset dash-docs-docsets)
      (dash-docs-ensure-docset-installed (string-replace " " "_" docset))))
  ;; REVIEW Ensure that `set-docsets!' is only called for modes derived from `prog-mode'
  (add-hook! prog-mode #'my/ensure-docsets))
#+end_src

*** LOOP [#A] Fix the error "Given parent class xref-location is not a class"
Upon [[https://github.com/hlissner/doom-emacs/issues/5658#issuecomment-946207769][Henrick's advice]], I've pinned =xref= to the last known working commit. This
is currently only a problem on Emacs 28.

#+begin_src emacs-lisp :tangle packages.el
(when EMACS28+
  (package! xref :pin "a82f459b37b31546bf274388baf8aca79e9c30d9"))
#+end_src

*** HOLD [#C] Add dictionary and thesaurus backends for =SPC s t/T=
I've done everything that the Doom documentation told me to do, but things
aren't working very well. Just try it out for yourself and see. Might want to
open a PR or two.

** lsp [1/4]
*** COMMENT Documentation
+ [[doom-modules:tools/lsp/README.org][tools/lsp module documentation]]
+ [[doom:.local/straight/repos/lsp-mode/README.md][lsp-mode package README]]
+ [[doom:.local/straight/repos/lsp-mode/docs/page][lsp-mode package documentation]]
  - [[doom:.local/straight/repos/lsp-mode/docs/page/performance.md][performance.md]]
  - [[doom:.local/straight/repos/lsp-mode/docs/page/troubleshooting.md][troubleshooting.md]]

*** DONE [#B] Automatically restart the LSP server when it crashes
#+begin_src emacs-lisp :tangle yes
(after! lsp
  (setq lsp-restart 'auto-restart))
#+end_src

*** TODO [#A] Fix the size of the popup buffer invoked by =M-x lsp=
/Note that ~lsp~ is invoked when you enter a buffer, as well/.

When the frame is too small (e.g. its default size), the first few menu items in
the popup window are cut off, and all you see are options to exclude the file
from the LSP workspace. Unless you know about the other available options, LSP
won't work for you. Unfortunately, resizing the frame does not help.

*** LOOP [#B] Provide better integration with lsp-ui-imenu
+ ~lsp-ui-imenu~ provides a smoother and more aesthetically-pleasing experience
  compared to ~imenu-list~, but there are currently no keybindings to open it.
  - Essentially, I need to map ~lsp-ui-imenu~ to an LSP prefix map
    + =SPC c l T i= would be good for a toggle, but ~lsp-ui-imenu~ by itself
      does not toggle the window.
    + Reference ~imenu-list-minor-mode~ to see how it toggles its window.
+ https://emacs-lsp.github.io/lsp-ui/#lsp-ui-imenu

For now, I am just going to assign ~lsp-ui-imenu~ to Doom's toggle map (having a
hard time figuring out how to assign to the LSP prefix map). It is not really a
toggle (it just refreshes), but it is nice to have a keybinding.

#+begin_src emacs-lisp :tangle yes
(define-key! doom-leader-toggle-map
  "i" #'lsp-ui-imenu)

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`%s t i\\'" prefix-re)) nil . "LSP Imenu")
                which-key-replacement-alist)))
#+end_src

*** LOOP [#B] Look into LSP performance improvements
Resources:
+ [[help:lsp-doctor][lsp-doctor]]
+ [[doom:.local/straight/repos/lsp-mode/docs/page/performance.md][performance.md]]

**** LOOP Enable plist-based JSON deserialization
From =performance.md=:

#+begin_quote
1. Configure the following env variable. Make sure that Emacs can see that
   variable (best way to do that is to start Emacs from the shell, not from
   the icon).
   : export LSP_USE_PLISTS=true
2. Delete ~lsp-mode~ related packages.
3. Make sure that ~lsp-use-plists~ is non-nil.
4. Restart Emacs and install again ~lsp-mode~ related packages.
#+end_quote

For whatever reason, after doing all of the above, sometimes hash tables are
expected and I get messages like this:

#+begin_quote
Wrong type argument: hash-table-p
#+end_quote

Until I get things figured out, I am going to continue to use hash tables.

#+begin_src emacs-lisp :tangle no
(setq lsp-use-plists t)
#+end_src

** magit [2/2]
*** STRT [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/magit` module
(cd ~/Documents/src/life/stow-dotfiles && make perl)
brew install perl git-absorb
cpan install App::Git::Autofixup
#+end_src

**** STRT Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/magit` module
(cd ~/Documents/src/life/stow-dotfiles && make perl)
sudo dnf -y install perl
# TODO: Find equivalent to git-absorb
# TODO: Fix cpan install command
cpan install App::Git::Autofixup
#+end_src

*** DONE [#C] Configure list of repositories
#+begin_src emacs-lisp :tangle yes
(setq magit-repository-directories
      '(("~/Documents/src" . 2)
        ("~/Documents/ref" . 1)))
#+end_src

** make [0/0]
** pass [0/0] :ARCHIVE:
** pdf [1/1]
*** COMMENT Documentation
+ [[doom-modules:tools/pdf/README.org][tools/pdf module documentation]]
+ [[doom:.local/straight/repos/pdf-tools/README.org][pdf-tools package README]]

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/pdf` module
brew install pkg-config poppler automake
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/pdf` module
sudo dnf -y install pkgconf pkgconf-pkg-config poppler automake
#+end_src

** prodigy [0/0] :ARCHIVE:
** rgb [0/0] :ARCHIVE:
** taskrunner [0/0] :ARCHIVE:
** terraform [1/2]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `tools/terraform` module
brew install terraform hashicorp/tap/terraform-ls
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `tools/terraform` module
sudo dnf -y install terraform terraform-ls
#+end_src

*** LOOP [#B] Configure LSP
+ [[doom:.local/straight/repos/lsp-mode/docs/manual-language-docs/lsp-terraform-ls.md][lsp-terraform-ls.md]]
+ Need to verify that this all works as intended
+ Probably have more to go to bring LSP up to par with Doom modules having
  official LSP support

#+begin_src emacs-lisp :tangle yes
;; <https://emacs-lsp.github.io/lsp-mode/page/lsp-terraform-ls/>
(when (modulep! :tools terraform +lsp)
  (setq
    ;; Use the official Hashicorp language server from Hashicorp
    lsp-disabled-clients '(tfls)

    ;; Enable reference counts
    lsp-terraform-ls-enable-show-reference t

    ;; REVIEW Enable semantic token support
    lsp-semantic-tokens-enable t
    lsp-semantic-tokens-honor-refresh-requests t)

  ;; Set keybindings for LSP (reference existing LSP configurations)
  (after! terraform-mode
    (map! :map terraform-mode-map
          :localleader
          (:prefix ("l" . "LSP")
            :desc "terraform init" "i" #'lsp-terraform-ls-init
            :desc "terraform validate" "v" #'lsp-terraform-ls-validate
            :desc "Providers widget" "p" #'lsp-terraform-ls-providers
            :desc "Module calls widget" "m" #'lsp-terraform-ls-module-calls))))
#+end_src

** tmux [0/0] :ARCHIVE:
** upload [0/0] :ARCHIVE:
* :os
#+begin_quote
Modules to improve integration into your OS, system, or devices.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :os
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** macos [2/2]
*** DONE [#A] Remap keys for macOS
#+begin_src emacs-lisp :tangle yes
(when IS-MAC
  (setq ;; Comfortable keys that work most of the time
        mac-command-modifier 'control
        mac-right-command-modifier 'meta

        ;; Workaround for when system keybindings take precedence
        mac-control-modifier 'control
        mac-right-control-modifier 'meta

        ;; For exotic mappings
        mac-option-modifier 'super
        mac-right-option-modifier 'hyper))
#+end_src

*** DONE [#B] Experiment with Keychain as a member of ~auth-sources~
The following example applies to =forge=, but works the same way with other
Emacs facilities.

#+CAPTION: Command to create Keychain entry
#+begin_src sh :tangle no
security add-internet-password -U \
    -s 'api.github.com' \
    -D 'Internet password' \
    -a 'eeowaa^forge' \
    -r 'htps' \
    -w '********' \
    "$HOME/Library/Keychains/login.keychain-db"
#+end_src

#+RESULTS:

#+CAPTION: Entry as viewed in "Keychain Access" app
| Field    | Value                  |
|----------+------------------------|
| Name     | api.github.com         |
| Type     | Internet password      |
| Account  | eeowaa^forge           |
| Where    | https://api.github.com |
| Password | ********               |

#+CAPTION: Elisp to retrieve the password
#+begin_src emacs-lisp :tangle no
(auth-source-pick-first-password
 :host "api.github.com"
 :user "eeowaa^forge")
#+end_src

See also:
+ ~auth-source-search~ (details the argument spec for ~:host~, ~:user~, etc.)
+ ~auth-sources~ (specifies a list of backing secret stores)

** tty [0/0] :ARCHIVE:
* :lang
#+begin_quote
Modules that bring support for a language or group of languages to Emacs.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :lang
#+end_src

** Miscellany [1/2]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Install packages
#+begin_src emacs-lisp :tangle packages.el
;; Markup
(package! adoc-mode)

;; Filtering
(package! sed-mode)
(package! jq-mode)

;; Config
(package! systemd)

;; Builds
(package! jenkinsfile-mode)

;; Applescript
(when IS-MAC
  (package! applescript-mode)
  (package! ob-applescript))

;; MongoDB
(package! ob-mongo)
(package! inf-mongo)
#+end_src

Note that MongoDB queries use Javascript syntax, so there is no Mongo-specific
mode derived from ~prog-mode~ (just use ~js-mode~).

*** TODO [#A] Configure Perl modes
Doom Emacs does not have a module for Perl 5. That said, Emacs has a lot of
built-in functionality for Perl that just needs a little bit of configuration.

** agda [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the [[http://wiki.portal.chalmers.se/agda/pmwiki.php][agda]] programming language. The Emacs support
exists directly in the agda repository but not in melpa.
#+end_quote

** beancount [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://beancount.github.io/][Beancount]] to Emacs. Beancount, like ledger, lets
you [[https://plaintextaccounting.org/][manage your money in plain text]].
#+end_quote

** cc [1/2]
#+begin_quote
This module adds support for the C-family of languages: C, C++, and Objective-C.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/cc` module
brew install ccls gdb glslang
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/cc` module

## GCC
sudo dnf -y install gcc gdb

## clangd
sudo dnf -y install clang clang-tools-extra

## ccls
sudo dnf -y install cmake clang clang-devel llvm-devel rapidjson
(
    set -e
    mkdir -p "$HOME/.local/src" && cd "$HOME/.local/src"
    if [ -d ccls ]
    then git -C ccls pull -f
    else git clone --depth=1 --recursive https://github.com/MaskRay/ccls
    fi
    cd ccls && rm -rf Release
    cmake -H. -BRelease -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
    cmake --build Release
    sudo cmake --install Release
)

## GLSL
sudo dnf -y install glslang

## CMake
sudo dnf -y install cmake
pipx install cmake-language-server
#+end_src

*** STRT [#B] Use Linux kernel style for C :TESTME:
#+begin_src emacs-lisp :tangle yes
(after! cc-mode
  (unless (stringp c-default-style)
    (if (assoc 'c-mode c-default-style)
        ;; Modify existing `c-mode' cons cell in `c-default-style'
        (setf (alist-get 'c-mode c-default-style) "linux")
      ;; Insert a new `c-mode' cons cell into `c-default-style'
      (setq c-default-style
            (cons '(c-mode . "linux")
                  c-default-style))))

  ;; REVIEW Not sure why this is necessary
  (add-hook! 'c-mode-hook
   (setq tab-width
         (alist-get 'c-basic-offset (assoc "linux" c-style-alist)))))
#+end_src

** clojure [0/0] :ARCHIVE:
#+begin_quote
This module adds support for the Clojure(Script) language.
#+end_quote

** common-lisp [0/0] :ARCHIVE:
** coq [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://coq.inria.fr][coq]] support, powered by [[https://proofgeneral.github.io][Proof General]].
#+end_quote

** crystal [0/0] :ARCHIVE:
#+begin_quote
This modules adds [[https://crystal-lang.org/][crystal]] support.
#+end_quote

** csharp [1/2]
#+begin_quote
This module adds C# support to Emacs. Powered by omnisharp (directly or through
LSP).
#+end_quote

*** TODO [#A] Install prerequisites
**** TODO macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/csharp` module
#+end_src

**** LOOP Fedora
I think that this is correct, but I have not tested the setup, so I do not know
for sure. Loop back to this once you actually need to use C#.

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/csharp` module

## dotnet
sudo dnf -y install dotnet

## omnisharp-roslyn
github_binary_release \
    --repo OmniSharp/omnisharp-roslyn \
    --asset omnisharp-linux-x64-net6.0.tar.gz \
    --prefix "$HOME/.local/opt/microsoft/omnisharp-roslyn" \
    --path . \
    --binary OmniSharp

# netcoredbg
github_binary_release \
    --repo Samsung/netcoredbg \
    --asset netcoredbg-linux-amd64.tar.gz \
    --prefix "$HOME/.local/opt/microsoft" \
    --path netcoredbg \
    --binary netcoredbg
#+end_src

*** DONE [#A] Replace =C-c d= with =C-c n= :hack:
=C-c <letter>= keybindings are supposed to be reserved for users, but =C-c d= is
unconditionally bound to ~sharper-main-transient~ in [[doom-modules:lang/csharp/config.el][lang/csharp/config.el]]. The
problem is that I want =C-c d= bound to a hydra for elisp debugging.

For now, I'm OK with binding ~sharper-main-transient~ to =C-c n= (the "n" stands
for the "net" in "dotnet"). To get what I want, I overwrite the ~use-package!~
declaration for =sharper=:

#+begin_src emacs-lisp :tangle yes
;; Modified from commit ad6a3d0f3 of lang/csharp/config.el
(use-package! sharper
  :when (modulep! +dotnet)
  :general ("C-c n" #'sharper-main-transient)
  :config
  (map! (:map sharper--solution-management-mode-map
         :nv "RET" #'sharper-transient-solution
         :nv "gr" #'sharper--solution-management-refresh)
        (:map sharper--project-references-mode-map
         :nv "RET" #'sharper-transient-project-references
         :nv "gr" #'sharper--project-references-refresh)
        (:map sharper--project-packages-mode-map
         :nv "RET" #'sharper-transient-project-packages
         :nv "gr" #'sharper--project-packages-refresh)
        (:map sharper--nuget-results-mode-map
         :nv "RET" #'sharper--nuget-search-install)))
#+end_src

I would rather use ~use-package-hook!~ than rewrite the whole ~use-package!~
declaration, but I don't know if/how that is possible, because ~:general~ is
used instead of ~:config~ to specify the keybinding.

** data [2/2]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/data` module
curl --create-dirs \
    -o ~/.config/emacs/.local/etc/lsp/xmlls/org.eclipse.lemminx-0.20.0-uber.jar \
    https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.20.0/org.eclipse.lemminx-0.20.0-uber.jar
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/data` module
curl --create-dirs \
    -o ~/.config/emacs/.local/etc/lsp/xmlls/org.eclipse.lemminx-0.20.0-uber.jar \
    https://repo.eclipse.org/content/repositories/lemminx-releases/org/eclipse/lemminx/org.eclipse.lemminx/0.20.0/org.eclipse.lemminx-0.20.0-uber.jar
#+end_src

*** DONE [#A] Do not remove trailing whitespace in TSV mode
Trailing whitespace in =tsv-mode= could represent empty fields (if that
whitespace is a series of consecutive tabs), which we want to preserve.

#+begin_src emacs-lisp :tangle yes
(after! ws-butler
  (pushnew! ws-butler-global-exempt-modes 'tsv-mode))
#+end_src

We could be picky about this and write a different whitespace cleanup function
for =ws-butler= to use in =tsv-mode= buffers to remove trailing spaces while
keeping trailing tabs, or maybe even to removing trailing spaces from each
tab-separated field, but this is good enough for now.

** dart [0/0] :ARCHIVE:
#+begin_quote
[[https://dart.dev/][Dart]] is a client-optimized language by Google for fast apps on any platform.
It is fast and optimized for UI, famous for the [[https://flutter.io/][Flutter]] framework, also
made by Google. Both Flutter and Dart are free and open-source.
#+end_quote

** dhall [0/0] :ARCHIVE:
** elixer [0/0] :ARCHIVE:
#+begin_quote
This module provides support for [[https://elixir-lang.org/][Elixir programming language]] via [[https://github.com/tonini/alchemist.el][alchemist.el]]
or [[https://github.com/elixir-lsp/elixir-ls/][elixir-ls]].
#+end_quote

** elm [0/0] :ARCHIVE:
** emacs-lisp [3/3]
#+begin_quote
This module extends support for Emacs Lisp in Doom Emacs.
#+end_quote

*** COMMENT Documentation
+ Debugging
  - [[info:eintr#Debugging][Introduction]]
+ Authoring macros
  - [[info:elisp#Problems with Macros][Avoiding common problems]]
    1. Do the "real work" /in the expansion/, not /during expansion/.
    2. Prevent arguments from being evaluated too many times /in the expansion/.
    3. If symbols are created /in the expansion/, even within ~let~ forms, those
       symbols should be created /during expansion/ using ~make-symbol~ to
       prevent namespace collision when the macro is called.
    4. Due to variable scoping issues, do not ~eval~ macro arguments /during
       expansion/. Instead, refer to the argument /in the expansion/.
    5. Avoid side-effects on objects constructed /during expansion/, as this can
       cause issues in byte-compiled code.

*** DONE [#B] Prepend ";; => " to output in Lisp Interaction Mode
https://www.reddit.com/r/emacs/comments/bz9rxn/weekly_tipstricketc_thread/eqrf693?utm_source=share&utm_medium=web2x

#+begin_src emacs-lisp :tangle yes
(defadvice! my/format-result-a (f &rest r)
  "Prepend \";; =>\"."
  :around #'eval-print-last-sexp
  (let ((p (point)))
    (apply f r)
    (save-excursion
      (goto-char p)
      (forward-line 1)
      (insert ";; => "))))
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("Cask\\'" . lisp-data-mode))
#+end_src

*** DONE [#A] Load my own local packages
References:
+ [[id:fb9fd833-7379-41f0-9cfe-d86baef3095e][Using/loading local packages]]
+ [[id:2cef25eb-e326-439e-ab3e-82eb65f074db][=autoload/*.el= OR =autoload.el=]]
+ [[info:elisp#Autoload][elisp#Autoload]]

#+begin_quote
[Add] the package's location to Emacs' ~load-path~ (...) if you don't need/care
for autoload cookies or byte-compilation.
#+end_quote

#+begin_src emacs-lisp :tangle yes
;; Add $DOOMDIR/lisp to `load-path'
(add-load-path! (concat doom-user-dir "lisp"))
(require 'eeowaa-project)
;; (require 'eeowaa-debug) NOTE: This is providing nothing of value right now
#+end_src

** erlang [0/0] :ARCHIVE:
#+begin_quote
This module provides support [[https://www.erlang.org/][Erlang programming language]]. Support for the
[[https://github.com/erlang/sourcer][sourcer]] language server is optional.
#+end_quote

** ess [0/0] :ARCHIVE:
#+begin_quote
This module adds support for various statistics languages, including R, S-Plus,
SAS, Julia and Stata.
#+end_quote

** factor [0/0] :ARCHIVE:
#+begin_quote
This module adds support to the [[https://github.com/factor/factor][factor]] programming language and its associated
_fuel_ emacs plugin.
#+end_quote

** faust [0/0] :ARCHIVE:
#+begin_quote
Add support to Faust language inside emacs.
#+end_quote

** fsharp [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://fsharp.org/][F#]] support.
#+end_quote

** fstar [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://fstar-lang.org/][F*]] support, powered by [[https://github.com/FStarLang/fstar-mode.el][fstar-mode.el]].
#+end_quote

** gdscript [0/0] :ARCHIVE:
#+begin_quote
This module adds support for GDScript, the scripting language of the [[http://godotengine.org/][Godot]] game
engine, to Doom Emacs, powered by [[https://github.com/GDQuest/emacs-gdscript-mode][gdscript-mode]].
#+end_quote

** go [0/1]
#+begin_quote
This module adds [[https://golang.org][Go]] support, with optional (but recommended) LSP support via
[[https://github.com/golang/tools/blob/master/gopls/README.md][gopls]].
#+end_quote

*** STRT [#A] Install prerequisites
**** STRT macOS
Reference the installation code block for Fedora.

#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/go` module
(cd ~/Documents/src/life/stow-dotfiles && make go)
brew install go gopls golangci-lint
# FIXME (see https://github.com/rocky/ssa-interp)
# curl -Lo- https://raw.githubusercontent.com/rocky/ssa-interp/HEAD/gub-installer | bash
go get -v -u github.com/motemen/gore/cmd/gore
go get -v -u github.com/stamblerre/gocode
go get -v -u golang.org/x/tools/cmd/godoc
go get -v -u golang.org/x/tools/cmd/goimports
go get -v -u golang.org/x/tools/cmd/gorename
go get -v -u golang.org/x/tools/cmd/guru
go get -v -u github.com/cweill/gotests/...
go get -v -u github.com/fatih/gomodifytags
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/go` module
(cd ~/Documents/src/life/stow-dotfiles && make go)
export GOPATH=$HOME/go

## Required dependencies
sudo dnf -y install golang
go install golang.org/x/tools/gopls@latest
go install github.com/x-motemen/gore/cmd/gore@latest
go install github.com/stamblerre/gocode@latest
go install golang.org/x/tools/cmd/godoc@latest
go install golang.org/x/tools/cmd/goimports@latest
go install golang.org/x/tools/cmd/gorename@latest
go install golang.org/x/tools/cmd/guru@latest
go install github.com/cweill/gotests/gotests@latest
go install github.com/fatih/gomodifytags@latest

## Linting
asset=`
    curl -s https://api.github.com/repos/golangci/golangci-lint/releases/latest | jq -r \
    '.assets[] | select(.name | endswith("-linux-amd64.tar.gz")) | .name'
`
github_binary_release \
    --repo golangci/golangci-lint \
    --asset "$asset" \
    --prefix "$HOME/.local/opt/golangci" \
    --path "${asset%*.tar.gz}" \
    --binary golangci-lint

## Debugging
sudo dnf -y install llvm
#+end_src

** haskell [2/2]
#+begin_quote
This module adds [[https://www.haskell.org/][Haskell]] support, powered by either [[https://github.com/jyp/dante][dante]] (the default) or LSP
(haskell-language-server or ghcide).
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
~ghc~, ~stack~, and ~cabal~ can be installed via ~dnf~, which would
significantly speed up execution of the following code block. That said, I have
not investigated ~hls~ installation options outside of ~ghcup~, and it does not
appear to have support through Fedora's official ~dnf~ repos.

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/haskell` module

## Meta package manager
## TODO: Verify GPG signatures (https://www.haskell.org/ghcup/install/#manual-install)
curl --proto '=https' --tlsv1.2 -sSf -Lo "$HOME/.local/bin/ghcup" \
    https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup
chmod +x "$HOME/.local/bin/ghcup"

## Compiler
ghcup install ghc
(
    version=`
        ghcup list \
            --tool ghc \
            --show-criteria installed \
            --raw-format 2>/dev/null |
        tail -1 | awk '{print $2}'
    `
    cd ~/.ghcup/bin
    ln -sf ghc-$version ghc
    ln -sf ghci-$version ghci
)

## Language server
ghcup install hls

## Code formatting
ghcup install stack
stack install brittany # "$HOME/.ghcup/bin" must be in PATH

# Linter and documentation lookup
ghcup install cabal
cabal update           # "$HOME/.ghcup/bin" must be in PATH
cabal install hlint    # "$HOME/.ghcup/bin" must be in PATH
cabal install hoogle   # "$HOME/.ghcup/bin" must be in PATH
#+end_src

*** DONE [#A] Specify desired formatter
#+begin_src emacs-lisp :tangle yes
(after! lsp-haskell
  (setq lsp-haskell-formatting-provider "brittany"))
#+end_src

** hy [0/0] :ARCHIVE:
** idris [0/0] :ARCHIVE:
#+begin_quote
This module adds rudimentary Idris support.
#+end_quote

** json [1/1]
#+begin_quote
This module provides JSON support.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/json` module
brew install jq
npm install -g vscode-langservers-extracted
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/json` module
dnf -y install jq
npm install -g vscode-langservers-extracted
#+end_src

** java [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.java.com][java]] support to Doom Emacs, including =android-mode= and
=groovy-mode=.
#+end_quote

** javascript [2/4]
:PROPERTIES:
:CATEGORY: doom/ts
:END:
#+begin_quote
This module adds JavaScript and TypeScript support.
#+end_quote

Currently, I am only using TypeScript -- not vanilla JavaScript -- so the
~:CATEGORY:~ property for this subtree is set to ~doom/ts~.

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/javascript` module
npm install -g typescript typescript-language-server eslint trepan-ni
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/javascript` module
npm install -g typescript typescript-language-server eslint trepan-ni
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.npmignore\\'" . gitignore-mode))
#+end_src

*** TODO [#A] Fix broken filename-mode association for =*.js= files
When I open a =*.js= file, I get the following error:
: File mode specification error: (error Given parent class xref-location is not a class)

I need to manually run =M-x javascript-mode RET= in order to enable JavaScript mode.

*** HOLD [#B] Set up debugging
+ Try ~dap-mode~ https://www.youtube.com/watch?v=0bilcQVSlbM
+ Holding until I complete the following: [[*Fix DAP mode error message][Fix DAP mode error message]]

** julia [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://julialang.org/][the Julia language]] to Doom Emacs.
#+end_quote

** kotlin [0/0] :ARCHIVE:
#+begin_quote
This module adds Kotlin support to Emacs.
#+end_quote

** latex [1/1]
#+begin_quote
Provide a helping hand when working with LaTeX documents.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/latex` module
brew install mactex texlab wget
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/latex` module
(cd ~/Documents/src/life/stow-dotfiles && make lua)
sudo dnf -y install texlive-scheme-basic

## Install lsp server: digestif
sudo dnf -y install luarocks lua-devel
luarocks --local install digestif
#+end_src

** lean [0/0] :ARCHIVE:
** ledger [0/0] :ARCHIVE:
#+begin_quote
This module adds support for [[https://www.ledger-cli.org/][ledger]] files. Ledger is a command line double-entry
accounting system that works with simple text files holding transactions.
#+end_quote

** lua [1/2]
#+begin_quote
Adds Lua support to Doom Emacs
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/lua` module
github_binary_release \
    --repo sumneko/lua-language-server \
    --asset 'lua-language-server-.*-linux-x64.tar.gz' \
    --prefix "$HOME/.local/opt/lua-language-server" \
    --path . \
    --binary bin/lua-language-server
#+end_src

*** STRT [#A] Configure ~lua-language-server~ integration
- [-] ~+lua-lsp-dir~
- [ ] ~lsp-clients-lua-language-server-bin~

#+begin_src emacs-lisp :tangle yes
(after! lua-mode
  (setq lsp-clients-lua-language-server-install-dir
        (concat (file-name-as-directory (getenv "HOME"))
                ".local/opt/lua-language-server")

        lsp-clients-lua-language-server-bin
        (concat (file-name-as-directory lsp-clients-lua-language-server-install-dir)
                "bin/lua-language-server")

        lsp-clients-lua-language-server-main-location
        (concat (file-name-as-directory lsp-clients-lua-language-server-install-dir)
                "main.lua")))
#+end_src

** markdown [8/10]
:PROPERTIES:
:CATEGORY: doom/markdown
:END:
#+begin_quote
This module provides Markdown support for Emacs.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/markdown` module
npm install -g markdownlint-cli marked
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/markdown` module
npm install -g markdownlint-cli marked
pipx install grip
#+end_src

*** DONE [#B] Improve Markdown readability
+ https://emacs.stackexchange.com/questions/3753/prettify-symbols-mode-character-replacement-regex

| Before      | After |
|-------------+-------|
| \\.         | .     |
| \\(         | (     |
| \\)         | )     |
| \\-         | -     |
| &copy       | ©    |
| <a.*>.*</a> |       |

#+begin_src emacs-lisp :tangle yes
(add-to-list 'font-lock-extra-managed-props 'display)
(font-lock-add-keywords
 'markdown-mode
 '(("\\(\\\\\\)[[().-]" 1 '(face nil display ""))
   ("&copy;" 0 '(face nil display "©"))
   ("<a name=\".*\"></a>" 0 '(face nil display ""))))
#+end_src

*** DONE [#B] Preview Markdown buffers in an external browser
Regardless of what I've set ~browse-url-browser-function~ to, I would like to
preview Markdown rendering in the system browser.

#+begin_src emacs-lisp :tangle yes
(after! markdown
  (defun my/markdown-preview (f &rest r)
    (let ((browse-url-browser-function #'browse-url-default-browser))
      (apply f r)))
  (advice-add 'markdown-preview :around #'my/markdown-preview))
#+end_src

*** DONE [#B] Fontify source blocks
#+begin_src emacs-lisp :tangle yes
(setq markdown-fontify-code-blocks-natively t)
#+end_src

*** DONE [#B] Disable error reporting in markdown-mode buffers
Reference: [[*Disable error reporting in sh-mode buffers][Disable error reporting in sh-mode buffers]]

#+begin_src emacs-lisp :tangle yes
;; Prevent flycheck from being automatically enabled
(if (or (not (boundp 'flycheck-global-modes))
        (not (eq 'not (car flycheck-global-modes))))
    (setq flycheck-global-modes '(not markdown-mode))
  (let ((modes (cdr flycheck-global-modes)))
    (setcdr flycheck-global-modes (pushnew! modes 'markdown-mode))))

;; Prevent lsp diagnostics from being enabled
(if (boundp 'lsp-diagnostics-disabled-modes)
    (pushnew! lsp-diagnostics-disabled-modes 'markdown-mode)
  (setq lsp-diagnostics-disabled-modes '(markdown-mode)))

;; Don't bother checking for an LSP diagnostics provider in sh-mode
(setq-hook! 'markdown-mode-hook
  lsp-diagnostics-provider :none)
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("\\.mdx\\'" . markdown-mode))
#+end_src

*** DONE [#B] Show edit buffer in the current window
The call stack for =C-c '= is as follows:

- ~markdown-edit-code-block~
  - ~edit-indirect-region~
    - ~edit-indirect--display-buffer~
      - ~display-buffer~
      - ~select-window~

The important function is ~display-buffer~. Its [[help:display-buffer][help text]] describes setting
~display-buffer-alist~ to configure fine-grained window selection (in fact, this
is what Doom Emacs uses for its =popup= module). The help text goes on to
mention the ~display-buffer-overriding-action~ variable, which is given the
highest priority in window selection but is only meant to be set temporarily,
which is perfect for ~:around~ advice:

#+begin_src emacs-lisp :tangle yes
(after! markdown-mode
  (defun my/markdown-edit-code-block (f &rest r)
    (let ((display-buffer-overriding-action (list #'display-buffer-same-window)))
      (apply f r)))
  (advice-add 'markdown-edit-code-block :around #'my/markdown-edit-code-block))

#+end_src

*** DONE [#B] Create a =SPC m .= binding like in Org mode
#+begin_src emacs-lisp :tangle yes
(cond
 ((modulep! :completion ivy)
  (defalias 'counsel-markdown-goto #'counsel-outline)
  (map! :map markdown-mode-map
        :localleader
        "." #'counsel-markdown-goto))
 ((modulep! :completion vertico)
  (defalias 'consult-markdown-goto #'consult-outline)
  (map! :map markdown-mode-map
        :localleader
        "." #'consult-markdown-goto)))
#+end_src

*** TODO [#B] Live-preview Markdown buffers in an external browser
Live preview still happens in =eww= buffers.

*** TODO [#C] Replace =font-lock= hiding with native =markdown-mode= hiding
+ Open link: [[file:~/.config/emacs/.local/straight/repos/markdown-mode/markdown-mode.el::defun markdown-toggle-markup-hiding (&optional arg][(defun markdown-toggle-markup-hiding]]
+ Open link: [[file:~/.config/emacs/.local/straight/repos/markdown-mode/markdown-mode.el::;;; Markup Hiding =============================================================][;;; Markup Hiding]]

** nim [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://nim-lang.org][Nim]] support to Emacs.
#+end_quote

** nix [0/0] :ARCHIVE:
#+begin_quote
Adds many tools for [[https://nixos.org/][Nix(OS)]] users in nice package for Doom users.
#+end_quote

** ocaml [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://ocaml.org/][OCaml]] support to Doom Emacs, powered by [[https://github.com/ocaml/tuareg][tuareg-mode]].
#+end_quote

** org [20/40]
:PROPERTIES:
:CATEGORY: doom/org
:COOKIE_DATA: recursive
:END:
#+begin_quote
This module adds org-mode support to Doom Emacs, along with a number of
adjustments, extensions and reasonable defaults to make it more performant and
intuitive out of the box.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/org` module
brew install gnuplot pandoc graphviz pngpaste
mkdir -p ~/org/roam
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/org` module
sudo dnf -y install gnuplot pandoc graphviz sqlite-3
pipx install --include-deps jupyter
pipx inject jupyter ipykernel
mkdir -p ~/org/roam
#+end_src

*** Document Structure [1/4]
**** DONE [#A] Do not indent headlines
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-hide-leading-stars nil
        org-startup-indented nil
        org-adapt-indentation nil))
#+end_src

**** STRT [#A] Insert new headlines just how I like them
This is mostly done, but I do not want there to be a blank line after drawers or
scheduling information:

+ [ ] ~^:END:$~
+ [ ] ~^\\(?:DEADLINE\\|SCHEDULED\\):~

#+begin_src emacs-lisp :tangle yes
(after! org
  (setcdr (assoc 'heading org-blank-before-new-entry) nil)
  (defun my/org-insert-heading-spacing ()
    "Surround an Org heading with appropriate whitespace.

This is the general idea:

,* A
,* B
Entry content

,** B.1
,** B.2
:PROPERTIES:...

,** B.3
,* C (intentional blank line in entry)

,* D
"
    ;; Delete all blank lines following the heading
    (delete-blank-lines)
    ;; Set spacing appropriately before the heading
    (save-excursion
      (forward-line -1)
      ;; What immediately precedes the heading line?
      (cond
       ;; Another heading line (or same heading at beginning of buffer) => do nothing
       ((org-at-heading-p) t)
       ;; Blank line => squeeze consecutive blank lines
       ((looking-at-p "[[:blank:]]*$") (delete-blank-lines))
       ;; Non-blank non-heading line => insert a blank line before the heading
       (t (forward-line 1) (newline)))))
  (defun my/org-insert-heading-visibility ()
    "Redisplay the previous Org heading.

I cannot figure out where the visibility state is saved, so I
just perform a complete cycle of `org-cycle'."
    (save-window-excursion
      (save-excursion
        (org-previous-visible-heading 1)
        ;; XXX Doom-specific
        (when evil-mode (evil-normal-state))
        (call-interactively #'org-cycle)
        (call-interactively #'org-cycle))))
  (defun my/org-insert-heading-evil-state ()
    "End up with the cursor in 'insert mode' at the end of the Org heading"
    ;; XXX Doom-specific
    (when evil-mode (evil-org-append-line 1)))
  (add-hook! org-insert-heading #'my/org-insert-heading-spacing
                                #'my/org-insert-heading-visibility
                                #'my/org-insert-heading-evil-state))
#+end_src

**** TODO [#A] Prevent irreversibly hidden content
Over the course of a typical editing session, I oftentimes need to kill Org
buffers and re-open the corresponding Org files (especially this one) because
text is hidden and cannot be revealed, even after ~widen~ and switching to
~fundamental-mode~.

Most often, the hidden content is a subtree, but sometimes drawers. In both
cases, I can see the headline, but I cannot open the object to reveal its
content.

This has been going on for so long that my workaround (to kill the buffer and
reload the contents into a fresh buffer) has nearly become muscle memory, but I
really shouldn't have to do this.

**** TODO [#C] Create headline sorting function
+ Sort by priority, then by by ~TODO~ keyword
+ Reference ~org-sort-entries~

*** Tables [0/0]
*** Hyperlinks [3/6]
**** DONE [#A] Add missing org link (=ol-*=) modules
References:
+ [[file:~/.config/emacs/modules/lang/org/config.el::(defvar org-modules][~/.config/emacs/modules/lang/org/config.el]]
+ [[file:~/.config/emacs/.local/straight/repos/org/lisp/][~/.config/emacs/.local/straight/repos/org/lisp/]]

#+begin_src emacs-lisp :tangle yes
(after! org
  (dolist (ol-module '(ol-man ol-info ol-w3m))
    (add-to-list 'org-modules ol-module)))
#+end_src

**** DONE [#B] Open file links in another window
+ https://stackoverflow.com/questions/17590784/how-to-let-org-mode-open-a-link-like-file-file-org-in-current-window-inste
+ [[help:org-link-frame-setup]]

#+begin_src emacs-lisp :tangle yes
(after! org
  (setcdr (assoc 'file org-link-frame-setup) #'find-file-other-window))
#+end_src

**** DONE [#C] Configure how links to man pages are opened
#+begin_src emacs-lisp :tangle yes
(setq org-man-command
      (if (and (not IS-MAC) (executable-find "man"))
          #'man
        #'woman))
#+end_src

**** TODO [#B] Create method to open links in specified window
I have at least a few different options:

1. Allow explicit selection via =ace-window=
   - [[help:display-buffer-overriding-action][display-buffer-overriding-action]]
2. Create a command to open =org= links in a window with a specific parameter
   - [[info:elisp#Window Parameters][elisp#Window Parameters]]
   #+begin_src emacs-lisp :tangle no
   ;; Set parameter for current window
   (set-window-parameter (selected-window) 'org-open-link t)

   ;; Get windows with specific parameter
   (mapcar (lambda (window) (window-parameter window 'org-open-link)) (window-list))
   #+end_src
3. Temporarily modify ~display-buffer-alist~
   - [[info:elisp#Frame Layouts with Side Windows][info:elisp#Frame Layouts with Side Windows]]
4. Temporarily instruct Doom's =popup= module

**** TODO [#B] Open specific URLs in specific browsers
Currently not tangled, as it breaks certain functionality.

#+begin_src emacs-lisp :tangle no
(after! browse-url
  (setq browse-url-handlers
        '((".*amazon\\.com.*" . #'browse-url-firefox)
          ("awsapps\\.com" . #'browse-url-chrome))))
#+end_src

For example, the following form will error out:

#+begin_src emacs-lisp :tangle no
(browse-url "https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-privatelink-zones/")
#+end_src

#+begin_quote
browse-url: No suitable browser for URL https://aws.amazon.com/about-aws/whats-new/2021/09/aws-lambda-privatelink-zones/
#+end_quote

**** TODO [#C] Create method to store Org links from =eshell= buffers
Just store the current working directory.

*** Todo Items [2/4]
**** DONE [#A] Inherit priority so that subtasks appear under their parents in the agenda
#+begin_src emacs-lisp :tangle yes
(after! org
  (defun my/org-inherited-priority (s)
    (cond
     ;; Priority cookie in this heading
     ((string-match org-priority-regexp s)
      (* 1000 (- org-priority-lowest
                 (org-priority-to-value (match-string 2 s)))))
     ;; No priority cookie, but already at highest level
     ((not (org-up-heading-safe))
      (* 1000 (- org-priority-lowest org-priority-default)))
     ;; Look for the parent's priority
     (t
      (my/org-inherited-priority (org-get-heading)))))
  (setq org-priority-get-priority-function #'my/org-inherited-priority))
#+end_src

**** DONE [#C] Insert notes into ~:LOGBOOK:~ drawer without logging state changes
#+begin_src emacs-lisp :tangle yes
;; REVIEW See if there is a cleaner way to temporarily set `org-log-into-drawer'
(after! org
  (defun my/org-add-note-advice (f &rest r)
    (let ((restore org-log-into-drawer))
      (setq org-log-into-drawer t)
      (apply f r))
      (setq org-log-into-drawer restore))
  (advice-add 'org-add-note :around #'my/org-add-note-advice))
#+end_src

**** LOOP [#B] Make it easier to jump to headlines across Org buffers
:LOGBOOK:
- Note taken on [2022-10-01 Sat 21:19] \\
  Refactor for =vertico=.
:END:
#+begin_src emacs-lisp :tangle yes
(when (modulep! :completion ivy)
  (setq counsel-org-goto-all-outline-path-prefix 'buffer-name))
#+end_src

**** TODO [#C] Create integration between embedded ~TODO~ and project =todo.org=
Something like this Atlassian VS Code plugin:
https://support.atlassian.com/bitbucket-cloud/docs/jira-issues-in-vs-code/

+ Embedded ~TODO~ comments:
  + https://github.com/tarsius/hl-todo
  + ~hl-todo-keyword-faces~
  + ~hl-todo-next~, ~hl-todo-previous~, ~hl-todo-occur~
+ Project =todo.org= list:
  + ~org-capture-templates~
  + ~counsel-projectile-org-capture-templates~
  + ~counsel-projectile-org-capture~
+ Integration with Git:
  + https://github.com/alphapapa/magit-todos
  + ~magit-todos-list~

*** Tags [0/0]
*** Properties and Columns [0/1]
**** TODO [#C] Fix emoji display in Org column mode
:PROPERTIES:
:COLUMNS: %TODO %ITEM %attentive(👂) %diligent(🚜) %inventive(🔧) %astute(🎯) %curious(🔭) %nurturing(💯) %uncompromising(🎖) %visionary(🌎) %daring(🏈) %frugal(💵) %trustworthy(🤝) %probing(🔎) %assertive(☝) %productive(📦)
:END:
| Icon | Property       | Amazon Leadership Principle        |
|------+----------------+------------------------------------|
| 👂   | attentive      | Customer Obsession                 |
| 🚜   | diligent       | Ownership                          |
| 🔧   | inventive      | Invent and Simplify                |
| 🎯   | astute         | Are Right, A Lot                   |
| 🔭   | curious        | Learn and Be Curious               |
| 💯   | nurturing      | Hire and Develop the Best          |
| 🎖   | uncompromising | Insist on the Highest Standards    |
| 🌎   | visionary      | Think Big                          |
| 🏈   | daring         | Bias for Action                    |
| 💵   | frugal         | Frugality                          |
| 🤝   | trustworthy    | Earn Trust                         |
| 🔎   | probing        | Dive Deep                          |
| ☝   | assertive      | Have Backbone; Disagree and Commit |
| 📦   | productive     | Deliver Results                    |

For whatever reason, only the emoji for "uncompromising" and "assertive" are
showing in Org column view when invoked by =C-c C-x C-c= (~org-columns~).
Additionally, the cursor jumps one column to the right when moving to the lines
in the table that contain either of those emoji, somewhat suggesting that they
are one character wider than the others. Unfortunately, when replacing those
"two-character-wide" emoji with alternative "one-character-wide" emoji to
achieve consistent "character width", what happens is that no emoji are
displayed at all.

*** Dates and Times [0/0]
*** Refiling and Archiving [0/1]
**** STRT [#C] Display distinguishable name in refile targets
I've accomplished by goal, but I don't like seeing the entire file path.
Instead, I would like to see the file-level Org tag (e.g. "doom" for this file).

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-refile-use-outline-path 'full-file-path))
#+end_src

*** Capture and Attachments [2/2]
**** DONE [#A] Establish agenda file layout
Relevant variables:
+ ~org-directory~
+ ~org-agenda-files~
+ ~org-attach-directory~
+ ~org-mobile-directory~

| Candidates          | Buffer or File             | Headline          | Text              |
|---------------------+----------------------------+-------------------+-------------------|
| Current buffer      |                            | org: =SPC m .=    | global: =SPC s s= |
| Org buffers         | org: =SPC m ,=             | org: =SPC m /=    |                   |
| Agenda files        | org: =SPC u SPC u SPC m ,= | global: =SPC n S= |                   |
| Org directory files | global: =SPC n f=          |                   | global: =SPC n s= |

The following is a prerequisite for my organization:
#+begin_src sh :tangle no
mkdir -p ~/org
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq
      ;; Top-level directory (used by `+default/find-in-notes', etc.)
      org-directory "~/org"

      ;; Directories to search for agenda files
      my/org-directories `("work" "life" ,doom-user-dir)
      org-agenda-files (mapcar (lambda (f)
                                 (if (file-name-absolute-p f) f
                                   (expand-file-name f org-directory)))
                               `("" ,@my/org-directories))

      ;; Only "todo.org" files hold agenda items
      org-agenda-file-regexp "\\`todo.org\\'")
#+end_src

**** DONE [#B] Remove file links from personal org capture templates
#+begin_src emacs-lisp :tangle yes
(after! org
  (setcar (nthcdr 4 (assoc "t" org-capture-templates)) "* TODO %?") ;; And replace "[ ]"
  (setcar (nthcdr 4 (assoc "n" org-capture-templates)) "* %u %?")
  (setcar (nthcdr 4 (assoc "j" org-capture-templates)) "* %U %?"))
#+end_src

*** Agenda Views [2/4]
**** DONE [#A] Widen the agenda prefix and indent subtasks
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-prefix-format
      '((agenda  . " %i  %l%-16:c%?-12t% s")
        (todo    . " %i  %l%-16:c")
        (tags    . " %i  %l%-16:c")))
#+end_src

**** DONE [#B] Do not display file tags in the agenda
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-hide-tags-regexp "\\`work\\|life\\|doom\\|todo\\'")
#+end_src

**** STRT [#B] Set icons for agenda prefix
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-category-icon-alist
      `(("/inbox\\'"           (,(all-the-icons-faicon     "inbox"      nil nil :height 1.00 :face 'all-the-icons-dred)))
        ;; work/*
        ("\\`work/admin\\'"    (,(all-the-icons-faicon     "fax"        nil nil :height 0.85 :face 'all-the-icons-lred)))
        ("\\`work/oncall\\'"   (,(all-the-icons-faicon     "users"      nil nil :height 0.80 :face 'all-the-icons-lyellow)))
        ("\\`work/cots\\'"     (,(all-the-icons-faicon     "server"     nil nil :height 0.85 :face 'all-the-icons-dorange)))
        ("\\`work/metrics\\'"  (,(all-the-icons-faicon     "eye"        nil nil :height 0.85 :face 'all-the-icons-dmaroon)))
        ("\\`work/infra\\'"    (,(all-the-icons-faicon     "cubes"      nil nil :height 0.65 :face 'all-the-icons-lorange)))
        ("\\`work/sdlc\\'"     (,(all-the-icons-faicon     "pencil"     nil nil :height 0.95 :face 'all-the-icons-orange)))
        ;; life/*
        ("\\`life/family\\'"   (,(all-the-icons-faicon     "heart"      nil nil :height 0.85 :face 'all-the-icons-red)))
        ("\\`life/money\\'"    (,(all-the-icons-faicon     "money"      nil nil :height 0.80 :face 'all-the-icons-dgreen)))
        ("\\`life/tech\\'"     (,(all-the-icons-faicon     "laptop"     nil nil :height 0.80 :face 'all-the-icons-dsilver)))
        ;; doom/*
        ("\\`doom/upstream\\'" (,(all-the-icons-alltheicon "git"        nil nil :height 0.85 :face 'all-the-icons-lred)))
        ("\\`doom/config\\'"   (,(all-the-icons-fileicon   "emacs"      nil nil :height 0.85 :face 'all-the-icons-purple)))
        ("\\`doom/org\\'"      (,(all-the-icons-fileicon   "org"        nil nil :height 0.90 :face 'all-the-icons-lgreen)))
        ("\\`doom/markdown\\'" (,(all-the-icons-octicon    "markdown"   nil nil :height 0.85 :face 'all-the-icons-maroon)))
        ("\\`doom/yaml\\'"     (,(all-the-icons-faicon     "cogs"       nil nil :height 0.80 :face 'all-the-icons-lsilver)))
        ("\\`doom/python\\'"   (,(all-the-icons-alltheicon "python"     nil nil :height 0.85 :face 'all-the-icons-dblue)))
        ("\\`doom/ts\\'"       (,(all-the-icons-fileicon   "typescript" nil nil :height 0.85 :face 'all-the-icons-blue)))
        ("\\`doom/term\\'"     (,(all-the-icons-faicon     "terminal"   nil nil :height 0.95 :face 'all-the-icons-dgreen)))
        ("\\`doom/misc\\'"     (,(all-the-icons-fileicon   "config"     nil nil :height 0.85 :face 'all-the-icons-lblue)))))
#+end_src

**** TODO [#C] Display weekly/daily agenda view properly
+ https://www.reddit.com/r/orgmode/comments/6ybjjw/aligned_agenda_view_anyway_to_make_this_more/
+ IIRC, this is called the "fancy diary"

*** Markup for Rich Contents [1/3]
**** DONE [#C] Maintain proper spacing of footnotes
I had to override the ~org-footnote-sort~ function to *not* insert a leading
~\n~ before new footnote definitions.

#+begin_src emacs-lisp :tangle yes
(after! org
  (defun my/org-footnote-sort ()
    "Rearrange footnote definitions in the current buffer.
Sort footnote definitions so they match order of footnote
references.  Also relocate definitions at the end of their
relative section or within a single footnote section, according
to `org-footnote-section'.  Inline definitions are ignored."
    (let ((references (org-footnote--collect-references)))
      (org-preserve-local-variables
       (let ((definitions (org-footnote--collect-definitions 'delete)))
         (org-with-wide-buffer
          (org-footnote--clear-footnote-section)
          ;; Insert footnote definitions at the appropriate location,
          ;; separated by a blank line.  Each definition is inserted
          ;; only once throughout the buffer.
          (let (inserted)
            (dolist (cell references)
              (let ((label (car cell))
                    (nested (not (nth 2 cell)))
                    (inline (nth 3 cell)))
                (unless (or (member label inserted) inline)
                  (push label inserted)
                  (unless (or org-footnote-section nested)
                    ;; If `org-footnote-section' is non-nil, or
                    ;; reference is nested, point is already at the
                    ;; correct position.  Otherwise, move at the
                    ;; appropriate location within the section
                    ;; containing the reference.
                    (goto-char (nth 1 cell))
                    (org-footnote--goto-local-insertion-point))
                  (insert (or (cdr (assoc label definitions))
                              (format "[fn:%s] DEFINITION NOT FOUND." label))
                          "\n"))))
            ;; Insert un-referenced footnote definitions at the end.
            (pcase-dolist (`(,label . ,definition) definitions)
              (unless (member label inserted)
                (insert definition "\n")))))))))
  (advice-add 'org-footnote-sort :override #'my/org-footnote-sort))
#+end_src

**** HOLD [#C] Allow 5 lines of emphasized text
This appears to cause freezes. For now, I'll get by without.

#+begin_src emacs-lisp :tangle no
(after! org
  (setcar (nthcdr 4 org-emphasis-regexp-components) 4))
#+end_src

**** TODO [#C] Ignore surrounding tildes for interactive help functions
Doom's org markup convention is to surround elisp symbols with tildes. However,
this makes it difficult to use commands such as ~counsel-describe-variable~
(=SPC h v=), ~counsel-describe-function~ (=SPC h f=), and ~find-function~
(custom-mapped to =C-h C-f=) for symbols under point.

The current workaround is to select the "object" under point using =v i e= and
then use the corresponding help command. This works well enough, but is an
annoying extra step.

*** Exporting [1/1]
**** DONE [#A] Support exporting to IPython notebooks
#+begin_src emacs-lisp :tangle packages.el
(when (modulep! :lang org +jupyter)
  (package! ox-ipynb
    :recipe (:host github :repo "jkitchin/ox-ipynb")))
#+end_src

Inspiration taken from the =org= module's =config.el=.
#+begin_src emacs-lisp :tangle yes
(use-package! ox-ipynb
  :when (modulep! :lang org +jupyter)
  :after ox
  :config

  ;; Define an `ox-ipynb' export function that excludes results
  (defun my/ox-ipynb-export-to-ipynb-no-results-file
      (&optional async subtreep visible-only body-only info)
    "Export current buffer to a file. Strip results first.
Optional argument ASYNC to asynchronously export.
Optional argument SUBTREEP to export current subtree.
Optional argument VISIBLE-ONLY to only export visible content.
Optional argument BODY-ONLY export only the body.
Optional argument INFO is a plist of options."
    (let ((ox-ipynb-preprocess-hook
           '((lambda ()
               (org-babel-map-src-blocks nil (org-babel-remove-result))))))
      (ox-ipynb-export-to-ipynb-file)))

  ;; Slightly modified from `ob-ipynb' (added dispatch to new export function)
  (org-export-define-derived-backend 'jupyter-notebook 'org
    :menu-entry
    '(?n "Export to jupyter notebook"
         ((?b "to buffer" ox-ipynb-export-to-ipynb-buffer)
          (?n "to notebook" ox-ipynb-export-to-ipynb-file)
          (?N "to nb (no results)" my/ox-ipynb-export-to-ipynb-no-results-file)
          (?o "to notebook and open" ox-ipynb-export-to-ipynb-file-and-open)
          (?p "to participant nb & open" ox-ipynb-export-to-participant-notebook)
          (?r "to nb (no results) and open" ox-ipynb-export-to-ipynb-no-results-file-and-open)
          (?s "to slides and open" ox-ipynb-export-to-ipynb-slides-and-open))))

  ;; Support exporting to bash kernel notebooks
  (let ((kernelspecs (assoc-delete-all 'sh ox-ipynb-kernelspecs))
        (language-infos (assoc-delete-all 'sh ox-ipynb-language-infos)))
    (setq ox-ipynb-kernelspecs
          (push '(sh . (kernelspec . ((display_name . "Bash")
                                      (language . "bash")
                                      (name . "bash")))) kernelspecs)
          ox-ipynb-language-infos
          (push '(sh . (language_info . ((codemirror_mode . "shell")
                                         (file_extension . ".sh")
                                         (mimetype . "text/x-sh")
                                         (name . "bash")
                                         (pygments_lexer . "bash")))) language-infos)))

  ;; Support exporting from `ein-LANG' source blocks
  (when (modulep! :tools ein)
    (dolist (pair '((ipython . "python")
                    (sh . "bash")))
      (let* ((key (car pair))
             (lang (cdr pair))
             (ein-key (intern (concat "ein-" lang)))
             (kernelspec (alist-get key ox-ipynb-kernelspecs))
             (language-info (alist-get key ox-ipynb-language-infos)))
        (pushnew! ox-ipynb-kernelspecs (cons ein-key kernelspec))
        (pushnew! ox-ipynb-language-infos (cons ein-key language-info))))))
#+end_src

*** Publishing [0/0]
*** Working with Source Code [2/3]
**** DONE [#A] Indent source blocks
+ https://emacs.stackexchange.com/a/9483/21977

#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-src-preserve-indentation nil
        org-edit-src-content-indentation 0))
#+end_src

**** DONE [#B] Show edit buffer in the current window
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-src-window-setup 'current-window)
  (setq +popup--display-buffer-alist
        (delq (assoc "^\\*Org Src" +popup--display-buffer-alist)
              +popup--display-buffer-alist))
  (when (bound-and-true-p +popup-mode)
    (setq display-buffer-alist +popup--display-buffer-alist)))
#+end_src

**** LOOP [#B] Make it easy to jump between source and tangled file
Right now, I am only considering tangling to Elisp, since that's what I do most
of the time.

#+begin_src emacs-lisp :tangle yes
(after! projectile
  (pushnew! projectile-other-file-alist
            '("org" "el")
            '("el" "org")))
#+end_src

*** Miscellaneous [0/1]
**** TODO [#C] Use Org speed keys
Just apply your old configuration.

*** Contrib [2/3]
**** DONE [#C] Add ~ditaa~ JAR path
You need ~ditaa~ installed for this to work:
#+begin_src sh :tangle no
brew install ditaa
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-ditaa-jar-path
      (cond (IS-MAC
             (file-expand-wildcards "/usr/local/Cellar/ditaa/*/libexec/ditaa-*-standalone.jar"))))
#+end_src

**** TODO [#C] Configure screenshot attachment
By default, =+dragndrop= configures =org-download= to store image links as
attachments rather than hyperlinks. Even after searching on the web, I do not
understand what concrete advantages attachments have over hyperlinks besides
offering more management tools. I would rather be consistent and stick with
hyperlinks for now.

#+begin_src emacs-lisp :tangle yes
(setq org-download-method 'directory
      org-download-image-dir "images")
#+end_src

Note that the following keybindings are very helpful:
+ =SPC m a c= (~org-download-screenshot~) takes a new screenshot and attaches it
+ =SPC m a p= (~org-download-clipboard~) attaches an image from the clipboard

**** DONE [#C] Add ~ditaa~ JAR path
You need ~ditaa~ installed for this to work:
#+begin_src sh :tangle no
brew install ditaa
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-ditaa-jar-path
      (cond (IS-MAC
             (file-expand-wildcards "/usr/local/Cellar/ditaa/*/libexec/ditaa-*-standalone.jar"))))
#+end_src

*** Pomodoro [1/3]
**** DONE [#A] Always load =org-pomodoro= :hack:
Would be better to lazy-load this.

#+begin_src emacs-lisp :tangle yes
(require 'org-pomodoro)
#+end_src

**** STRT [#B] Change the chime for =org-pomodoro=
It is obnoxiously loud and shrill. For now, I'm OK with just decreasing the
volume. To do this, the various ~org-pomodoro-*-sound-args~ variables should be
set to whatever command-line options(s) should be passed to
~org-pomodoro-audio-player~ (=/usr/bin/afplay= on macOS).

#+begin_src emacs-lisp :tangle yes
(when (equal org-pomodoro-audio-player "/usr/bin/afplay")
  (let ((args '("-v" "0.125")))
    (setq org-pomodoro-start-sound-args args
          org-pomodoro-finished-sound-args args
          org-pomodoro-overtime-sound-args args
          org-pomodoro-ticking-sound-args args
          org-pomodoro-killed-sound-args args
          org-pomodoro-short-break-sound-args args
          org-pomodoro-long-break-sound-args args)))
#+end_src

**** STRT [#B] Add keybindings for ~org-pomodoro~ and ~org-pomodoro-extend-last-clock~
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
      :localleader
      (:when (modulep! :lang org +pomodoro)
       (:prefix ("c" . "clock")
        "p" #'org-pomodoro
        "P" #'org-pomodoro-extend-last-clock)))
#+end_src

** php [0/0] :ARCHIVE:
#+begin_quote
This module adds support for PHP 5.3+ (including PHP7).
#+end_quote

** plantuml [0/0] :ARCHIVE:
** purescript [0/0] :ARCHIVE:
** python [5/7]
:PROPERTIES:
:CATEGORY: doom/python
:END:
#+begin_quote
Adds Python support to Doom Emacs.
#+end_quote

*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/python` module
brew install python
npm install -g pyright
pipx install pipenv
pipx install pylint
pipx install flake8
pipx install pytest
pipx install nose2
pipx install pyflakes
pipx install isort
pipx install --include-deps jupyter

## Debugging
pip3 install --user debugpy
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/python` module
sudo dnf -y install python3 pipx
npm install -g pyright
pipx install pipenv
pipx install pylint
pipx install flake8
pipx install pytest
pipx install nose2
pipx install pyflakes
pipx install isort
pipx install --include-deps jupyter

## Debugging
pip3 install --user debugpy
#+end_src

*** DONE [#A] Develop and run a simple "Hello World" program :noexport:
More than a simple "Hello World":
+ [[file:~/Documents/src/life/secret-santa/][Secret Santa project]]
+ [[file:~/org/life/notes.org::*Developing with interpreted languages][Notes for developing with interpreted languages]]

*** DONE [#B] Set up fill column for PEP 8 compliance
#+begin_src emacs-lisp :tangle yes
(add-hook! python-mode
  (setq fill-column 79)
  (display-fill-column-indicator-mode))
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(add-to-list 'auto-mode-alist '("pylint" . conf-mode))
(add-to-list 'auto-mode-alist '("/activate\\'" . shell-script-mode))
#+end_src

*** DONE [#A] Fix quirks with keymaps
#+begin_src emacs-lisp :tangle yes
;; Add "pipenv" label to "e" prefix key
(after! pipenv
  (map! :map python-mode-map
        :localleader
        :prefix ("e" . "pipenv")))
#+end_src

*** STRT [#B] Integrate Pipenv with projectile
For some reason, the =:lang python= module disables ~pipenv-with-projectile~, so
I want to re-enable that here.

_Notes:_
1. ~use-package-hook!~ is needed to reconfigure the ~use-package!~ block in the
   module's original configuration.
2. The ~:pre-init~ section must return ~nil~ in order to override (rather than
   just append to) the original ~:init~ section.
3. How I have Doom Emacs configured, all ~use-package-hook!~ forms *MUST* be
   tangled to =early-init.el=.

#+begin_src emacs-lisp :tangle no
(use-package-hook! pipenv
  :pre-init
  (setq pipenv-with-projectile t)
  nil)
#+end_src

_Verdict_:
+ Unfortunately, the above does not seem to work for whatever reason.
+ Whenever a project is switched, the ~projectile-after-switch-project-hook~
  should run, but it doesn't seem to.
  - This can be seen in the modeline (the virtual environment is still shown in
    workspaces that do not use Pipenv or even Python).
+ Might need to add hooks for ~persp~ mode
  - Doom Emacs does not utilize ~persp-projectile~, so these hooks must be
    manaully set.
+ See the whole discussion here: https://github.com/hlissner/doom-emacs/issues/1666
  - Might want to just use the =:tools direnv= as Henrik suggested

#+begin_src emacs-lisp :tangle no
(defun pipenv-activate-projectile ()
  "Activate integration of Pipenv with Projectile."
  (add-hook
   'projectile-after-switch-project-hook
   (lambda () (funcall pipenv-projectile-after-switch-function))))
#+end_src

*** HOLD [#C] Set up debugging
+ Holding until I complete the following: [[*Fix DAP mode error message][Fix DAP mode error message]]
+ https://docs.doomemacs.org/latest/modules/tools/debugger/

#+begin_src emacs-lisp :tangle yes
(after! dap-mode
  (setq dap-python-debugger 'debugpy))
#+end_src

** qt [0/0] :ARCHIVE:
#+begin_quote
This module provides language functionality for [[https://qt.io][Qt]] specific files.
#+end_quote

** racket [1/1]
#+begin_quote
This module provides integration for [[https://github.com/greghendershott/racket-mode][racket-mode]].
#+end_quote

*** DONE [#A] Install prerequisites
**** OKAY macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/racket` module
brew install --cask racket
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/racket` module
sudo dnf -y install racket
raco pkg install --auto racket-langserver
#+end_src

** raku [0/0] :ARCHIVE:
#+begin_quote
This module adds a major mode and flycheck for Raku.
#+end_quote

** rest [0/0]
#+begin_quote
This module adds [[https://en.wikipedia.org/wiki/Representational_state_transfer][REST]] support.
#+end_quote

** rst [0/0]
** ruby [0/0] :ARCHIVE:
#+begin_quote
This module add Ruby and optional Ruby on Rails support to Emacs.
#+end_quote

** rust [2/4]
#+begin_quote
This module adds support for the Rust language and integration for its tools,
e.g. ~cargo~.
#+end_quote

*** WAIT [#A] Install prerequisites
**** WAIT macOS
#+begin_src sh :tangle no
# Install prerequisites for `lang/rust` module
#+end_src

**** DONE Fedora
From an official [[https://blog.rust-lang.org/2022/07/01/RLS-deprecation.html][Rust Blog post]] published on July 1, 2022:
#+begin_quote
The Rust Language Server (RLS) is being deprecated in favor of rust-analyzer.
#+end_quote

Unfortunately, ~rust-analyzer~ cannot be installed on Fedora via ~dnf~ or
another packager that can be installed via ~dnf~ (such as ~cargo~). Instead,
~rust-analyzer~ can be installed via ~rustup~, which is officially installed via
a ~curl~-to-~sh~ command line. I really hate that method of software
installation, but there's no easy alternative at the moment.

References:
+ [[https://www.rust-lang.org/tools/install][Official installation documentation for Rust]]
  - [[https://www.reddit.com/r/rust/comments/dk35e6/rusts_install_instructions_of_curltobash_is/][Discussion of Rust installation method on Reddit]]
+ [[https://rust-analyzer.github.io/manual.html#installation][Official installation documentation for rust-analyzer]]

#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/rust` module
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs \
    | sh -s -- --no-modify-path --quiet -y
cargo install cargo-check
rustup component add rustfmt-preview clippy-preview

## rust-analyzer
rustup component add rust-src
rustup +nightly component add rust-analyzer-preview
ln -s ~/.rustup/toolchains/nightly-*/bin/rust-analyzer ~/.cargo/bin
#+end_src

Another snag that I ran into is that =lsp-mode= apparently [[https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-analyzer/#debugger-not-available][does not]] provide
=dap-mode= integration for ~rust-analyzer~, but it [[https://emacs-lsp.github.io/lsp-mode/page/lsp-rust-rls/#debugger-yes][does]] provide =dap-mode=
integration for ~rls~. I would really like a debugger for Rust (especially given
how new I am to the language), so I will also install ~rls~. That said, I'll
still keep ~rust-analyzer~ around so that I can easily switch back to it.

#+begin_src sh :tangle install/fedora.sh
## rls
rustup component add rls rust-analysis rust-src
#+end_src

References:
+ [[https://github.com/rust-lang/rls#setup][Official installation documentation for rls]]

*** KILL [#B] Favor ~rls~ over ~rust-analyzer~
:LOGBOOK:
- Note taken on [2022-08-09 Tue 15:59] \\
  I am going to try debugging with ~rust-analyzer~ instead. Other sources besides
  the =lsp-mode= documentation indicates that it is possible.
:END:
Although ~rls~ has been deprecated in favor of ~rust-analyzer~, =lsp-mode= only
supports debugging for ~rls~ at the moment.

#+begin_src emacs-lisp :tangle no
(after! rustic
  (setq rustic-lsp-server 'rls))
#+end_src

*** TODO [#B] Get debugging to work
Reference: https://gagbo.net/post/dap-mode-rust/

1. Install =lsp-mode=, =dap-mode=, =gdb=, and =rust-analyzer=
2. Execute the following elisp:
   #+begin_src emacs-lisp :tangle no
   (setq dap-cpptools-extension-version "1.5.1")

   (with-eval-after-load 'lsp-rust
     (require 'dap-cpptools))

   (with-eval-after-load 'dap-cpptools
     ;; Add a template specific for debugging Rust programs.
     ;; It is used for new projects, where I can M-x dap-edit-debug-template
     (dap-register-debug-template "Rust::CppTools Run Configuration"
                                  (list :type "cppdbg"
                                        :request "launch"
                                        :name "Rust::Run"
                                        :MIMode "gdb"
                                        :miDebuggerPath "rust-gdb"
                                        :environment []
                                        :program "${workspaceFolder}/target/debug/hello / replace with binary"
                                        :cwd "${workspaceFolder}"
                                        :console "external"
                                        :dap-compilation "cargo build"
                                        :dap-compilation-dir "${workspaceFolder}")))

   (with-eval-after-load 'dap-mode
     (setq dap-default-terminal-kind "integrated") ;; Make sure that terminal programs open a term for I/O in an Emacs buffer
     (dap-auto-configure-mode +1))
   #+end_src
3. =M-x dap-cpptools-setup=
4. Open a project and =M-x dap-edit-debug-template= to set up the template

*** DONE [#C] Open =Cargo.lock= files as read-only TOML config files
#+begin_src emacs-lisp :tangle yes
(dolist (cell '((auto-mode-alist . conf-toml-mode)
                (auto-minor-mode-alist . read-only-mode)))
  (add-to-list (car cell) (cons "/Cargo\\.lock\\'" (cdr cell))))
#+end_src

** scala [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://www.scala-lang.org][scala]] and [[https://www.scala-sbt.org/][sbt]] support to Doom Emacs.
#+end_quote

** scheme [0/0] :ARCHIVE:
#+begin_quote
This module provides an environment for hacking and having fun in scheme. It is
powered by [[https://www.nongnu.org/geiser/geiser_1.html#introduction][geiser]].
#+end_quote

** sh [3/5]
#+begin_quote
This module adds support for shell scripting languages.
#+end_quote

*** TODO [#A] Install prerequisites
Still need to install PowerShell language server. References:

+ =lsp-pwsh=
+ https://emacs-lsp.github.io/lsp-mode/page/lsp-pwsh/
+ https://github.com/PowerShell/PowerShellEditorServices

**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/sh` module
brew install bash zsh fish powershell bashdb zshdb shellcheck
npm install -g bash-language-server
#+end_src

**** STRT Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/sh` module
sudo dnf -y install bash zsh fish powershell ShellCheck
npm install -g bash-language-server

## FIXME bashdb
## This does not work because there is no version of bashdb that matches the
## current version of bash on my system (my bash is too new)
# mkdir -p "$HOME/.local/src/bashdb"
# version=5.0-1.1.2
# [ -d "$HOME/.local/src/bashdb/bashdb-$version" ] || {
#     url=https://sourceforge.net/projects/bashdb/files/bashdb/"$version"/bashdb-"$version".tar.gz/download
#     curl -Lo- "$url" | tar -C "$HOME/.local/src/bashdb" -xzf -
# }

## TODO zshdb
#+end_src

*** DONE [#A] Assume Bourne Shell by default
#+begin_src emacs-lisp :tangle yes
(setq-default sh-shell-file "/bin/sh")
#+end_src

*** DONE [#B] Disable error reporting in sh-mode buffers
LSP is still useful for other things, but I get annoyed with the error messages
and indicators in ~sh-mode~.

#+begin_src emacs-lisp :tangle yes
;; Prevent flycheck from being automatically enabled
(if (or (not (boundp 'flycheck-global-modes))
        (not (eq 'not (car flycheck-global-modes))))
    (setq flycheck-global-modes '(not sh-mode))
  (let ((modes (cdr flycheck-global-modes)))
    (setcdr flycheck-global-modes (pushnew! modes 'sh-mode))))

;; Prevent lsp diagnostics from being enabled
(if (boundp 'lsp-diagnostics-disabled-modes)
    (pushnew! lsp-diagnostics-disabled-modes 'sh-mode)
  (setq lsp-diagnostics-disabled-modes '(sh-mode)))

;; Don't bother checking for an LSP diagnostics provider in sh-mode
(setq-hook! 'sh-mode-hook
  lsp-diagnostics-provider :none)
#+end_src

*** DONE [#C] Filename-mode associations
#+begin_src emacs-lisp :tangle yes
(dolist (re '("/\\.config/\\(shell\\|bash\\)/.+"
              "\\.\\(env\\|cygport\\)\\'"))
  (add-to-list 'auto-mode-alist
               `(,re . shell-script-mode)))
#+end_src

*** TODO [#C] Edit the current region in an indirect buffer
Shell scripts often include nested scripts in subshells, and it would be nice to
have the =C-'= keybinding take you to an indirect buffer to edit the subshell.
Some examples of such subshells are shown below:

#+begin_src sh :eval no :tangle no
(
    echo 'this is a subshell'
)
foo=$(
    echo 'this is a subshell'
)
bar=`
    echo 'this is a subshell'
`
#+end_src

Reference:
+ ~edit-indirect-region~

** sml [0/0] :ARCHIVE:
#+begin_quote
This module has no description yet.
#+end_quote

** solidity [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://github.com/ethereum/solidity][Solidity]] support through [[https://github.com/ethereum/emacs-solidity][solidity-mode]]
#+end_quote

** swift [0/0] :ARCHIVE:
** terra [0/0] :ARCHIVE:
** web [1/1]
*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/web` module
brew install tidy-html5
npm install -g js-beautify stylelint
npm install -g vscode-html-languageserver-bin vscode-css-languageserver-bin
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/web` module
sudo dnf -y install tidy
npm install -g js-beautify stylelint
npm install -g vscode-html-languageserver-bin vscode-css-languageserver-bin
#+end_src

** yaml [4/8]
:PROPERTIES:
:CATEGORY: doom/yaml
:END:
#+begin_quote
This module provides support for the [[https://yaml.org/][YAML file format]].
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `lang/yaml` module
npm install -g yaml-language-server
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `lang/yaml` module
npm install -g yaml-language-server
#+end_src

*** DONE [#A] Set the YAML LSP server to RedHat's implementation
+ https://developers.redhat.com/blog/2017/10/18/yaml-language-server-extension-vs-code/

Every time I try to use LSP with ~yamlls~, this is what I get:
: Server yamlls:4133 status:starting exited with status exit. Do you want to restart it? (y or n)

Got it working. See the ~PREREQ~ lines for the =yaml= module in
=DOOMDIR/init.el=. Could use some cleanup.

*** DONE [#A] Download the schema definitions if we don't have them already
I /think/ this is working. However, I have a note from my "illiterate" config
saying that the implementation of ~lsp-yaml-download-schema-store-db~ is buggy.

#+begin_src emacs-lisp :tangle yes
(after! lsp-yaml
  (let ((f lsp-yaml-schema-store-local-db))
    (unless (file-exists-p f)
      (mkdir (file-name-directory f) t)
      (lsp-yaml-download-schema-store-db))))
#+end_src

*** DONE [#B] Allow YAML schemas to be decided in .dir-locals.el
#+begin_src emacs-lisp :tangle yes
(put 'lsp-yaml-schemas 'safe-local-variable #'always)
#+end_src

*** STRT [#A] Integrate ~cfn-lint~ with Flycheck
:LOGBOOK:
- Note taken on [2021-11-17 Wed 15:06] \\
  I can no longer assume that YAML will almost always be CloudFormation, so I have
  disabled tangling of the source block, at least for now.
:END:
Again, since I'm only really using YAML for CloudFormation (at the moment), I
feel OK about automatically integrating ~cfn-lint~ into Flycheck for all YAML
files. This fills in the diagnostics gap left by RedHat's YAML language
server implementation and corresponding Emacs mode.

#+begin_src emacs-lisp :tangle no
(after! flycheck
  (flycheck-define-checker cfn-lint
    "A CloudFormation linter using cfn-lint."
    :command ("cfn-lint" "-f" "parseable" source)
    :error-patterns ((warning line-start (file-name) ":" line ":" column
                              ":" (one-or-more digit) ":" (one-or-more digit) ":"
                              (id "W" (one-or-more digit)) ":" (message) line-end)
                     (error line-start (file-name) ":" line ":" column
                            ":" (one-or-more digit) ":" (one-or-more digit) ":"
                            (id "E" (one-or-more digit)) ":" (message) line-end))
    :modes (yaml-mode))
    (add-to-list 'flycheck-checkers 'cfn-lint))
#+end_src

A better way to do this would probably be through a project mode. (Refer to
~+ansible-yaml-mode~ and ~def-project-mode!~ for more info.) However, when I
tried doing this, I had some errors so decided to back out for now.

Reference:
+ https://awk.space/blog/cfn-lint/

*** STRT [#B] Use CloudFormation YAML schema
:LOGBOOK:
- Note taken on [2021-11-17 Wed 15:06] \\
  I can no longer assume that YAML will almost always be CloudFormation, so I have
  disabled tangling of the source block, at least for now.
:END:
I use YAML almost entirely for CloudFormation, so I like to use CloudFormation
YAML schema by default. This involves setting ~lsp-yaml-schemas~ appropriately,
but unfortunately the documentation in that regard is quite lacking. I managed
to get it right mostly by running =M-x lsp-yaml-select-buffer-schema= and then
selecting the correct schema ("AWS CloudFormation") through interactive
completion.

#+begin_src emacs-lisp :tangle no
(setq lsp-yaml-schemas
      '((https://raw\.githubusercontent\.com/awslabs/goformation/v4\.15\.0/schema/cloudformation\.schema\.json
         . ["*.yaml" "*.yml"])))
#+end_src

Other references:
+ https://github.com/redhat-developer/yaml-language-server#using-yamlschemas-settings
+ Help for ~lsp-yaml-schemas~
+ File referenced by ~lsp-yaml-schema-store-local-db~

*** STRT [#B] Disable LSP syntax checking
:LOGBOOK:
- Note taken on [2021-11-17 Wed 15:06] \\
  I can no longer assume that YAML will almost always be CloudFormation, so I have
  disabled tangling of the source block, at least for now.
:END:
Honestly, I don't really need syntax checking from RedHat's YAML language server
when ~cfn-lint~ does a better job. In fact, it appears as though there are false
alarms when using LSP syntax checking (and that's not even counting custom
tags).

#+begin_src emacs-lisp :tangle no
(setq-hook! 'yaml-mode-hook lsp-diagnostics-provider :none)
#+end_src

References:
+ https://github.com/emacs-lsp/lsp-mode/issues/1810
+ [[file:~/.config/emacs/modules/lang/yaml/config.el]]

*** HOLD [#C] Add custom CloudFormation tags
This is the sort of thing that should probably be set per schema, but again,
since I pretty much only use YAML for CloudFormation, defining custom tags
globally should be OK. Unfortunately, I can't figure out how to get this to
work. The following subtrees explain what I tried doing. Make sure to view the
*Notes* subtree!

**** List of strings
#+begin_src emacs-lisp :tangle no
(setq lsp-yaml-custom-tags
      '("!Equals sequence"
        "!FindInMap sequence"
        "!GetAtt"
        "!GetAZs"
        "!ImportValue"
        "!Join sequence"
        "!Ref"
        "!Select sequence"
        "!Split sequence"
        "!Sub"))
#+end_src
This causes the following error after opening a YAML file:
: Error processing message (wrong-type-argument symbolp "!Equals sequence").

**** Serialized JSON string
#+begin_src emacs-lisp :tangle no
(setq lsp-yaml-custom-tags
      (json-serialize
       ["!Equals sequence"
        "!FindInMap sequence"
        "!GetAtt"
        "!GetAZs"
        "!ImportValue"
        "!Join sequence"
        "!Ref"
        "!Select sequence"
        "!Split sequence"
        "!Sub"]))
#+end_src
Unfortunately, invalid tags do not appear as Flycheck errors, and the following
error occurs when attempting to complete anything in the YAML buffer with
=C-SPC= (~+company/complete~) in Evil insert state:

: Company: An error occurred in auto-begin
: Company: backend company-capf error "Request textDocument/completion failed with message: customTags.filter is not a function" with args (candidates )

**** Notes
Looks like this is a problem stemming from RedHat's YAML LSP server
implementation, and I might be able to get around it by using a
CloudFormation-specific YAML LSP server (at least until I get around to using
Ansible more). Unfortunately, it looks like there is no such integration with
Emacs, but I've gathered some links on how I might be able to perform the
integration myself.

Reference:
+ https://stackoverflow.com/questions/53470329/aws-sam-yaml-template-unknown-tag-ref
+ https://emacs-lsp.github.io/lsp-mode/page/adding-new-language/
+ https://github.com/aws-cloudformation/aws-cfn-lint-visual-studio-code/blob/master/package.json

** zig [0/0] :ARCHIVE:
#+begin_quote
This module adds [[https://ziglang.org/][Zig]] support, with optional (but recommended) LSP support via
[[https://github.com/zigtools/zls][zls]].
#+end_quote

* :email
** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :email
#+end_src

** Miscellany [0/0] :ARCHIVE:
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

** mu4e [0/1]
#+begin_quote
This module makes Emacs an email client, using ~mu4e~.
#+end_quote

*** TODO [#B] Set up mu4e with work email
This should probably be done in a separate gitignored file (=custom.el=) for
security's sake.

** notmuch [0/0] :ARCHIVE:
#+begin_quote
This module turns Emacs into an email client using ~notmuch~.
#+end_quote

** wanderlust [0/0] :ARCHIVE:
* :app
#+begin_quote
Application modules are complex and opinionated modules that transform Emacs
toward a specific purpose. They may have additional dependencies and *should be
loaded last*, before =:config= modules.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :app
#+end_src

** Miscellany [2/7]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** OKAY [#A] Install prerequisites
**** OKAY macOS
**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `app/Miscellany`
sudo dnf -y install w3m
#+end_src

*** DONE [#A] Install packages
#+begin_src emacs-lisp :tangle packages.el
;; Music
(package! counsel-spotify)

;; Weather
(package! noaa)

;; Ebooks
(package! nov)

;; Kubernetes
(package! k8s-mode)   ;; highlighting, snippets, and `k8s-goto-documents'
(package! kubedoc)    ;; `kubedoc' command
(package! kubel)      ;; interaction with pods
(package! kubernetes) ;; interaction with a cluster
(when (modulep! :editor evil +everywhere)
  (package! kubel-evil)
  (package! kubernetes-evil))

;; Browsing
(package! w3m) ;; Better than `eww' IMO
#+end_src

*** STRT [#A] Configure k8s-mode
+ [X] Open k8s manifest files in ~k8s-mode~
  - Configured this with ~:magic~
  - ~:magic~ only works for file-visiting buffers
  - See note in source block for more info
+ [X] Configure documentation lookup
  - Use either ~k8s-goto-documents~ or ~kubedoc~
+ [ ] Fine-tune documentation lookup
  - Attempt to lookup the symbol under point

Reference:
+ ~use-package!~ declarations in emacs/modules/tools/magit/config.el
+ https://blog.chmouel.com/2016/09/07/dealing-with-yaml-in-emacs/

#+begin_src emacs-lisp :tangle yes
;; NOTE k8s manifests do not have to begin with "apiVersion", but I've seen that
;; more often than not. Worst case, if this doesn't end up catching enough, I
;; can write a function that searches for the "^apiVersion:" regexp in a buffer
;; visiting a file whose name matches "\\.yml\\'" or "\\.yaml\\'". I can then
;; replace the "apiVersion:" regex in the :magic form with a call to that function.
(use-package! k8s-mode
  :magic ("apiVersion:" . k8s-mode)
  :config
  (set-lookup-handlers! 'k8s-mode
    :documentation #'kubedoc))

;; REVIEW Is there even a point in having an empty `use-package!' declaration?
(use-package! kubedoc)
#+end_src

*** STRT [#A] Configure kubel
+ [X] Open k8s manifest buffers in ~k8s-mode~
+ [X] Activate =kubel-evil= before =kubel=
+ [ ] Scroll to top of resource buffers after they are populated
  - =kubel= attempts to scroll to the top of the buffers before they are
    populated, I end up needing to scroll to the top myself.
  - Might have to wait for a process to finish
    + ~kubel--describe-resource~
    + ~kubel--exec~
    + ~kubel--sentinel~
    + =SPC h i g m elisp RET g m Sentinels RET=

#+begin_src emacs-lisp :tangle yes
;; REVIEW Compare `kubel' with `kubernetes-el'
;; - kubel is great for working with pods (listing, examining, modifying, logging, and interacting)
;; - kubernetes-el might be closer to Lens in terms of functionality, but I have not tried it yet
(use-package! kubel
  :defer t
  :config
  (defadvice! my/activate-k8s-mode-a (&rest _)
    :after #'kubel-yaml-editing-mode
    (k8s-mode)))

(use-package! kubel-evil
  :after kubel
  :when (modulep! :editor evil +everywhere))
#+end_src

*** STRT [#A] Configure kubernetes
+ [X] Activate =kubernetes-evil= before =kubernetes=
+ [X] Display pods that are done executing
+ [-] Do not automatically refresh
  - [X] https://github.com/kubernetes-el/kubernetes-el/issues/100
  - [-] https://github.com/kubernetes-el/kubernetes-el/issues/286
+ [ ] Use similar keybindings that Doom Emacs does for Magit
+ [ ] Compare =kubernetes= to Lens; missing features:
  - Display resources across all namespaces
  - Display the following types of resources:
    - DaemonSets
    - ...

#+begin_src emacs-lisp :tangle yes
(use-package! kubernetes
  :defer t
  :commands (kubernetes-overview)
  :config
  (setq ;; Disable automatic refresh (call `kubernetes-refresh' manually)
        kubernetes-poll-frequency 3600
        kubernetes-redraw-frequency 3600

        ;; Display pods even if they are done running
        kubernetes-pods-display-completed t))

(use-package! kubernetes-evil
  :after kubernetes-modes
  :when (modulep! :editor evil +everywhere))
#+end_src

*** TODO [#B] Add a project mode for Helm charts
- https://www.reddit.com/r/emacs/comments/my1npn/kuberneteshelm_file_syntax_highlighting_and/
- Reference ~+ansible-yaml-mode~.

Right now, a manual workaround is to run the following commands in sequence
after entering a YAML file that is a Helm chart template:

1. =M-x lsp-disconnect RET= (to remove irrelevant error messages)
2. =M-x k8s-mode RET= (to add minimal font-locking for k8s keywords)
3. =M-x ansible-add-font-lock RET= (to font-lock the templating)

This gives /decent/ font-locking, but is still miles away from an ideal
solution. Alternate font-locking is available via =jinja2-mode=.

#+begin_src emacs-lisp :tangle no
(def-project-mode! my/k8s-helm-yaml-mode
  :modes '(yaml-mode)
  :add-hooks '(k8s-mode ansible) ;; `ansible' gives us good syntax highlighting
  :files "templates/")
#+end_src

*** STRT [#C] Configure w3m
+ [X] Remap =eww= bindings to use =w3m= instead
+ [ ] Redefine some mappings from =evil-collection=
+ [ ] Add mappings for ~w3m-lnum-mode~

#+begin_src emacs-lisp :tangle yes
(setq +lookup-open-url-fn #'w3m-browse-url)
#+end_src

** calendar [0/0] :ARCHIVE:
#+begin_quote
This module adds a calendar view for Emacs, with org and google calendar sync
support.
#+end_quote

** emms [0/0] :ARCHIVE:
#+begin_quote
This module enables Emacs to be used as a music player. It uses [[https://www.musicpd.org/][mpd]] as a backend
server and [[https://musicpd.org/clients/mpc/][mpc]] to update your music database.
#+end_quote

** everywhere [0/1]
#+begin_quote
This module adds system-wide popup Emacs windows for quick edits.
#+end_quote

*** TODO [#A] Install prerequisites
**** WAIT macOS
***** WAIT Create an automator service to run a command
****** DONE Manual instructions
https://support.apple.com/guide/automator/use-a-shell-script-action-in-a-workflow-autbbd4cc11c/mac
#+begin_quote
_Use a shell script action in an Automator workflow on Mac_

You can extend the power of Automator on Mac by using shell commands within a
workflow. For example, you can string several bash shell commands together to
perform complex tasks, and then pass the results to a window.

1. Choose File > New.
2. Select a document type, then click Choose.
3. Type Run Shell Script in the search field, then select Run Shell Script in
   the search results.
4. Drag the Run Shell Script action into your workflow.
5. Click the Shell pop-up menu, then choose the shell environment.
6. Enter your shell commands in the command field.
7. Test your workflow before saving it.
#+end_quote

****** WAIT Use AppleScript to create an Automator Workflow
:LOGBOOK:
- Note taken on [2021-09-28 Tue 11:31] \\
  Waiting for a response on this StackExchange question that I just posted:
  https://apple.stackexchange.com/questions/428066/how-to-create-a-new-automator-workflow-via-applescript
:END:
https://support.apple.com/guide/automator/control-automator-with-scripts-autf238a3e24/2.10/mac/11.0
#+begin_quote
_Control Automator with scripts on Mac_

Automator is a “scriptable” application and can be controlled by AppleScript and
JavaScript for Automation commands. You can execute workflows, create new
workflows, add actions to workflows, get the values that are set within actions,
and much more.

To see Automator commands available to scripts, use Script Editor, included with
macOS.

1. In the Finder, open the Utilities folder in the Applications folder.
2. The Script Editor icon appears in the Utilities folder.
3. Open another Finder window, then open the Applications folder.
4. The Automator icon appears in the Applications folder.
5. Drag the Automator icon onto the Script Editor icon to open the ScriptEditor
   dictionary for Automator.
#+end_quote

Start of my idea for the AppleScript:
#+begin_src applescript :tangle no
on CreateShellScriptAutomatorWorkflow(shell, script, name)
    -- Need to start with Automator closed.
    if running of application "Automator" then
        try
            tell application "Automator" to quit
        on error
            do shell script "killall Automator"
        end try
    end if
    repeat while running of application "Automator" is true
        delay 0.1
    end repeat
    -- Open Automator.
    tell application "Automator"
        activate
        (*
            Now what?
        ,*)
    end tell
end CreateShellScriptAutomatorWorkflow
#+end_src

The following code block should produce the contents of the ~#!/bin/sh~ script:
#+begin_src emacs-lisp :tangle no
(let* ((emacsclient (executable-find "emacsclient"))
       (server-flag (if server-use-tcp "-f" "-s"))
       (server-dir (if server-use-tcp server-auth-dir server-socket-dir))
       (server-file (expand-file-name server-name server-dir)))
  (format "%s %s %s -e '(emacs-everywhere)'" emacsclient server-flag server-file))
#+end_src

***** HOLD Bind the service to a keybinding
****** DONE Manual instructions
https://www.howtogeek.com/286332/how-to-run-any-mac-terminal-command-with-a-keyboard-shortcut/
#+begin_quote
_How to Run Any Mac Terminal Command With a Keyboard Shortcut_
(...)
Save your workflow with a name you’ll recognize, and we’re done with Automator.

Next, head to System Preferences > Keyboard > Shortcuts. In the left panel click
“Services,” and scroll down until you see the service you just created—it should
be under the “General” section.
#+end_quote

****** HOLD Use AppleScript to assign the Workflow to a keybinding
******* DONE Create a script to do this
https://github.com/eeowaa/stow-dotfiles/blob/main/macos/.local/bin/service-shortcut

******* HOLD Call the script
Should eventually tangle to =install/macos.sh= once I have created the Workflow
via AppleScript:

#+begin_src sh :tangle no
service-shortcut 'Emacs everywhere' 4 e # Command+Option+E
#+end_src

**** TODO Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `app/everywhere` module
# XXX This will only work for X sessions (not Wayland)
sudo dnf -y install xclip xdotool xprop xwininfo
#+end_src

***** DONE Get this working on GNOME
When I try this on GNOME, I keep getting messages like this:
: File no longer exists: /tmp/emacs-everywhere-20220715-204508-libreoffice-writer, write buffer to file? (y or n) n

*UPDATE*: It is working for me now on GNOME X11. Maybe it's because I downgraded
to the Emacs 28.1 packaged by Fedora instead of using the COPR repo for Emacs 29
(dev). Still haven't tried with Wayland in a while, though.

***** WAIT Get this working on Wayland
+ Currently a work-in-progress: https://github.com/tecosaur/emacs-everywhere/issues/50
+ I could probably help with this...

***** TODO Automatically map ~doom everywhere~ to a key on GNOME
For now, I just manually mapped it to =Super-D=, but I would like to automate
that. I'm sure it's not too difficult.

** irc [3/5]
#+begin_quote
This module turns Emacs into an IRC client, capable of OS notifications.
#+end_quote

*** DONE [#A] Install prerequisites
**** DONE macOS
#+begin_src sh :tangle install/macos.sh
# Install prerequisites for `app/irc` module
brew install gnutls
#+end_src

**** DONE Fedora
#+begin_src sh :tangle install/fedora.sh
# Install prerequisites for `app/irc` module
sudo dnf -y install gnutls
#+end_src

*** DONE [#A] Configure =circe= for Libera.Chat
This should probably be done in a separate gitignored file (=custom.el=) for
security's sake.

*** DONE [#B] Find some interesting channels
+ Emacs
  - ~#emacs~
  - ~#org-mode~
  - ~#org-roam~
  - ~#systemcrafters~
  - ~#systemcrafters-help~
+ Linux
  - ~#gnu~
  - ~#linux~
  - ~#fedora~
  - ~#systemd~
  - ~#rpm-ecosystem~
+ Programming
  - ~##programming~
  - ~##typescript~
  - ~#python~
  - ~#bash~
  - ~#git~
+ Infrastructure
  - ~##infra-talk~
  - ~##aws~
  - ~#ansible~
  - ~#docker~
  - ~#networking~

*** TODO [#B] Find an easier way to search for channels
This is my current method of searching:

1. Manually enter the following query in a Circe Server buffer:
   : /msg alis LIST *searchterm*

2. Switch over to the newly-created ~alis@irc.libera.chat~ buffer to view
   results. From there, I can enter simple queries like this:
   : LIST *searchterm*

3. Use =SPC , alis RET= to return to that buffer when I want to perform another
   search. Back and forth...

I would much prefer a single =circe= command to do this rather than that whole
song and dance. See also: https://libera.chat/guides/findingchannels

*** TODO [#C] Figure out how to display inline images
** rss [3/5]
#+begin_quote
Read RSS feeds in the comfort of DOOM (Emacs)
#+end_quote

*** DONE [#A] Automatically update feed when opening =elfeed=
#+begin_src emacs-lisp :tangle yes
(after! elfeed
  (add-hook! 'elfeed-search-mode-hook #'elfeed-update))
#+end_src

*** DONE [#B] Allow widening of the description column :hack:
#+begin_src emacs-lisp :tangle yes
(after! elfeed
  ;; Do not truncate RSS entry titles
  (setq elfeed-search-title-max-width 1000)

  ;; Do not truncate RSS entry tags (just need to shift left by 2 characters)
  (defadvice! my/elfeed-format-column-a (str width &optional align)
    "Return STRING truncated or padded to WIDTH - 2 following alignment.
ALIGN should be a keyword :left or :right."
    :override #'elfeed-format-column
    (if (<= width 0)
        ""
      (format (format "%%%s%d.%ds"
                      (if (eq align :left) "-" "")
                      (- width 2)
                      (- width 2))
              str))))
#+end_src

*** DONE [#C] Leave point on the current entry in the ~*elfeed-search*~ buffer
By default, point in ~*elfeed-search*~ is always left on the entry /beneath/ the
currently-displayed entry in ~*elfeed-entry*~, regardless of navigation via
=C-j= or =C-k=. This is only annoying because I would like for the current entry
to be highlighted in ~*elfeed-search~ via =hl-line=.

#+begin_src emacs-lisp :tangle yes
(after! elfeed
  (setq elfeed-search-remain-on-entry t))
#+end_src

*** LOOP [#A] Undo breakage caused by unfortunate pull request
[[https://github.com/hlissner/doom-emacs/pull/5523][This PR]] broke my config. Here is the fix:

#+begin_src emacs-lisp :tangle packages.el
(package! elfeed-goodies :disable t)
#+end_src

If [[https://github.com/hlissner/doom-emacs/pull/5603][this other PR]] gets merged, I may be able to remove this.

*** TODO [#A] Fix error message I get when running =M-x =rss RET=
: if: Symbol’s value as variable is void: string

** twitter [0/0] :ARCHIVE:
#+begin_quote
Enjoy twitter from emacs.
#+end_quote

* :config
#+begin_quote
Modules that configure Emacs one way or another, or focus on making it easier
for you to customize it yourself. It is best to load these last.
#+end_quote

** Headers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;;; :config
#+end_src

** Miscellany [2/5]
#+begin_quote
Miscellaneous configuration without a corresponding module.
#+end_quote

*** DONE [#A] Load custom config if present
=~/.config/doom/custom.el= should look something like this:

#+begin_src emacs-lisp :tangle no
;;; Manual

;; Identifying information
(setq user-full-name "John Doe"
      user-mail-address "johndoe@example.com")

;; Geographic location
(setq calendar-latitude 35.0933
      calendar-longitude -98.2632
      calendar-location-name "Nowhere, OK")

;; RSS feeds
(setq elfeed-feeds
      '("https://example.com/rss.xml"))

;; Spotify (see https://developer.spotify.com/my-applications)
;; Could also use `auth-source' library to retrieve the credentials
(setq counsel-spotify-client-id "00000000000000000000000000000000"
      counsel-spotify-client-secret "00000000000000000000000000000000")

;; IRC
(set-irc-server! "irc.libera.chat"
  `(:tls t
    :port 6697
    :nick "johndoe"
    :sasl-password (auth-source-pick-first-password
                    :host "libera.chat"
                    :user "johndoe")
    :channels ("#emacs"
               "#")))

;;; Customize
#+end_src

#+begin_src emacs-lisp :tangle yes
(load! "custom" doom-user-dir t)
#+end_src

*** DONE [#C] Add ergonomic keybindings for hard-to-reach keys
I do not like to put undue stress on my pinky fingers while typing, so I often
like to use alternate key chords for the Enter, Backspace, and Tab keys (I have
Control and Alt mapped to thumb keys on my keyboard).

I would like to configure Emacs to use similar key chords as terminal emulators
for these special keys. Here are some options:

+ =RET= (=<return>=)
  - Options:
    + =C-j=: This is for "electric" and "special return" commands
      - Terminal Emacs actually recognizes =C-j= as a distinct key sequence,
        although typical Bourne-compatible shells and Vim do not
      - In my opinion, too much Emacs functionality relies on this sequence and
        there is no other keybinding that does the same thing
    + =C-m=: This already works as expected
      - No configuration necessary AFIAK
+ =DEL= (=<backspace>=)
  - Options:
    + =C-h=: This is just "help", which I can achieve using =SPC h= and =M-SPC h=
      - My muscle memory might make it hard for me to forget this keybinding
      - Terminal Emacs actually recognizes =C-h= as a distinct key sequence,
        although typical Bourne-compatible shells and Vim do not
    + =C-?=: This is just "redo", which I can achieve using =M-_=
      - The corresponding "undo" keybinding is =C-_=
      - =C-x u= runs ~undo-tree-visualize~, which gives a nice interface to this
+ =TAB= (=<tab>=)
  - Options:
    + =C-i=: This is just "jump forward", which I can achieve using =C-M-,=
      - The corresponding "jump backward" keybinding is =M-,=
      - =SPC s j= runs ~+ivy/jump-list~, which gives a nice interface to this
  - Updates:
    + For some reason (either by recently upgrading Doom Emacs or by downgrading
      to Emacs 28.1), =C-M-,= is no longer mapped to ~better-jumper-jump-forward~,
      but I can just manually add this keymapping
    + =C-M-,= does not work in GNOME terminal, but it can probably be fixed
      similarly to how [[https://www.emacswiki.org/emacs/LinuxConsoleKeys][keys can be fixed in the Linux console]]

References:
+ https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-Keymaps.html#Translation-Keymaps
+ https://emacs.stackexchange.com/a/3839
+ http://xahlee.info/emacs/emacs/emacs_key-translation-map.html

#+begin_src emacs-lisp :tangle yes
;; Map C-? to DEL
(define-key key-translation-map (kbd "C-?") (kbd "DEL"))

;; Map C-i to TAB and provide an alternative mapping for `better-jumper-jump-forward'
(define-key key-translation-map (kbd "C-i") (kbd "TAB"))
(global-set-key (kbd "C-M-,") #'better-jumper-jump-forward)
#+end_src

*** LOOP [#B] Add search directories for =projectile=
Some ideas for more project directories:
- [ ] Doom Emacs source directory
- [ ] System Emacs source directory

#+begin_src emacs-lisp :tangle yes
(setq projectile-project-search-path
      (list
       ;; Standard source directories
       (cons "/usr/src" 2)
       (cons "/usr/local/src" 2)
       (cons (concat (file-name-as-directory (getenv "HOME")) ".local/src") 2)

       ;; Personal source directories

       (cons (concat (file-name-as-directory (xdg-user-dir "DOCUMENTS")) "src/work") 2)
       (cons (concat (file-name-as-directory (xdg-user-dir "DOCUMENTS")) "src/life") 2)))
#+end_src

*** STRT [#B] Remove =straight= package repos from =projectile=
Unfortunately, the =~/.config/emacs/.local/straight/repos/*= are creeping back
in, so this isn't finished yet. Check =~/.config/emacs/core/core-projects.el=
to see how Doom configures Projectile.

#+begin_src emacs-lisp :tangle yes
;; REVIEW See if there is a cleaner way to flatten the `mapcan' list result
(after! projectile
  (eval
   `(pushnew!
     projectile-globally-ignored-directories
     ,@(mapcan
        (lambda (f)
          (when (file-directory-p f)
            (list (abbreviate-file-name f))))
        (directory-files (format "%s/.local/straight/repos" doom-emacs-dir)
                                   t "\\`[^.]")))))
#+end_src

** literate [2/4]
#+begin_quote
This module enables support for a literate config.
#+end_quote

*** DONE [#A] Disable tangle upon save
It just takes too long. 🙁

#+begin_src emacs-lisp :tangle yes
(remove-hook 'org-mode-hook #'+literate-enable-recompile-h)
#+end_src

*** DONE [#B] Tangle to =packages.el=
I would like to make =packages.el= literate instead of "illiterate". 😉

*** TODO [#C] Link tangled blocks back to source
Refer to your old config.

*** HOLD [#C] Split up my literate config into separate files
This can be done with ~#+INCLUDE~ directives. Doing so might make tangling
faster, but currently I don't have any problems with performance. If and when I
start to notice a problem, I'll revisit this item.

** default [8/10]
#+begin_quote
This module provides a set of reasonable defaults.
#+end_quote

*** DONE [#A] Start with ~smartparens-global-mode~ disabled
~smartparens-global-mode~ can be toggled with =SPC t (=.

#+begin_src emacs-lisp :tangle yes
(remove-hook 'doom-first-buffer-hook #'smartparens-global-mode)
#+end_src

*** DONE [#A] Disable =smartparens= in the minibuffer, including the =evil-ex= prompt
#+begin_src emacs-lisp :tangle yes
(after! smartparens
  (remove-hook 'eval-expression-minibuffer-setup-hook
               #'doom-init-smartparens-in-eval-expression-h)
  (remove-hook 'minibuffer-setup-hook
               #'doom-init-smartparens-in-minibuffer-maybe-h))
#+end_src

*** DONE [#A] Adjust =which-key= timing
The default delay of 1 second is too long for my taste.

#+begin_src emacs-lisp :tangle yes
(setq which-key-idle-delay 0.5
      which-key-idle-secondary-delay 0.1)
#+end_src

*** DONE [#A] Improve builtin help
In order to increase discoverability of keybindings, I created a function for
describing where all invocations of a key sequence is.

#+begin_src emacs-lisp :tangle yes
(defun my/alternate-keys (key &optional insert)
  "Print message listing equivalent alternate key sequences for KEY.
KEY is a pair (SEQ . RAW-SEQ) of key sequences, where
RAW-SEQ is the untranslated form of the key sequence SEQ.
If INSERT (the prefix arg) is non-nil, insert the message in the buffer.
While reading KEY interactively, this command temporarily enables
menu items or tool-bar buttons that are disabled to allow getting help
on them."
  (interactive
   ;; Ignore mouse movement events because it's too easy to miss the
   ;; message while moving the mouse.
   (list (car (help--read-key-sequence 'no-mouse-movement)) current-prefix-arg))
  (where-is (cadr (help--analyze-key (car key) (cdr key))) insert))

(define-key! help-map
  "C-f" #'find-function      ;; replaces `view-emacs-FAQ' b/c I rarely use it
  "C-l" #'find-library       ;; replaces `describe-language-environment'
  "C-v" #'find-variable
  "C-w" #'my/alternate-keys) ;; replaces `describe-no-warranty' b/c I never use it
#+end_src

*** DONE [#B] Do not display line numbers in text mode
#+begin_src emacs-lisp :tangle yes
(remove-hook 'text-mode-hook #'display-line-numbers-mode)
#+end_src

*** DONE [#B] Normalize the behavior of toggling line numbers
~doom/toggle-line-numbers~ is inconsistent with how it cycles through line
numbers, depending on whether the function has been called in the current buffer
yet. I believe this is due to how ~doom--line-number-style~ is assigned ~t~ by
default, yet gets set to ~display-line-numbers-type~ upon the first call of
~doom/toggle-line-numbers~.

I work around this issue by defining my own line-number-toggling function and
aliasing ~doom/toggle-line-numbers~ to it.

#+begin_src emacs-lisp :tangle yes
(defun my/toggle-line-numbers ()
  "Toggle line numbers.

Cycles through regular, relative and no line numbers. If you're
using Emacs 26+, and `visual-line-mode' is on, this skips relative
and uses visual instead."
  (interactive)
  (cond
   ((not display-line-numbers)
    (setq display-line-numbers t)
    (message "Switched to normal line numbers"))
   ((memq display-line-numbers '(visual relative))
    (setq display-line-numbers nil)
    (message "Switched to disabled line numbers"))
   (visual-line-mode
    (setq display-line-numbers 'visual)
    (message "Switched to visual line numbers"))
   (t
    (setq display-line-numbers 'relative)
    (message "Switched to relative line numbers"))))

(define-key! doom-leader-toggle-map
  ;; replaces `doom/toggle-line-numbers'
  "l" #'my/toggle-line-numbers)
#+end_src

*** DONE [#B] Define additional Doom search functions
#+begin_src emacs-lisp :tangle yes
(defun my/doom-help-search-source (&optional initial-input)
  "Perform a text search across all files in `doom-emacs-dir'."
  (interactive)
  (funcall (cond ((fboundp '+ivy-file-search)
                  #'+ivy-file-search)
                 ((fboundp '+vertico-file-search)
                  #'+vertico-file-search)
                 (t
                  #'ignore))
    :query initial-input
    :in doom-emacs-dir
    :prompt (format "Search source for: ")))

(defun my/doom-help-search-modules (&optional initial-input)
  "Perform a text search across all files in `doom-modules-dir'."
  (interactive)
  (funcall (cond ((fboundp '+ivy-file-search)
                  #'+ivy-file-search)
                 ((fboundp '+vertico-file-search)
                  #'+vertico-file-search)
                 (t
                  #'ignore))
    :query initial-input
    :in doom-modules-dir
    :prompt "Search modules for: "))

(define-key! help-map
  "de" #'my/doom-help-search-source
  "dM" #'my/doom-help-search-modules)
#+end_src

*** DONE [#B] Add additional file keybindings
#+begin_src emacs-lisp :tangle yes
(when (fboundp 'find-sibling-file)
  ;; Same directory, same base file name, different extension
  (add-to-list 'find-sibling-rules '("\\([^/]+\\)\\..*\\'" "\\1\\..*\\'"))
  (define-key! doom-leader-file-map
    "o" #'find-sibling-file)
  (after! which-key
    (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
      (cl-pushnew `((,(format "\\`%s f o\\'" prefix-re)) nil . "Find other file")
                  which-key-replacement-alist))))
#+end_src

*** TODO [#A] Prevent the =which-key= popop from "bouncing"
Sometimes the window overshoots its height and settles back down to where it
should be. This is an annoying visual distraction.

References:
+ ~which-key-popup-type~
+ ~which-key--update~

*** STRT [#B] Add additional toggle keybindings
#+begin_src emacs-lisp :tangle yes
(defun my/toggle-sentence-end-double-space ()
  "Toggle 1 or 2 spaces at the end of sentences."
  (interactive)
  (if (not sentence-end-double-space)
      (progn
        (setq-local sentence-end-double-space t)
        (message "Sentences end with 2 spaces"))
    (setq-local sentence-end-double-space nil)
    (message "Sentences end with 1 space")))

;; FIXME: This only works with single keys, but I designed it to work with
;; multiple. I don't know why it isn't working.
(defmacro my/define-toggle-key! (&rest args)
  "Define a series of toggle key bindings."
  (unless (= 0 (mod (length args) 3))
    (error "Arguments must come in groups of 3"))
  (let (key cmd doc (binds '(_)) (hints '(_)))
    (while args
      (setq key (pop args)
            cmd (pop args)
            doc (pop args))
      (nconc binds `(,key ,cmd))
      (nconc hints `((,key ,doc))))
    (pop binds)
    (pop hints)
    `(progn
       (define-key! doom-leader-toggle-map ,@binds)
       (after! which-key
         (let ((prefix-re (regexp-opt (list doom-leader-key
                                            doom-leader-alt-key))))
           (dolist (hint ',hints)
             (let ((key (pop hint))
                   (doc (pop hint)))
               (cl-pushnew
                (cons (list (format "\\`%s t %s\\'" prefix-re key))
                      (cons nil doc))
                which-key-replacement-alist))))))))

;; NOTE: This should be refactored to use one `my/define-toggle-key!' call once
;; I've fixed that function.
(my/define-toggle-key! "SPC" #'whitespace-mode                     "Whitespace mode")
(my/define-toggle-key! "("   #'smartparens-global-mode             "Smartparens")
(my/define-toggle-key! "."   #'my/toggle-sentence-end-double-space "Sentence spacing")
(my/define-toggle-key! "a"   #'auto-fill-mode                      "Auto fill")
(my/define-toggle-key! "B"   #'display-battery-mode                "Battery indicator")
(my/define-toggle-key! "c"   #'display-fill-column-indicator-mode  "Fill column indicator")
(my/define-toggle-key! "C"   #'column-highlight-mode               "Column highlight")
(my/define-toggle-key! "h"   #'use-hard-newlines                   "Hard newlines")
(my/define-toggle-key! "L"   #'hl-line-mode                        "Line highlight")
(my/define-toggle-key! "o"   #'overwrite-mode                      "Overwrite")
(my/define-toggle-key! "t"   #'toggle-truncate-lines               "Truncate lines")
(my/define-toggle-key! "|"   #'visual-fill-column-mode             "Visual fill column")
(my/define-toggle-key! "C-l" #'page-break-lines-mode               "Page break lines")
#+end_src

* Footers :SCAFFOLDING:
#+begin_src emacs-lisp :tangle packages.el
;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;(package! another-package
;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;(package! this-package
;  :recipe (:host github :repo "username/repo"
;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;(package! builtin-package :recipe (:nonrecursive t))
;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;(package! builtin-package :pin "1a2b3c4d5e")


;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;(unpin! pinned-package)
;; ...or multiple packages
;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;(unpin! t)
#+end_src
